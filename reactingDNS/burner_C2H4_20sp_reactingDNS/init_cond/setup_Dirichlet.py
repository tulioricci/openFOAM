import numpy as np
import cantera as ct

import sys
import getopt

arg_list = sys.argv[1:]

phi = None
opts, args = getopt.getopt(arg_list,":",["phi="])
for opt, arg in opts:
    if opt in ("--phi"):
        phi = float(arg)
        print ('Equivalence ratio = ', float(phi))

if phi is None:
    print("Define the equivalence ratio with --phi")
    sys.exit()

gas = ct.Solution("uiuc_20sp.yaml")

air = "O2:0.21,N2:0.79"
fuel = "C2H4:1"
gas.TP = 300.0, 101325.0

gas.set_equivalence_ratio(phi=phi, fuel=fuel, oxidizer=air)
y_unburned = gas.Y

x_atmosphere = y_unburned*0.0
x_atmosphere[gas.species_index("O2")] = 0.21
x_atmosphere[gas.species_index("N2")] = 0.79

gas.X = x_atmosphere
y_atmosphere = gas.Y

y_shroud = y_atmosphere*0.0
y_shroud[gas.species_index("N2")] = 1.0

import os
for spc in gas.species_names:
    idx = gas.species_index(spc)

    print(spc, idx)
    os.system("head -n 19 Ydefault >" + spc)
    os.system("sed -i '14s/.*/    object      " + spc + ";/' " + spc)

    os.system("echo 'internalField   uniform " + str(y_atmosphere[idx]).strip("'") + ";' >> " + spc)
    
    os.system("echo '' >> " + spc)
    os.system("echo 'boundaryField' >> " + spc)
    os.system("echo '{' >> " + spc)
 
    os.system("echo '    fuel' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            codedFixedValue;' >> " + spc)
    os.system("echo '        value           uniform " + str(y_unburned[idx]) + ";' >> " + spc)
    os.system("echo '        name            my" + spc + "Inlet;' >> " + spc)
    os.system("echo '        redirectType    my" + spc + "inlet;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        code' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            const scalar refVal = " + str(y_unburned[idx]) + ";' >> " + spc)
    os.system("echo '            const scalar epsilon = 0.465;' >> " + spc)
    os.system("echo '            const scalar eta = 1.0;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            const fvPatch& boundaryPatch = patch();       // Get the current patch' >> " + spc)
    os.system("echo '            scalarField& patchField = *this;             // Directly access the boundary field' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the fvMesh through the patch field`s mesh()' >> " + spc)
    os.system("echo '            const fvMesh& mesh = this->patch().boundaryMesh().mesh();' >> " + spc)
    os.system("echo '            const pointField& cellCenters = mesh.C();' >> " + spc)
    os.system("echo '            const pointField& faceCenters = boundaryPatch.Cf();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the fields' >> " + spc)
    os.system("echo '            const vectorField& faceNormals = boundaryPatch.Sf();' >> " + spc)
    os.system("echo '            const scalarField faceAreas = mag(faceNormals);' >> " + spc)
    os.system("echo '            const volVectorField& U = db().lookupObject<volVectorField>(\"U\");' >> " + spc)
    #os.system("echo '            const volScalarField& psi = db().lookupObject<volScalarField>(\"thermo:psi\");' >> " + spc)
    #os.system("echo '            const volScalarField& p = db().lookupObject<volScalarField>(\"p\");' >> " + spc)
    os.system("echo '            const volScalarField& Diffi = db().lookupObject<volScalarField>(\"Diff" + spc + "\");' >> " + spc)
    os.system("echo '            const volScalarField& Y = db().lookupObject<volScalarField>(\"" + spc + "\");' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the internal field of Y (values at cell centers)' >> " + spc)
    os.system("echo '            const scalarField& Y_internal = Y.internalField();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Get the indices of the cells adjacent to the boundary faces' >> " + spc)
    os.system("echo '            const labelList& faceCells = boundaryPatch.faceCells();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Loop over the boundary faces' >> " + spc)
    os.system("echo '            forAll(boundaryPatch, faceI)' >> " + spc)
    os.system("echo '            {' >> " + spc)
    os.system("echo '                // Get the cell index corresponding to this face' >> " + spc)    
    os.system("echo '                // Retrieve the scalar value at the cell center' >> " + spc)
    os.system("echo '                label cellI = faceCells[faceI];' >> " + spc)
    os.system("echo '                scalar Y_cellCenter = Y_internal[cellI];' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // Compute the distance between the face center and the cell center' >> " + spc)
    os.system("echo '                // Example: Print the cell-center value and distance' >> " + spc)
    os.system("echo '                scalar distance = mag(faceCenters[faceI] - cellCenters[cellI]);      ' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                vector UVal = U.boundaryField()[boundaryPatch.index()][faceI];' >> " + spc)
    os.system("echo '                scalar diffVal = Diffi.boundaryField()[boundaryPatch.index()][faceI];' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                vector nHat = faceNormals[faceI] / faceAreas[faceI];' >> " + spc)
    os.system("echo '                scalar U_normal = UVal & nHat;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // rho cancels out on numerator and denominator...' >> " + spc)
    os.system("echo '                scalar conv = -1.0 * U_normal;' >> " + spc)
    os.system("echo '                scalar diff = (epsilon * diffVal / eta)/distance;' >> " + spc)
    os.system("echo '                patchField[faceI] = 1.0/(conv + diff)*( conv*refVal + diff*Y_cellCenter);' >> " + spc)
    #if spc == "C2H4":
    #    os.system("echo '                Info << \"Face \" << faceI << \", Cell center scalar Y: \" << Y_cellCenter << nl;' >> " + spc)
    #    os.system("echo '                Info << \"Distance to cell center: \" << distance << nl;' >> " + spc)
    #    os.system("echo '                Info << conv << \" \" << diff << \" \"  << patchField[faceI] << nl;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // Update the coefficients for the patch field' >> " + spc)
    os.system("echo '                fixedValueFvPatchField::updateCoeffs(); ' >> " + spc)  
    os.system("echo '            }' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        codeOptions' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            -I$(LIB_SRC)/../applications/solvers/combustion/reactingDNS/transport' >> " + spc)
    #os.system("echo '            -I$(LIB_SRC)/finiteVolume/lnInclude \\' >> " + spc)
    #os.system("echo '            -I$(LIB_SRC)/meshTools/lnInclude' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        codeInclude' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            #include <cmath>' >> " + spc)
    os.system("echo '            #include <iostream>' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '    }' >> " + spc)
    os.system("echo '' >> " + spc)
    
    os.system("echo '    shield' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            codedFixedValue;' >> " + spc)
    os.system("echo '        value           uniform " + str(y_shroud[idx]) + ";' >> " + spc)
    os.system("echo '        name            my" + spc + "Shield;' >> " + spc)
    os.system("echo '        redirectType    my" + spc + "Shield;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        code' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            const scalar refVal = " + str(y_shroud[idx]) + ";' >> " + spc)
    os.system("echo '            const scalar epsilon = 0.465;' >> " + spc)
    os.system("echo '            const scalar eta = 1.0;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            const fvPatch& boundaryPatch = patch();       // Get the current patch' >> " + spc)
    os.system("echo '            scalarField& patchField = *this;             // Directly access the boundary field' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the fvMesh through the patch field`s mesh()' >> " + spc)
    os.system("echo '            const fvMesh& mesh = this->patch().boundaryMesh().mesh();' >> " + spc)
    os.system("echo '            const pointField& cellCenters = mesh.C();' >> " + spc)
    os.system("echo '            const pointField& faceCenters = boundaryPatch.Cf();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the fields' >> " + spc)
    os.system("echo '            const vectorField& faceNormals = boundaryPatch.Sf();' >> " + spc)
    os.system("echo '            const scalarField faceAreas = mag(faceNormals);' >> " + spc)
    os.system("echo '            const volVectorField& U = db().lookupObject<volVectorField>(\"U\");' >> " + spc)
    #os.system("echo '            const volScalarField& psi = db().lookupObject<volScalarField>(\"thermo:psi\");' >> " + spc)
    #os.system("echo '            const volScalarField& p = db().lookupObject<volScalarField>(\"p\");' >> " + spc)
    os.system("echo '            const volScalarField& Diffi = db().lookupObject<volScalarField>(\"Diff" + spc + "\");' >> " + spc)
    os.system("echo '            const volScalarField& Y = db().lookupObject<volScalarField>(\"" + spc + "\");' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Access the internal field of Y (values at cell centers)' >> " + spc)
    os.system("echo '            const scalarField& Y_internal = Y.internalField();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Get the indices of the cells adjacent to the boundary faces' >> " + spc)
    os.system("echo '            const labelList& faceCells = boundaryPatch.faceCells();' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '            // Loop over the boundary faces' >> " + spc)
    os.system("echo '            forAll(boundaryPatch, faceI)' >> " + spc)
    os.system("echo '            {' >> " + spc)
    os.system("echo '                // Get the cell index corresponding to this face' >> " + spc)    
    os.system("echo '                // Retrieve the scalar value at the cell center' >> " + spc)
    os.system("echo '                label cellI = faceCells[faceI];' >> " + spc)
    os.system("echo '                scalar Y_cellCenter = Y_internal[cellI];' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // Compute the distance between the face center and the cell center' >> " + spc)
    os.system("echo '                // Example: Print the cell-center value and distance' >> " + spc)
    os.system("echo '                scalar distance = mag(faceCenters[faceI] - cellCenters[cellI]);      ' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                vector UVal = U.boundaryField()[boundaryPatch.index()][faceI];' >> " + spc)
    os.system("echo '                scalar diffVal = Diffi.boundaryField()[boundaryPatch.index()][faceI];' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                vector nHat = faceNormals[faceI] / faceAreas[faceI];' >> " + spc)
    os.system("echo '                scalar U_normal = UVal & nHat;' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // rho cancels out on numerator and denominator...' >> " + spc)
    os.system("echo '                scalar conv = -1.0 * U_normal;' >> " + spc)
    os.system("echo '                scalar diff = (epsilon * diffVal / eta)/distance;' >> " + spc)
    os.system("echo '                patchField[faceI] = 1.0/(conv + diff)*( conv*refVal + diff*Y_cellCenter);' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '                // Update the coefficients for the patch field' >> " + spc)
    os.system("echo '                fixedValueFvPatchField::updateCoeffs(); ' >> " + spc)  
    os.system("echo '            }' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        codeOptions' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            -I$(LIB_SRC)/../applications/solvers/combustion/reactingDNS/transport' >> " + spc)
    #os.system("echo '            -I$(LIB_SRC)/finiteVolume/lnInclude \\' >> " + spc)
    #os.system("echo '            -I$(LIB_SRC)/meshTools/lnInclude' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '' >> " + spc)
    os.system("echo '        codeInclude' >> " + spc)
    os.system("echo '        #{' >> " + spc)
    os.system("echo '            #include <cmath>' >> " + spc)
    os.system("echo '            #include <iostream>' >> " + spc)
    os.system("echo '        #};' >> " + spc)
    os.system("echo '    }' >> " + spc)
    os.system("echo '' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    outlet' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            zeroGradient;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    farfield' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            zeroGradient;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    burner' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            zeroGradient;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    sample' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            zeroGradient;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    f_front' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            wedge;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '' >> " + spc)
    os.system("echo '    f_back' >> " + spc)
    os.system("echo '    {' >> " + spc)
    os.system("echo '        type            wedge;' >> " + spc)
    os.system("echo '    }' >> " + spc)

    os.system("echo '}' >> " + spc)
    
