"""
.. autoclass:: Thermochemistry
"""


from warnings import warn
import numpy as np


class Thermochemistry:
    """
    .. attribute:: model_name
    .. attribute:: num_elements
    .. attribute:: num_species
    .. attribute:: num_reactions
    .. attribute:: num_falloff
    .. attribute:: one_atm

        Returns 1 atm in SI units of pressure (Pa).

    .. attribute:: gas_constant
    .. attribute:: species_names
    .. attribute:: species_indices

    .. automethod:: get_specific_gas_constant
    .. automethod:: get_density
    .. automethod:: get_pressure
    .. automethod:: get_mix_molecular_weight
    .. automethod:: get_concentrations
    .. automethod:: get_mole_fractions
    .. automethod:: get_mass_average_property
    .. automethod:: get_mixture_specific_heat_cp_mass
    .. automethod:: get_mixture_specific_heat_cv_mass
    .. automethod:: get_mixture_enthalpy_mass
    .. automethod:: get_mixture_internal_energy_mass
    .. automethod:: get_species_viscosities
    .. automethod:: get_mixture_viscosity_mixavg
    .. automethod:: get_species_thermal_conductivities
    .. automethod:: get_mixture_thermal_conductivity_mixavg
    .. automethod:: get_species_binary_mass_diffusivities
    .. automethod:: get_species_mass_diffusivities_mixavg
    .. automethod:: get_species_specific_heats_r
    .. automethod:: get_species_enthalpies_rt
    .. automethod:: get_species_entropies_r
    .. automethod:: get_species_gibbs_rt
    .. automethod:: get_equilibrium_constants
    .. automethod:: get_temperature
    .. automethod:: __init__
    """

    def __init__(self, usr_np=np):
        """Initialize thermochemistry object for a mechanism.

        Parameters
        ----------
        usr_np
            :mod:`numpy`-like namespace providing at least the following functions,
            for any array ``X`` of the bulk array type:

            - ``usr_np.log(X)`` (like :data:`numpy.log`)
            - ``usr_np.log10(X)`` (like :data:`numpy.log10`)
            - ``usr_np.exp(X)`` (like :data:`numpy.exp`)
            - ``usr_np.where(X > 0, X_yes, X_no)`` (like :func:`numpy.where`)
            - ``usr_np.linalg.norm(X, np.inf)`` (like :func:`numpy.linalg.norm`)

            where the "bulk array type" is a type that offers arithmetic analogous
            to :class:`numpy.ndarray` and is used to hold all types of (potentialy
            volumetric) "bulk data", such as temperature, pressure, mass fractions,
            etc. This parameter defaults to *actual numpy*, so it can be ignored
            unless it is needed by the user (e.g. for purposes of
            GPU processing or automatic differentiation).

        """

        self.usr_np = usr_np
        self.model_name = 'mechs/uiuc_20sp.yaml'
        self.num_elements = 4
        self.num_species = 20
        self.num_reactions = 78
        self.num_falloff = 0

        self.one_atm = 101325.0
        self.gas_constant = 8314.46261815324
        self.big_number = 1.0e300

        self.species_names = ['C2H4', 'H2', 'H', 'O2', 'O', 'H2O', 'CO', 'CO2', 'OH', 'HCO', 'HO2', 'H2O2', 'C2H3', 'C2H2', 'CH4', 'CH3', 'CH2', 'CH2O', 'CH2CHO', 'N2']
        self.species_indices = {'C2H4': 0, 'H2': 1, 'H': 2, 'O2': 3, 'O': 4, 'H2O': 5, 'CO': 6, 'CO2': 7, 'OH': 8, 'HCO': 9, 'HO2': 10, 'H2O2': 11, 'C2H3': 12, 'C2H2': 13, 'CH4': 14, 'CH3': 15, 'CH2': 16, 'CH2O': 17, 'CH2CHO': 18, 'N2': 19}

        self.molecular_weights = np.array([28.054, 2.016, 1.008, 31.998, 15.999, 18.015, 28.009999999999998, 44.009, 17.007, 29.018, 33.006, 34.014, 27.046, 26.037999999999997, 16.043, 15.035, 14.027, 30.026, 43.045, 28.014])
        self.inv_molecular_weights = 1/self.molecular_weights

    @property
    def wts(self):
        warn("Thermochemistry.wts is deprecated and will go away in 2024. "
             "Use molecular_weights instead.", DeprecationWarning, stacklevel=2)

        return self.molecular_weights

    @property
    def iwts(self):
        warn("Thermochemistry.iwts is deprecated and will go away in 2024. "
             "Use inv_molecular_weights instead.", DeprecationWarning, stacklevel=2)

        return self.inv_molecular_weights

    def _pyro_zeros_like(self, argument):
        # FIXME: This is imperfect, as a NaN will stay a NaN.
        return 0 * argument

    def _pyro_make_array(self, res_list):
        """This works around (e.g.) numpy.exp not working with object
        arrays of numpy scalars. It defaults to making object arrays, however
        if an array consists of all scalars, it makes a "plain old"
        :class:`numpy.ndarray`.

        See ``this numpy bug <https://github.com/numpy/numpy/issues/18004>`__
        for more context.
        """

        from numbers import Number
        all_numbers = all(isinstance(e, Number) for e in res_list)

        dtype = np.float64 if all_numbers else object
        result = np.empty((len(res_list),), dtype=dtype)

        # 'result[:] = res_list' may look tempting, however:
        # https://github.com/numpy/numpy/issues/16564
        for idx in range(len(res_list)):
            result[idx] = res_list[idx]

        return result

    def _pyro_norm(self, argument, normord):
        """This works around numpy.linalg norm not working with scalars.

        If the argument is a regular ole number, it uses :func:`numpy.abs`,
        otherwise it uses ``usr_np.linalg.norm``.
        """
        # Wrap norm for scalars

        from numbers import Number

        if isinstance(argument, Number):
            return np.abs(argument)
        return self.usr_np.linalg.norm(argument, normord)

    def species_name(self, species_index):
        return self.species_name[species_index]

    def species_index(self, species_name):
        return self.species_indices[species_name]

    def get_specific_gas_constant(self, mass_fractions):
        return self.gas_constant * (
            + self.inv_molecular_weights[0]*mass_fractions[0]
            + self.inv_molecular_weights[1]*mass_fractions[1]
            + self.inv_molecular_weights[2]*mass_fractions[2]
            + self.inv_molecular_weights[3]*mass_fractions[3]
            + self.inv_molecular_weights[4]*mass_fractions[4]
            + self.inv_molecular_weights[5]*mass_fractions[5]
            + self.inv_molecular_weights[6]*mass_fractions[6]
            + self.inv_molecular_weights[7]*mass_fractions[7]
            + self.inv_molecular_weights[8]*mass_fractions[8]
            + self.inv_molecular_weights[9]*mass_fractions[9]
            + self.inv_molecular_weights[10]*mass_fractions[10]
            + self.inv_molecular_weights[11]*mass_fractions[11]
            + self.inv_molecular_weights[12]*mass_fractions[12]
            + self.inv_molecular_weights[13]*mass_fractions[13]
            + self.inv_molecular_weights[14]*mass_fractions[14]
            + self.inv_molecular_weights[15]*mass_fractions[15]
            + self.inv_molecular_weights[16]*mass_fractions[16]
            + self.inv_molecular_weights[17]*mass_fractions[17]
            + self.inv_molecular_weights[18]*mass_fractions[18]
            + self.inv_molecular_weights[19]*mass_fractions[19]
            )

    def get_density(self, pressure, temperature, mass_fractions):
        mmw = self.get_mix_molecular_weight(mass_fractions)
        rt = self.gas_constant * temperature
        return pressure * mmw / rt

    def get_pressure(self, rho, temperature, mass_fractions):
        mmw = self.get_mix_molecular_weight(mass_fractions)
        rt = self.gas_constant * temperature
        return rho * rt / mmw

    def get_mix_molecular_weight(self, mass_fractions):
        return 1/(
            + self.inv_molecular_weights[0]*mass_fractions[0]
            + self.inv_molecular_weights[1]*mass_fractions[1]
            + self.inv_molecular_weights[2]*mass_fractions[2]
            + self.inv_molecular_weights[3]*mass_fractions[3]
            + self.inv_molecular_weights[4]*mass_fractions[4]
            + self.inv_molecular_weights[5]*mass_fractions[5]
            + self.inv_molecular_weights[6]*mass_fractions[6]
            + self.inv_molecular_weights[7]*mass_fractions[7]
            + self.inv_molecular_weights[8]*mass_fractions[8]
            + self.inv_molecular_weights[9]*mass_fractions[9]
            + self.inv_molecular_weights[10]*mass_fractions[10]
            + self.inv_molecular_weights[11]*mass_fractions[11]
            + self.inv_molecular_weights[12]*mass_fractions[12]
            + self.inv_molecular_weights[13]*mass_fractions[13]
            + self.inv_molecular_weights[14]*mass_fractions[14]
            + self.inv_molecular_weights[15]*mass_fractions[15]
            + self.inv_molecular_weights[16]*mass_fractions[16]
            + self.inv_molecular_weights[17]*mass_fractions[17]
            + self.inv_molecular_weights[18]*mass_fractions[18]
            + self.inv_molecular_weights[19]*mass_fractions[19]
            )

    def get_concentrations(self, rho, mass_fractions):
        return self._pyro_make_array([
            self.inv_molecular_weights[0] * rho * mass_fractions[0],
            self.inv_molecular_weights[1] * rho * mass_fractions[1],
            self.inv_molecular_weights[2] * rho * mass_fractions[2],
            self.inv_molecular_weights[3] * rho * mass_fractions[3],
            self.inv_molecular_weights[4] * rho * mass_fractions[4],
            self.inv_molecular_weights[5] * rho * mass_fractions[5],
            self.inv_molecular_weights[6] * rho * mass_fractions[6],
            self.inv_molecular_weights[7] * rho * mass_fractions[7],
            self.inv_molecular_weights[8] * rho * mass_fractions[8],
            self.inv_molecular_weights[9] * rho * mass_fractions[9],
            self.inv_molecular_weights[10] * rho * mass_fractions[10],
            self.inv_molecular_weights[11] * rho * mass_fractions[11],
            self.inv_molecular_weights[12] * rho * mass_fractions[12],
            self.inv_molecular_weights[13] * rho * mass_fractions[13],
            self.inv_molecular_weights[14] * rho * mass_fractions[14],
            self.inv_molecular_weights[15] * rho * mass_fractions[15],
            self.inv_molecular_weights[16] * rho * mass_fractions[16],
            self.inv_molecular_weights[17] * rho * mass_fractions[17],
            self.inv_molecular_weights[18] * rho * mass_fractions[18],
            self.inv_molecular_weights[19] * rho * mass_fractions[19],
        ])

    def get_mole_fractions(self, mix_mol_weight, mass_fractions):
        return self._pyro_make_array([
            self.inv_molecular_weights[0] * mass_fractions[0] * mix_mol_weight,
            self.inv_molecular_weights[1] * mass_fractions[1] * mix_mol_weight,
            self.inv_molecular_weights[2] * mass_fractions[2] * mix_mol_weight,
            self.inv_molecular_weights[3] * mass_fractions[3] * mix_mol_weight,
            self.inv_molecular_weights[4] * mass_fractions[4] * mix_mol_weight,
            self.inv_molecular_weights[5] * mass_fractions[5] * mix_mol_weight,
            self.inv_molecular_weights[6] * mass_fractions[6] * mix_mol_weight,
            self.inv_molecular_weights[7] * mass_fractions[7] * mix_mol_weight,
            self.inv_molecular_weights[8] * mass_fractions[8] * mix_mol_weight,
            self.inv_molecular_weights[9] * mass_fractions[9] * mix_mol_weight,
            self.inv_molecular_weights[10] * mass_fractions[10] * mix_mol_weight,
            self.inv_molecular_weights[11] * mass_fractions[11] * mix_mol_weight,
            self.inv_molecular_weights[12] * mass_fractions[12] * mix_mol_weight,
            self.inv_molecular_weights[13] * mass_fractions[13] * mix_mol_weight,
            self.inv_molecular_weights[14] * mass_fractions[14] * mix_mol_weight,
            self.inv_molecular_weights[15] * mass_fractions[15] * mix_mol_weight,
            self.inv_molecular_weights[16] * mass_fractions[16] * mix_mol_weight,
            self.inv_molecular_weights[17] * mass_fractions[17] * mix_mol_weight,
            self.inv_molecular_weights[18] * mass_fractions[18] * mix_mol_weight,
            self.inv_molecular_weights[19] * mass_fractions[19] * mix_mol_weight,
            ])

    def get_mass_average_property(self, mass_fractions, spec_property):
        return sum([
            mass_fractions[i] * spec_property[i] * self.inv_molecular_weights[i]
            for i in range(self.num_species)])

    def get_mixture_specific_heat_cp_mass(self, temperature, mass_fractions):
        cp0_r = self.get_species_specific_heats_r(temperature)
        cp_mix = self.get_mass_average_property(mass_fractions, cp0_r)
        return self.gas_constant * cp_mix

    def get_mixture_specific_heat_cv_mass(self, temperature, mass_fractions):
        cv0_r = self.get_species_specific_heats_r(temperature) - 1.0
        cv_mix = self.get_mass_average_property(mass_fractions, cv0_r)
        return self.gas_constant * cv_mix

    def get_mixture_enthalpy_mass(self, temperature, mass_fractions):
        h0_rt = self.get_species_enthalpies_rt(temperature)
        h_mix = self.get_mass_average_property(mass_fractions, h0_rt)
        return self.gas_constant * temperature * h_mix

    def get_mixture_internal_energy_mass(self, temperature, mass_fractions):
        e0_rt = self.get_species_enthalpies_rt(temperature) - 1.0
        e_mix = self.get_mass_average_property(mass_fractions, e0_rt)
        return self.gas_constant * temperature * e_mix

    def get_species_specific_heats_r(self, temperature):
        return self._pyro_make_array([
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.03611116 + 0.0146454151*temperature + -6.71077915e-06*temperature**2 + 1.47222923e-09*temperature**3 + -1.25706061e-13*temperature**4, 3.95920148 + -0.00757052247*temperature + 5.70990292e-05*temperature**2 + -6.91588753e-08*temperature**3 + 2.69884373e-11*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.3372792 + -4.94024731e-05*temperature + 4.99456778e-07*temperature**2 + -1.79566394e-10*temperature**3 + 2.00255376e-14*temperature**4, 2.34433112 + 0.00798052075*temperature + -1.9478151e-05*temperature**2 + 2.01572094e-08*temperature**3 + -7.37611761e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.50000001 + -2.30842973e-11*temperature + 1.61561948e-14*temperature**2 + -4.73515235e-18*temperature**3 + 4.98197357e-22*temperature**4, 2.5 + 7.05332819e-13*temperature + -1.99591964e-15*temperature**2 + 2.30081632e-18*temperature**3 + -9.27732332e-22*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.28253784 + 0.00148308754*temperature + -7.57966669e-07*temperature**2 + 2.09470555e-10*temperature**3 + -2.16717794e-14*temperature**4, 3.78245636 + -0.00299673416*temperature + 9.84730201e-06*temperature**2 + -9.68129509e-09*temperature**3 + 3.24372837e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.56942078 + -8.59741137e-05*temperature + 4.19484589e-08*temperature**2 + -1.00177799e-11*temperature**3 + 1.22833691e-15*temperature**4, 3.1682671 + -0.00327931884*temperature + 6.64306396e-06*temperature**2 + -6.12806624e-09*temperature**3 + 2.11265971e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.03399249 + 0.00217691804*temperature + -1.64072518e-07*temperature**2 + -9.7041987e-11*temperature**3 + 1.68200992e-14*temperature**4, 4.19864056 + -0.0020364341*temperature + 6.52040211e-06*temperature**2 + -5.48797062e-09*temperature**3 + 1.77197817e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.71518561 + 0.00206252743*temperature + -9.98825771e-07*temperature**2 + 2.30053008e-10*temperature**3 + -2.03647716e-14*temperature**4, 3.57953347 + -0.00061035368*temperature + 1.01681433e-06*temperature**2 + 9.07005884e-10*temperature**3 + -9.04424499e-13*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.85746029 + 0.00441437026*temperature + -2.21481404e-06*temperature**2 + 5.23490188e-10*temperature**3 + -4.72084164e-14*temperature**4, 2.35677352 + 0.00898459677*temperature + -7.12356269e-06*temperature**2 + 2.45919022e-09*temperature**3 + -1.43699548e-13*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.86472886 + 0.00105650448*temperature + -2.59082758e-07*temperature**2 + 3.05218674e-11*temperature**3 + -1.33195876e-15*temperature**4, 4.12530561 + -0.00322544939*temperature + 6.52764691e-06*temperature**2 + -5.79853643e-09*temperature**3 + 2.06237379e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.77217438 + 0.00495695526*temperature + -2.48445613e-06*temperature**2 + 5.89161778e-10*temperature**3 + -5.33508711e-14*temperature**4, 4.22118584 + -0.00324392532*temperature + 1.37799446e-05*temperature**2 + -1.33144093e-08*temperature**3 + 4.33768865e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.0172109 + 0.00223982013*temperature + -6.3365815e-07*temperature**2 + 1.1424637e-10*temperature**3 + -1.07908535e-14*temperature**4, 4.30179801 + -0.00474912051*temperature + 2.11582891e-05*temperature**2 + -2.42763894e-08*temperature**3 + 9.29225124e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.16500285 + 0.00490831694*temperature + -1.90139225e-06*temperature**2 + 3.71185986e-10*temperature**3 + -2.87908305e-14*temperature**4, 4.27611269 + -0.000542822417*temperature + 1.67335701e-05*temperature**2 + -2.15770813e-08*temperature**3 + 8.62454363e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.016724 + 0.0103302292*temperature + -4.68082349e-06*temperature**2 + 1.01763288e-09*temperature**3 + -8.62607041e-14*temperature**4, 3.21246645 + 0.00151479162*temperature + 2.59209412e-05*temperature**2 + -3.57657847e-08*temperature**3 + 1.47150873e-11*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.14756964 + 0.00596166664*temperature + -2.37294852e-06*temperature**2 + 4.67412171e-10*temperature**3 + -3.61235213e-14*temperature**4, 0.808681094 + 0.0233615629*temperature + -3.55171815e-05*temperature**2 + 2.80152437e-08*temperature**3 + -8.50072974e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 0.074851495 + 0.0133909467*temperature + -5.73285809e-06*temperature**2 + 1.22292535e-09*temperature**3 + -1.0181523e-13*temperature**4, 5.14987613 + -0.0136709788*temperature + 4.91800599e-05*temperature**2 + -4.84743026e-08*temperature**3 + 1.66693956e-11*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.28571772 + 0.00723990037*temperature + -2.98714348e-06*temperature**2 + 5.95684644e-10*temperature**3 + -4.67154394e-14*temperature**4, 3.6735904 + 0.00201095175*temperature + 5.73021856e-06*temperature**2 + -6.87117425e-09*temperature**3 + 2.54385734e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.87410113 + 0.00365639292*temperature + -1.40894597e-06*temperature**2 + 2.60179549e-10*temperature**3 + -1.87727567e-14*temperature**4, 3.76267867 + 0.000968872143*temperature + 2.79489841e-06*temperature**2 + -3.85091153e-09*temperature**3 + 1.68741719e-12*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 1.76069008 + 0.00920000082*temperature + -4.42258813e-06*temperature**2 + 1.00641212e-09*temperature**3 + -8.8385564e-14*temperature**4, 4.79372315 + -0.00990833369*temperature + 3.73220008e-05*temperature**2 + -3.79285261e-08*temperature**3 + 1.31772652e-11*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 5.1662006 + 0.010847826*temperature + -4.4658368e-06*temperature**2 + 8.0628548e-10*temperature**3 + -4.8410193e-14*temperature**4, 1.0134001 + 0.022681467*temperature + -1.5733944e-05*temperature**2 + 4.0491503e-09*temperature**3 + 2.9599012e-13*temperature**4),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.92664 + 0.0014879768*temperature + -5.68476e-07*temperature**2 + 1.0097038e-10*temperature**3 + -6.753351e-15*temperature**4, 3.298677 + 0.0014082404*temperature + -3.963222e-06*temperature**2 + 5.641515e-09*temperature**3 + -2.444854e-12*temperature**4),
            ])

    def get_species_enthalpies_rt(self, temperature):
        return self._pyro_make_array([
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.03611116 + 0.00732270755*temperature + -2.2369263833333335e-06*temperature**2 + 3.680573075e-10*temperature**3 + -2.51412122e-14*temperature**4 + 4939.88614 / temperature, 3.95920148 + -0.003785261235*temperature + 1.9033009733333333e-05*temperature**2 + -1.7289718825e-08*temperature**3 + 5.3976874600000004e-12*temperature**4 + 5089.77593 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.3372792 + -2.470123655e-05*temperature + 1.6648559266666665e-07*temperature**2 + -4.48915985e-11*temperature**3 + 4.00510752e-15*temperature**4 + -950.158922 / temperature, 2.34433112 + 0.003990260375*temperature + -6.4927169999999995e-06*temperature**2 + 5.03930235e-09*temperature**3 + -1.4752235220000002e-12*temperature**4 + -917.935173 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.50000001 + -1.154214865e-11*temperature + 5.385398266666667e-15*temperature**2 + -1.1837880875e-18*temperature**3 + 9.96394714e-23*temperature**4 + 25473.6599 / temperature, 2.5 + 3.526664095e-13*temperature + -6.653065466666667e-16*temperature**2 + 5.7520408e-19*temperature**3 + -1.855464664e-22*temperature**4 + 25473.6599 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.28253784 + 0.00074154377*temperature + -2.526555563333333e-07*temperature**2 + 5.236763875e-11*temperature**3 + -4.33435588e-15*temperature**4 + -1088.45772 / temperature, 3.78245636 + -0.00149836708*temperature + 3.282434003333333e-06*temperature**2 + -2.4203237725e-09*temperature**3 + 6.48745674e-13*temperature**4 + -1063.94356 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.56942078 + -4.298705685e-05*temperature + 1.3982819633333334e-08*temperature**2 + -2.504444975e-12*temperature**3 + 2.4566738199999997e-16*temperature**4 + 29217.5791 / temperature, 3.1682671 + -0.00163965942*temperature + 2.2143546533333334e-06*temperature**2 + -1.53201656e-09*temperature**3 + 4.22531942e-13*temperature**4 + 29122.2592 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.03399249 + 0.00108845902*temperature + -5.469083933333333e-08*temperature**2 + -2.426049675e-11*temperature**3 + 3.36401984e-15*temperature**4 + -30004.2971 / temperature, 4.19864056 + -0.00101821705*temperature + 2.17346737e-06*temperature**2 + -1.371992655e-09*temperature**3 + 3.54395634e-13*temperature**4 + -30293.7267 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.71518561 + 0.001031263715*temperature + -3.329419236666667e-07*temperature**2 + 5.7513252e-11*temperature**3 + -4.07295432e-15*temperature**4 + -14151.8724 / temperature, 3.57953347 + -0.00030517684*temperature + 3.3893811e-07*temperature**2 + 2.26751471e-10*temperature**3 + -1.808848998e-13*temperature**4 + -14344.086 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.85746029 + 0.00220718513*temperature + -7.382713466666667e-07*temperature**2 + 1.30872547e-10*temperature**3 + -9.44168328e-15*temperature**4 + -48759.166 / temperature, 2.35677352 + 0.004492298385*temperature + -2.3745208966666665e-06*temperature**2 + 6.14797555e-10*temperature**3 + -2.8739909599999997e-14*temperature**4 + -48371.9697 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.86472886 + 0.00052825224*temperature + -8.636091933333334e-08*temperature**2 + 7.63046685e-12*temperature**3 + -2.66391752e-16*temperature**4 + 3718.85774 / temperature, 4.12530561 + -0.001612724695*temperature + 2.1758823033333334e-06*temperature**2 + -1.4496341075e-09*temperature**3 + 4.1247475799999997e-13*temperature**4 + 3381.53812 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.77217438 + 0.00247847763*temperature + -8.281520433333334e-07*temperature**2 + 1.472904445e-10*temperature**3 + -1.067017422e-14*temperature**4 + 4011.91815 / temperature, 4.22118584 + -0.00162196266*temperature + 4.593314866666667e-06*temperature**2 + -3.328602325e-09*temperature**3 + 8.6753773e-13*temperature**4 + 3839.56496 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.0172109 + 0.001119910065*temperature + -2.1121938333333332e-07*temperature**2 + 2.85615925e-11*temperature**3 + -2.1581707e-15*temperature**4 + 111.856713 / temperature, 4.30179801 + -0.002374560255*temperature + 7.0527630333333326e-06*temperature**2 + -6.06909735e-09*temperature**3 + 1.8584502480000002e-12*temperature**4 + 294.80804 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.16500285 + 0.00245415847*temperature + -6.337974166666666e-07*temperature**2 + 9.27964965e-11*temperature**3 + -5.7581661e-15*temperature**4 + -17861.7877 / temperature, 4.27611269 + -0.0002714112085*temperature + 5.5778567000000005e-06*temperature**2 + -5.394270325e-09*temperature**3 + 1.724908726e-12*temperature**4 + -17702.5821 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.016724 + 0.0051651146*temperature + -1.5602744966666665e-06*temperature**2 + 2.5440822e-10*temperature**3 + -1.725214082e-14*temperature**4 + 34612.8739 / temperature, 3.21246645 + 0.00075739581*temperature + 8.640313733333333e-06*temperature**2 + -8.941446175e-09*temperature**3 + 2.94301746e-12*temperature**4 + 34859.8468 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.14756964 + 0.00298083332*temperature + -7.9098284e-07*temperature**2 + 1.1685304275e-10*temperature**3 + -7.22470426e-15*temperature**4 + 25935.9992 / temperature, 0.808681094 + 0.01168078145*temperature + -1.18390605e-05*temperature**2 + 7.003810925e-09*temperature**3 + -1.700145948e-12*temperature**4 + 26428.9807 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 0.074851495 + 0.00669547335*temperature + -1.9109526966666665e-06*temperature**2 + 3.057313375e-10*temperature**3 + -2.0363046000000002e-14*temperature**4 + -9468.34459 / temperature, 5.14987613 + -0.0068354894*temperature + 1.63933533e-05*temperature**2 + -1.211857565e-08*temperature**3 + 3.33387912e-12*temperature**4 + -10246.6476 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.28571772 + 0.003619950185*temperature + -9.957144933333333e-07*temperature**2 + 1.48921161e-10*temperature**3 + -9.34308788e-15*temperature**4 + 16775.5843 / temperature, 3.6735904 + 0.001005475875*temperature + 1.9100728533333335e-06*temperature**2 + -1.7177935625e-09*temperature**3 + 5.08771468e-13*temperature**4 + 16444.9988 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.87410113 + 0.00182819646*temperature + -4.6964865666666667e-07*temperature**2 + 6.504488725e-11*temperature**3 + -3.75455134e-15*temperature**4 + 46263.604 / temperature, 3.76267867 + 0.0004844360715*temperature + 9.316328033333334e-07*temperature**2 + -9.627278825e-10*temperature**3 + 3.37483438e-13*temperature**4 + 46004.0401 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 1.76069008 + 0.00460000041*temperature + -1.4741960433333332e-06*temperature**2 + 2.5160303e-10*temperature**3 + -1.7677112800000002e-14*temperature**4 + -13995.8323 / temperature, 4.79372315 + -0.004954166845*temperature + 1.2440666933333332e-05*temperature**2 + -9.482131525e-09*temperature**3 + 2.63545304e-12*temperature**4 + -14308.9567 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 5.1662006 + 0.005423913*temperature + -1.4886122666666667e-06*temperature**2 + 2.0157137e-10*temperature**3 + -9.6820386e-15*temperature**4 + -731.99347 / temperature, 1.0134001 + 0.0113407335*temperature + -5.244647999999999e-06*temperature**2 + 1.012287575e-09*temperature**3 + 5.9198024e-14*temperature**4 + 380.42853 / temperature),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.92664 + 0.0007439884*temperature + -1.8949200000000001e-07*temperature**2 + 2.5242595e-11*temperature**3 + -1.3506701999999999e-15*temperature**4 + -922.7977 / temperature, 3.298677 + 0.0007041202*temperature + -1.3210739999999999e-06*temperature**2 + 1.41037875e-09*temperature**3 + -4.889707999999999e-13*temperature**4 + -1020.8999 / temperature),
            ])

    def get_species_entropies_r(self, pressure, temperature):
        return self._pyro_make_array([
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.03611116*self.usr_np.log(temperature) + 0.0146454151*temperature + -3.355389575e-06*temperature**2 + 4.907430766666667e-10*temperature**3 + -3.142651525e-14*temperature**4 + 10.3053693, 3.95920148*self.usr_np.log(temperature) + -0.00757052247*temperature + 2.85495146e-05*temperature**2 + -2.3052958433333332e-08*temperature**3 + 6.747109325e-12*temperature**4 + 4.09733096)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.3372792*self.usr_np.log(temperature) + -4.94024731e-05*temperature + 2.49728389e-07*temperature**2 + -5.985546466666667e-11*temperature**3 + 5.0063844e-15*temperature**4 + -3.20502331, 2.34433112*self.usr_np.log(temperature) + 0.00798052075*temperature + -9.7390755e-06*temperature**2 + 6.7190698e-09*temperature**3 + -1.8440294025e-12*temperature**4 + 0.683010238)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.50000001*self.usr_np.log(temperature) + -2.30842973e-11*temperature + 8.0780974e-15*temperature**2 + -1.5783841166666668e-18*temperature**3 + 1.2454933925e-22*temperature**4 + -0.446682914, 2.5*self.usr_np.log(temperature) + 7.05332819e-13*temperature + -9.9795982e-16*temperature**2 + 7.669387733333333e-19*temperature**3 + -2.31933083e-22*temperature**4 + -0.446682853)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.28253784*self.usr_np.log(temperature) + 0.00148308754*temperature + -3.789833345e-07*temperature**2 + 6.982351833333333e-11*temperature**3 + -5.41794485e-15*temperature**4 + 5.45323129, 3.78245636*self.usr_np.log(temperature) + -0.00299673416*temperature + 4.923651005e-06*temperature**2 + -3.2270983633333334e-09*temperature**3 + 8.109320925e-13*temperature**4 + 3.65767573)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.56942078*self.usr_np.log(temperature) + -8.59741137e-05*temperature + 2.097422945e-08*temperature**2 + -3.3392599666666663e-12*temperature**3 + 3.070842275e-16*temperature**4 + 4.78433864, 3.1682671*self.usr_np.log(temperature) + -0.00327931884*temperature + 3.32153198e-06*temperature**2 + -2.0426887466666666e-09*temperature**3 + 5.281649275e-13*temperature**4 + 2.05193346)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.03399249*self.usr_np.log(temperature) + 0.00217691804*temperature + -8.2036259e-08*temperature**2 + -3.2347329e-11*temperature**3 + 4.2050248e-15*temperature**4 + 4.9667701, 4.19864056*self.usr_np.log(temperature) + -0.0020364341*temperature + 3.260201055e-06*temperature**2 + -1.82932354e-09*temperature**3 + 4.429945425e-13*temperature**4 + -0.849032208)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.71518561*self.usr_np.log(temperature) + 0.00206252743*temperature + -4.994128855e-07*temperature**2 + 7.6684336e-11*temperature**3 + -5.0911929e-15*temperature**4 + 7.81868772, 3.57953347*self.usr_np.log(temperature) + -0.00061035368*temperature + 5.08407165e-07*temperature**2 + 3.023352946666667e-10*temperature**3 + -2.2610612475e-13*temperature**4 + 3.50840928)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.85746029*self.usr_np.log(temperature) + 0.00441437026*temperature + -1.10740702e-06*temperature**2 + 1.7449672933333335e-10*temperature**3 + -1.18021041e-14*temperature**4 + 2.27163806, 2.35677352*self.usr_np.log(temperature) + 0.00898459677*temperature + -3.561781345e-06*temperature**2 + 8.197300733333333e-10*temperature**3 + -3.5924887e-14*temperature**4 + 9.90105222)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.86472886*self.usr_np.log(temperature) + 0.00105650448*temperature + -1.29541379e-07*temperature**2 + 1.01739558e-11*temperature**3 + -3.3298969e-16*temperature**4 + 5.70164073, 4.12530561*self.usr_np.log(temperature) + -0.00322544939*temperature + 3.263823455e-06*temperature**2 + -1.9328454766666666e-09*temperature**3 + 5.155934475e-13*temperature**4 + -0.69043296)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.77217438*self.usr_np.log(temperature) + 0.00495695526*temperature + -1.242228065e-06*temperature**2 + 1.9638725933333335e-10*temperature**3 + -1.3337717775e-14*temperature**4 + 9.79834492, 4.22118584*self.usr_np.log(temperature) + -0.00324392532*temperature + 6.8899723e-06*temperature**2 + -4.438136433333333e-09*temperature**3 + 1.0844221625e-12*temperature**4 + 3.39437243)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.0172109*self.usr_np.log(temperature) + 0.00223982013*temperature + -3.16829075e-07*temperature**2 + 3.808212333333334e-11*temperature**3 + -2.697713375e-15*temperature**4 + 3.78510215, 4.30179801*self.usr_np.log(temperature) + -0.00474912051*temperature + 1.057914455e-05*temperature**2 + -8.0921298e-09*temperature**3 + 2.32306281e-12*temperature**4 + 3.71666245)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.16500285*self.usr_np.log(temperature) + 0.00490831694*temperature + -9.50696125e-07*temperature**2 + 1.2372866199999999e-10*temperature**3 + -7.197707625e-15*temperature**4 + 2.91615662, 4.27611269*self.usr_np.log(temperature) + -0.000542822417*temperature + 8.36678505e-06*temperature**2 + -7.192360433333333e-09*temperature**3 + 2.1561359075e-12*temperature**4 + 3.43505074)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 3.016724*self.usr_np.log(temperature) + 0.0103302292*temperature + -2.340411745e-06*temperature**2 + 3.3921096e-10*temperature**3 + -2.1565176025e-14*temperature**4 + 7.78732378, 3.21246645*self.usr_np.log(temperature) + 0.00151479162*temperature + 1.29604706e-05*temperature**2 + -1.1921928233333333e-08*temperature**3 + 3.678771825e-12*temperature**4 + 8.51054025)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 4.14756964*self.usr_np.log(temperature) + 0.00596166664*temperature + -1.18647426e-06*temperature**2 + 1.55804057e-10*temperature**3 + -9.030880325e-15*temperature**4 + -1.23028121, 0.808681094*self.usr_np.log(temperature) + 0.0233615629*temperature + -1.775859075e-05*temperature**2 + 9.338414566666667e-09*temperature**3 + -2.125182435e-12*temperature**4 + 13.9397051)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 0.074851495*self.usr_np.log(temperature) + 0.0133909467*temperature + -2.866429045e-06*temperature**2 + 4.076417833333333e-10*temperature**3 + -2.54538075e-14*temperature**4 + 18.437318, 5.14987613*self.usr_np.log(temperature) + -0.0136709788*temperature + 2.459002995e-05*temperature**2 + -1.6158100866666668e-08*temperature**3 + 4.1673489e-12*temperature**4 + -4.64130376)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.28571772*self.usr_np.log(temperature) + 0.00723990037*temperature + -1.49357174e-06*temperature**2 + 1.98561548e-10*temperature**3 + -1.167885985e-14*temperature**4 + 8.48007179, 3.6735904*self.usr_np.log(temperature) + 0.00201095175*temperature + 2.86510928e-06*temperature**2 + -2.2903914166666666e-09*temperature**3 + 6.35964335e-13*temperature**4 + 1.60456433)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.87410113*self.usr_np.log(temperature) + 0.00365639292*temperature + -7.04472985e-07*temperature**2 + 8.672651633333333e-11*temperature**3 + -4.693189175e-15*temperature**4 + 6.17119324, 3.76267867*self.usr_np.log(temperature) + 0.000968872143*temperature + 1.397449205e-06*temperature**2 + -1.2836371766666668e-09*temperature**3 + 4.218542975e-13*temperature**4 + 1.56253185)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 1.76069008*self.usr_np.log(temperature) + 0.00920000082*temperature + -2.211294065e-06*temperature**2 + 3.3547070666666664e-10*temperature**3 + -2.2096391e-14*temperature**4 + 13.656323, 4.79372315*self.usr_np.log(temperature) + -0.00990833369*temperature + 1.86610004e-05*temperature**2 + -1.2642842033333333e-08*temperature**3 + 3.2943163e-12*temperature**4 + 0.6028129)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 5.1662006*self.usr_np.log(temperature) + 0.010847826*temperature + -2.2329184e-06*temperature**2 + 2.687618266666667e-10*temperature**3 + -1.210254825e-14*temperature**4 + -1.9633361, 1.0134001*self.usr_np.log(temperature) + 0.022681467*temperature + -7.866972e-06*temperature**2 + 1.3497167666666667e-09*temperature**3 + 7.399753e-14*temperature**4 + 19.356552)
            - self.usr_np.log(pressure/self.one_atm),
            self.usr_np.where(self.usr_np.greater(temperature, 1000.0), 2.92664*self.usr_np.log(temperature) + 0.0014879768*temperature + -2.84238e-07*temperature**2 + 3.3656793333333334e-11*temperature**3 + -1.68833775e-15*temperature**4 + 5.980528, 3.298677*self.usr_np.log(temperature) + 0.0014082404*temperature + -1.981611e-06*temperature**2 + 1.8805050000000002e-09*temperature**3 + -6.112135e-13*temperature**4 + 3.950372)
            - self.usr_np.log(pressure/self.one_atm),
            ])

    def get_species_gibbs_rt(self, pressure, temperature):
        h0_rt = self.get_species_enthalpies_rt(temperature)
        s0_r = self.get_species_entropies_r(pressure, temperature)
        return h0_rt - s0_r

    def get_equilibrium_constants(self, pressure, temperature):
        rt = self.gas_constant * temperature
        c0 = self.usr_np.log(pressure / rt)

        g0_rt = self.get_species_gibbs_rt(pressure, temperature)
        return self._pyro_make_array([
            g0_rt[4] + g0_rt[8] + -1*(g0_rt[2] + g0_rt[3]),
            g0_rt[2] + g0_rt[8] + -1*(g0_rt[1] + g0_rt[4]),
            g0_rt[2] + g0_rt[5] + -1*(g0_rt[1] + g0_rt[8]),
            g0_rt[5] + g0_rt[4] + -1*2.0*g0_rt[8],
            g0_rt[5] + -1*(g0_rt[2] + g0_rt[8]) + -1*-1.0*c0,
            g0_rt[8] + -1*(g0_rt[2] + g0_rt[4]) + -1*-1.0*c0,
            g0_rt[3] + -1*2.0*g0_rt[4] + -1*-1.0*c0,
            g0_rt[10] + -1*(g0_rt[2] + g0_rt[3]) + -1*-1.0*c0,
            g0_rt[10] + -1*(g0_rt[2] + g0_rt[3]) + -1*-1.0*c0,
            g0_rt[10] + -1*(g0_rt[2] + g0_rt[3]) + -1*-1.0*c0,
            g0_rt[10] + -1*(g0_rt[2] + g0_rt[3]) + -1*-1.0*c0,
            g0_rt[2] + g0_rt[10] + -1*(g0_rt[1] + g0_rt[3]),
            g0_rt[5] + g0_rt[4] + -1*(g0_rt[2] + g0_rt[10]),
            2.0*g0_rt[8] + -1*(g0_rt[2] + g0_rt[10]),
            g0_rt[3] + g0_rt[8] + -1*(g0_rt[10] + g0_rt[4]),
            g0_rt[5] + g0_rt[3] + -1*(g0_rt[10] + g0_rt[8]),
            g0_rt[7] + g0_rt[8] + -1*(g0_rt[6] + g0_rt[10]),
            g0_rt[7] + g0_rt[2] + -1*(g0_rt[6] + g0_rt[8]),
            g0_rt[7] + g0_rt[4] + -1*(g0_rt[6] + g0_rt[3]),
            g0_rt[7] + -1*(g0_rt[6] + g0_rt[4]) + -1*-1.0*c0,
            g0_rt[6] + g0_rt[1] + -1*(g0_rt[2] + g0_rt[9]),
            g0_rt[6] + g0_rt[8] + -1*(g0_rt[9] + g0_rt[4]),
            g0_rt[7] + g0_rt[2] + -1*(g0_rt[9] + g0_rt[4]),
            g0_rt[6] + g0_rt[5] + -1*(g0_rt[9] + g0_rt[8]),
            g0_rt[6] + g0_rt[2] + -1*g0_rt[9] + -1*c0,
            g0_rt[6] + g0_rt[10] + -1*(g0_rt[9] + g0_rt[3]),
            g0_rt[15] + -1*(g0_rt[16] + g0_rt[2]) + -1*-1.0*c0,
            g0_rt[15] + g0_rt[2] + -1*(g0_rt[16] + g0_rt[1]),
            g0_rt[2] + g0_rt[9] + -1*(g0_rt[16] + g0_rt[4]),
            g0_rt[9] + g0_rt[8] + -1*(g0_rt[16] + g0_rt[3]),
            g0_rt[7] + 2.0*g0_rt[2] + -1*(g0_rt[16] + g0_rt[3]) + -1*c0,
            g0_rt[17] + g0_rt[2] + -1*(g0_rt[16] + g0_rt[8]),
            g0_rt[17] + g0_rt[8] + -1*(g0_rt[16] + g0_rt[10]),
            g0_rt[1] + g0_rt[9] + -1*(g0_rt[17] + g0_rt[2]),
            g0_rt[9] + g0_rt[8] + -1*(g0_rt[17] + g0_rt[4]),
            g0_rt[5] + g0_rt[9] + -1*(g0_rt[17] + g0_rt[8]),
            g0_rt[17] + g0_rt[2] + -1*(g0_rt[15] + g0_rt[4]),
            g0_rt[16] + g0_rt[5] + -1*(g0_rt[15] + g0_rt[8]),
            g0_rt[17] + g0_rt[8] + -1*(g0_rt[15] + g0_rt[3]),
            g0_rt[0] + g0_rt[2] + -1*(g0_rt[16] + g0_rt[15]),
            g0_rt[16] + g0_rt[6] + -1*(g0_rt[13] + g0_rt[4]),
            g0_rt[12] + g0_rt[6] + -1*(g0_rt[13] + g0_rt[9]),
            g0_rt[0] + -1*(g0_rt[12] + g0_rt[2]) + -1*-1.0*c0,
            g0_rt[13] + g0_rt[1] + -1*(g0_rt[12] + g0_rt[2]),
            g0_rt[13] + g0_rt[5] + -1*(g0_rt[12] + g0_rt[8]),
            g0_rt[13] + g0_rt[10] + -1*(g0_rt[12] + g0_rt[3]),
            g0_rt[17] + g0_rt[9] + -1*(g0_rt[12] + g0_rt[3]),
            g0_rt[18] + g0_rt[4] + -1*(g0_rt[12] + g0_rt[3]),
            g0_rt[18] + g0_rt[8] + -1*(g0_rt[12] + g0_rt[10]),
            g0_rt[15] + g0_rt[6] + -1*g0_rt[18] + -1*c0,
            g0_rt[15] + g0_rt[9] + -1*(g0_rt[18] + g0_rt[2]),
            g0_rt[17] + g0_rt[6] + g0_rt[8] + -1*(g0_rt[18] + g0_rt[3]) + -1*c0,
            g0_rt[12] + g0_rt[1] + -1*(g0_rt[0] + g0_rt[2]),
            g0_rt[12] + g0_rt[8] + -1*(g0_rt[0] + g0_rt[4]),
            g0_rt[16] + g0_rt[17] + -1*(g0_rt[0] + g0_rt[4]),
            g0_rt[12] + g0_rt[5] + -1*(g0_rt[0] + g0_rt[8]),
            g0_rt[12] + g0_rt[10] + -1*(g0_rt[0] + g0_rt[3]),
            g0_rt[11] + -1*2.0*g0_rt[8] + -1*-1.0*c0,
            g0_rt[11] + g0_rt[3] + -1*2.0*g0_rt[10],
            g0_rt[11] + g0_rt[3] + -1*2.0*g0_rt[10],
            g0_rt[1] + g0_rt[10] + -1*(g0_rt[2] + g0_rt[11]),
            g0_rt[5] + g0_rt[8] + -1*(g0_rt[2] + g0_rt[11]),
            g0_rt[10] + g0_rt[8] + -1*(g0_rt[11] + g0_rt[4]),
            g0_rt[5] + g0_rt[10] + -1*(g0_rt[11] + g0_rt[8]),
            g0_rt[5] + g0_rt[10] + -1*(g0_rt[11] + g0_rt[8]),
            g0_rt[11] + g0_rt[9] + -1*(g0_rt[17] + g0_rt[10]),
            g0_rt[14] + g0_rt[10] + -1*(g0_rt[15] + g0_rt[11]),
            g0_rt[0] + g0_rt[10] + -1*(g0_rt[12] + g0_rt[11]),
            g0_rt[14] + -1*(g0_rt[15] + g0_rt[2]) + -1*-1.0*c0,
            g0_rt[14] + g0_rt[3] + -1*(g0_rt[15] + g0_rt[10]),
            g0_rt[14] + g0_rt[6] + -1*(g0_rt[15] + g0_rt[9]),
            g0_rt[14] + g0_rt[9] + -1*(g0_rt[17] + g0_rt[15]),
            g0_rt[15] + g0_rt[1] + -1*(g0_rt[14] + g0_rt[2]),
            g0_rt[15] + g0_rt[8] + -1*(g0_rt[14] + g0_rt[4]),
            g0_rt[15] + g0_rt[5] + -1*(g0_rt[14] + g0_rt[8]),
            2.0*g0_rt[15] + -1*(g0_rt[16] + g0_rt[14]),
            g0_rt[13] + g0_rt[14] + -1*(g0_rt[12] + g0_rt[15]),
            g0_rt[12] + g0_rt[14] + -1*(g0_rt[0] + g0_rt[15]),
            ])

    def get_temperature(self, enthalpy_or_energy, t_guess, y, do_energy=False):
        if do_energy is False:
            pv_fun = self.get_mixture_specific_heat_cp_mass
            he_fun = self.get_mixture_enthalpy_mass
        else:
            pv_fun = self.get_mixture_specific_heat_cv_mass
            he_fun = self.get_mixture_internal_energy_mass

        num_iter = 5
        tol = 1.0e-6
        ones = self._pyro_zeros_like(enthalpy_or_energy) + 1.0
        t_i = t_guess * ones

        for _ in range(num_iter):
            f = enthalpy_or_energy - he_fun(t_i, y)
            j = -pv_fun(t_i, y)
            dt = -f / j
            t_i += dt
            if self._pyro_norm(dt, np.inf) < tol:
                return t_i

        raise RuntimeError("Temperature iteration failed to converge")

    def get_falloff_rates(self, temperature, concentrations):
        k_high = self._pyro_make_array([
            74000000000.00002*temperature**-0.37,
            self.usr_np.exp(30.172623109393093 + -0.63*self.usr_np.log(temperature) + -1*(192.7330813300273 / temperature)),
        ])

        k_low = self._pyro_make_array([
            self.usr_np.exp(28.46393023886365 + -0.9*self.usr_np.log(temperature) + -1*(-855.4732069479018 / temperature)),
            self.usr_np.exp(63.076845661346454 + -4.76*self.usr_np.log(temperature) + -1*(1227.8556617369884 / temperature)),
        ])

        reduced_pressure = self._pyro_make_array([
            (3.0*concentrations[13] + 3.0*concentrations[0] + 2.0*concentrations[14] + 1.5*concentrations[6] + 2.0*concentrations[7] + 2.0*concentrations[1] + 6.0*concentrations[5] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19])*k_low[0]/k_high[0],
            (3.0*concentrations[13] + 3.0*concentrations[0] + 2.0*concentrations[14] + 1.5*concentrations[6] + 2.0*concentrations[7] + 2.0*concentrations[1] + 6.0*concentrations[5] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19])*k_low[1]/k_high[1],
        ])

        falloff_center = self._pyro_make_array([
            self.usr_np.log10(0.26539999999999997*self.usr_np.exp((-1*temperature) / 94.0) + 0.7346*self.usr_np.exp((-1*temperature) / 1756.0) + self.usr_np.exp(-5182.0 / temperature)),
            self.usr_np.log10(0.21699999999999997*self.usr_np.exp((-1*temperature) / 74.0) + 0.783*self.usr_np.exp((-1*temperature) / 2941.0) + self.usr_np.exp(-6964.0 / temperature)),
        ])

        falloff_function = self._pyro_make_array([
            10**(falloff_center[0] / (1 + ((self.usr_np.log10(reduced_pressure[0]) + -0.4 + -1*0.67*falloff_center[0]) / (0.75 + -1*1.27*falloff_center[0] + -1*0.14*(self.usr_np.log10(reduced_pressure[0]) + -0.4 + -1*0.67*falloff_center[0])))**2)),
            10**(falloff_center[1] / (1 + ((self.usr_np.log10(reduced_pressure[1]) + -0.4 + -1*0.67*falloff_center[1]) / (0.75 + -1*1.27*falloff_center[1] + -1*0.14*(self.usr_np.log10(reduced_pressure[1]) + -0.4 + -1*0.67*falloff_center[1])))**2)),
        ])*reduced_pressure/(1+reduced_pressure)

        return k_high*falloff_function

    def get_fwd_rate_coefficients(self, temperature, concentrations):
        ones = self._pyro_zeros_like(temperature) + 1.0
        k_falloff = self.get_falloff_rates(temperature, concentrations)
        k_fwd = [
            self.usr_np.exp(30.905899130912033 + -0.6707*self.usr_np.log(temperature) + -1*(8575.364070352467 / temperature)) * ones,
            self.usr_np.exp(3.8262472284067424 + 2.7*self.usr_np.log(temperature) + -1*(3150.1542797022735 / temperature)) * ones,
            self.usr_np.exp(12.063356343328579 + 1.51*self.usr_np.log(temperature) + -1*(1726.0429999007665 / temperature)) * ones,
            self.usr_np.exp(3.682106569826508 + 2.4*self.usr_np.log(temperature) + -1*(-1061.7932156823956 / temperature)) * ones,
            4.400000000000001e+16*temperature**-2.0 * ones,
            9428000000000.002*temperature**-1.0 * ones,
            120000000000.00002*temperature**-1.0 * ones,
            2800000000000.0005*temperature**-0.86 * ones,
            300000000000000.06*temperature**-1.72 * ones,
            16520000000000.004*temperature**-0.76 * ones,
            26000000000000.004*temperature**-1.24 * ones,
            self.usr_np.exp(6.382830730836645 + 2.433*self.usr_np.log(temperature) + -1*(26923.251481250965 / temperature)) * ones,
            self.usr_np.exp(22.10203193164551 + -1*(337.66030697767184 / temperature)) * ones,
            self.usr_np.exp(25.03875194781205 + -1*(148.4497623821359 / temperature)) * ones,
            40000000000.00001 * ones,
            self.usr_np.exp(24.56056529617862 + -1*(-251.60976674938286 / temperature)) * ones,
            self.usr_np.exp(24.12779100870124 + -1*(11574.049270471613 / temperature)) * ones,
            self.usr_np.exp(10.770588040219511 + 1.228*self.usr_np.log(temperature) + -1*(35.2253673449136 / temperature)) * ones,
            self.usr_np.exp(20.8357012662762 + -1*(24003.571747891125 / temperature)) * ones,
            self.usr_np.exp(9.519294579703503 + -1*(1199.6753678610576 / temperature)) * ones,
            73400000000.00002 * ones,
            30000000000.000004 * ones,
            30000000000.000004 * ones,
            50000000000.00001 * ones,
            self.usr_np.exp(32.86212973278313 + -1.0*self.usr_np.log(temperature) + -1*(8554.732069479018 / temperature)) * ones,
            self.usr_np.exp(22.751414084238696 + -1*(201.2878133995063 / temperature)) * ones,
            25000000000.000004*temperature**-0.8 * ones,
            self.usr_np.exp(6.214608098422191 + 2.0*self.usr_np.log(temperature) + -1*(3638.277227196076 / temperature)) * ones,
            80000000000.00002 * ones,
            self.usr_np.exp(23.080339115224525 + -1*(754.8293002481486 / temperature)) * ones,
            self.usr_np.exp(21.694044754104635 + -1*(754.8293002481486 / temperature)) * ones,
            20000000000.000004 * ones,
            20000000000.000004 * ones,
            self.usr_np.exp(16.951004773893423 + 1.05*self.usr_np.log(temperature) + -1*(1648.0439722084577 / temperature)) * ones,
            self.usr_np.exp(24.386827483076058 + -1*(1781.3971485856307 / temperature)) * ones,
            self.usr_np.exp(15.048070819142122 + 1.18*self.usr_np.log(temperature) + -1*(-224.9391314739483 / temperature)) * ones,
            84300000000.00002 * ones,
            self.usr_np.exp(10.933106969717286 + 1.6*self.usr_np.log(temperature) + -1*(2727.4498715633104 / temperature)) * ones,
            self.usr_np.exp(17.399029496420383 + -1*(4498.782629478966 / temperature)) * ones,
            40000000000.00001 * ones,
            self.usr_np.exp(8.313852267398207 + 2.0*self.usr_np.log(temperature) + -1*(956.117113647655 / temperature)) * ones,
            self.usr_np.exp(9.210340371976182 + 2.0*self.usr_np.log(temperature) + -1*(3019.3172009925943 / temperature)) * ones,
            self.usr_np.exp(15.620515253942349 + 0.27*self.usr_np.log(temperature) + -1*(140.9014693796544 / temperature)) * ones,
            30000000000.000004 * ones,
            30110000000.000004 * ones,
            self.usr_np.exp(7.200424892944957 + 1.61*self.usr_np.log(temperature) + -1*(-192.93436914342678 / temperature)) * ones,
            self.usr_np.exp(31.459662512417644 + -1.39*self.usr_np.log(temperature) + -1*(508.2517288337534 / temperature)) * ones,
            self.usr_np.exp(19.519293032620475 + 0.29*self.usr_np.log(temperature) + -1*(5.5354148684864235 / temperature)) * ones,
            10000000000.000002 * ones,
            self.usr_np.exp(96.46011254645141 + -9.147*self.usr_np.log(temperature) + -1*(23600.996121092114 / temperature)) * ones,
            90000000000.00002 * ones,
            18000000.000000004 * ones,
            self.usr_np.exp(10.833681189579274 + 1.93*self.usr_np.log(temperature) + -1*(6516.692958809016 / temperature)) * ones,
            self.usr_np.exp(9.622450022803015 + 1.91*self.usr_np.log(temperature) + -1*(1882.041055285384 / temperature)) * ones,
            self.usr_np.exp(5.950642552587727 + 1.83*self.usr_np.log(temperature) + -1*(110.70829736972846 / temperature)) * ones,
            self.usr_np.exp(8.1886891244442 + 2.0*self.usr_np.log(temperature) + -1*(1258.0488337469144 / temperature)) * ones,
            self.usr_np.exp(24.46568605798838 + -1*(30595.74763672496 / temperature)) * ones,
            k_falloff[0]*ones,
            self.usr_np.exp(18.683045008419857 + -1*(-820.2478396029882 / temperature)) * ones,
            self.usr_np.exp(26.763520548223823 + -1*(6038.634401985189 / temperature)) * ones,
            self.usr_np.exp(9.400960731584833 + 2.0*self.usr_np.log(temperature) + -1*(2616.741574193582 / temperature)) * ones,
            self.usr_np.exp(23.025850929940457 + -1*(1811.5903205955567 / temperature)) * ones,
            self.usr_np.exp(9.172638504792172 + 2.0*self.usr_np.log(temperature) + -1*(2012.8781339950629 / temperature)) * ones,
            self.usr_np.exp(21.282881624881835 + -1*(161.03025071960505 / temperature)) * ones,
            self.usr_np.exp(27.086293940486875 + -1*(4810.778740248201 / temperature)) * ones,
            self.usr_np.exp(20.72326583694641 + -1*(4025.7562679901257 / temperature)) * ones,
            self.usr_np.exp(3.1986731175506815 + 2.47*self.usr_np.log(temperature) + -1*(2606.6771835236063 / temperature)) * ones,
            self.usr_np.exp(16.308716010566968 + -1*(-299.9188419652644 / temperature)) * ones,
            k_falloff[1]*ones,
            1000000000.0000001 * ones,
            8480000000.000002 * ones,
            self.usr_np.exp(1.1999647829283973 + 2.81*self.usr_np.log(temperature) + -1*(2948.866466302767 / temperature)) * ones,
            self.usr_np.exp(13.399995114002609 + 1.62*self.usr_np.log(temperature) + -1*(5454.899743126621 / temperature)) * ones,
            self.usr_np.exp(13.835313185260453 + 1.5*self.usr_np.log(temperature) + -1*(4327.687988089386 / temperature)) * ones,
            self.usr_np.exp(11.512925464970229 + 1.6*self.usr_np.log(temperature) + -1*(1570.0449445161491 / temperature)) * ones,
            self.usr_np.exp(7.807916628926408 + 2.0*self.usr_np.log(temperature) + -1*(4161.6255420347925 / temperature)) * ones,
            392000000.00000006 * ones,
            self.usr_np.exp(5.424950017481403 + 2.0*self.usr_np.log(temperature) + -1*(4629.619708188645 / temperature)) * ones,
        ]
        return self._pyro_make_array(k_fwd)

    def get_rev_rate_coefficients(self, pressure, temperature, concentrations):
        k_fwd = self.get_fwd_rate_coefficients(temperature, concentrations)
        log_k_eq = self.get_equilibrium_constants(pressure, temperature)
        return self._pyro_make_array(k_fwd * self.usr_np.exp(log_k_eq))

    def get_net_rates_of_progress(self, pressure, temperature, concentrations):
        k_fwd = self.get_fwd_rate_coefficients(temperature, concentrations)
        log_k_eq = self.get_equilibrium_constants(pressure, temperature)
        return self._pyro_make_array([
            k_fwd[0]*(concentrations[2]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[0])*concentrations[4]*concentrations[8]),
            k_fwd[1]*(concentrations[1]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[1])*concentrations[2]*concentrations[8]),
            k_fwd[2]*(concentrations[1]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[2])*concentrations[2]*concentrations[5]),
            k_fwd[3]*(concentrations[8]**2.0 + -1*self.usr_np.exp(log_k_eq[3])*concentrations[5]*concentrations[4]),
            k_fwd[4]*(concentrations[2]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[4])*concentrations[5])*(1.75*concentrations[6] + 3.6*concentrations[7] + 2.0*concentrations[1] + 6.3*concentrations[5] + concentrations[0] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[13] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[5]*(concentrations[2]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[5])*concentrations[8])*(1.75*concentrations[6] + 3.6*concentrations[7] + 2.0*concentrations[1] + 12.0*concentrations[5] + concentrations[0] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[13] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[6]*(concentrations[4]**2.0 + -1*self.usr_np.exp(log_k_eq[6])*concentrations[3])*(1.75*concentrations[6] + 3.6*concentrations[7] + 2.4*concentrations[1] + 15.4*concentrations[5] + concentrations[0] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[13] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[7]*(concentrations[2]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[7])*concentrations[10])*(3.0*concentrations[13] + 3.0*concentrations[12] + 3.0*concentrations[0] + 0.75*concentrations[6] + 1.5*concentrations[7] + concentrations[1] + concentrations[2] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18]),
            k_fwd[8]*(concentrations[2]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[8])*concentrations[10])*(concentrations[3]),
            k_fwd[9]*(concentrations[2]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[9])*concentrations[10])*(concentrations[5]),
            k_fwd[10]*(concentrations[2]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[10])*concentrations[10])*(concentrations[19]),
            k_fwd[11]*(concentrations[1]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[11])*concentrations[2]*concentrations[10]),
            k_fwd[12]*(concentrations[2]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[12])*concentrations[5]*concentrations[4]),
            k_fwd[13]*(concentrations[2]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[13])*concentrations[8]**2.0),
            k_fwd[14]*(concentrations[10]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[14])*concentrations[3]*concentrations[8]),
            k_fwd[15]*(concentrations[10]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[15])*concentrations[5]*concentrations[3]),
            k_fwd[16]*(concentrations[6]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[16])*concentrations[7]*concentrations[8]),
            k_fwd[17]*(concentrations[6]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[17])*concentrations[7]*concentrations[2]),
            k_fwd[18]*(concentrations[6]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[18])*concentrations[7]*concentrations[4]),
            k_fwd[19]*(concentrations[6]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[19])*concentrations[7])*(1.75*concentrations[6] + 3.6*concentrations[7] + 2.0*concentrations[1] + 12.0*concentrations[5] + concentrations[0] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[12] + concentrations[13] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[20]*(concentrations[2]*concentrations[9] + -1*self.usr_np.exp(log_k_eq[20])*concentrations[6]*concentrations[1]),
            k_fwd[21]*(concentrations[9]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[21])*concentrations[6]*concentrations[8]),
            k_fwd[22]*(concentrations[9]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[22])*concentrations[7]*concentrations[2]),
            k_fwd[23]*(concentrations[9]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[23])*concentrations[6]*concentrations[5]),
            k_fwd[24]*(concentrations[9] + -1*self.usr_np.exp(log_k_eq[24])*concentrations[6]*concentrations[2])*(3.0*concentrations[13] + 3.0*concentrations[12] + 3.0*concentrations[0] + 1.5*concentrations[6] + 2.0*concentrations[7] + 2.0*concentrations[1] + 6.0*concentrations[5] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[25]*(concentrations[9]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[25])*concentrations[6]*concentrations[10]),
            k_fwd[26]*(concentrations[16]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[26])*concentrations[15])*(3.0*concentrations[13] + 3.0*concentrations[12] + 3.0*concentrations[0] + 1.5*concentrations[6] + 2.0*concentrations[7] + 2.0*concentrations[1] + 6.0*concentrations[5] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[27]*(concentrations[16]*concentrations[1] + -1*self.usr_np.exp(log_k_eq[27])*concentrations[15]*concentrations[2]),
            k_fwd[28]*(concentrations[16]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[28])*concentrations[2]*concentrations[9]),
            k_fwd[29]*(concentrations[16]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[29])*concentrations[9]*concentrations[8]),
            k_fwd[30]*(concentrations[16]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[30])*concentrations[7]*concentrations[2]**2.0),
            k_fwd[31]*(concentrations[16]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[31])*concentrations[17]*concentrations[2]),
            k_fwd[32]*(concentrations[16]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[32])*concentrations[17]*concentrations[8]),
            k_fwd[33]*(concentrations[17]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[33])*concentrations[1]*concentrations[9]),
            k_fwd[34]*(concentrations[17]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[34])*concentrations[9]*concentrations[8]),
            k_fwd[35]*(concentrations[17]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[35])*concentrations[5]*concentrations[9]),
            k_fwd[36]*(concentrations[15]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[36])*concentrations[17]*concentrations[2]),
            k_fwd[37]*(concentrations[15]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[37])*concentrations[16]*concentrations[5]),
            k_fwd[38]*(concentrations[15]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[38])*concentrations[17]*concentrations[8]),
            k_fwd[39]*(concentrations[16]*concentrations[15] + -1*self.usr_np.exp(log_k_eq[39])*concentrations[0]*concentrations[2]),
            k_fwd[40]*(concentrations[13]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[40])*concentrations[16]*concentrations[6]),
            k_fwd[41]*(concentrations[13]*concentrations[9] + -1*self.usr_np.exp(log_k_eq[41])*concentrations[12]*concentrations[6]),
            k_fwd[42]*(concentrations[12]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[42])*concentrations[0])*(3.0*concentrations[13] + 3.0*concentrations[12] + 3.0*concentrations[0] + 1.5*concentrations[6] + 2.0*concentrations[7] + 2.0*concentrations[1] + 6.0*concentrations[5] + concentrations[2] + concentrations[3] + concentrations[4] + concentrations[8] + concentrations[9] + concentrations[10] + concentrations[11] + concentrations[14] + concentrations[15] + concentrations[16] + concentrations[17] + concentrations[18] + concentrations[19]),
            k_fwd[43]*(concentrations[12]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[43])*concentrations[13]*concentrations[1]),
            k_fwd[44]*(concentrations[12]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[44])*concentrations[13]*concentrations[5]),
            k_fwd[45]*(concentrations[12]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[45])*concentrations[13]*concentrations[10]),
            k_fwd[46]*(concentrations[12]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[46])*concentrations[17]*concentrations[9]),
            k_fwd[47]*(concentrations[12]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[47])*concentrations[18]*concentrations[4]),
            k_fwd[48]*(concentrations[12]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[48])*concentrations[18]*concentrations[8]),
            k_fwd[49]*(concentrations[18] + -1*self.usr_np.exp(log_k_eq[49])*concentrations[15]*concentrations[6]),
            k_fwd[50]*(concentrations[18]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[50])*concentrations[15]*concentrations[9]),
            k_fwd[51]*(concentrations[18]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[51])*concentrations[17]*concentrations[6]*concentrations[8]),
            k_fwd[52]*(concentrations[0]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[52])*concentrations[12]*concentrations[1]),
            k_fwd[53]*(concentrations[0]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[53])*concentrations[12]*concentrations[8]),
            k_fwd[54]*(concentrations[0]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[54])*concentrations[16]*concentrations[17]),
            k_fwd[55]*(concentrations[0]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[55])*concentrations[12]*concentrations[5]),
            k_fwd[56]*(concentrations[0]*concentrations[3] + -1*self.usr_np.exp(log_k_eq[56])*concentrations[12]*concentrations[10]),
            k_fwd[57]*(concentrations[8]**2.0 + -1*self.usr_np.exp(log_k_eq[57])*concentrations[11]),
            k_fwd[58]*(concentrations[10]**2.0 + -1*self.usr_np.exp(log_k_eq[58])*concentrations[11]*concentrations[3]),
            k_fwd[59]*(concentrations[10]**2.0 + -1*self.usr_np.exp(log_k_eq[59])*concentrations[11]*concentrations[3]),
            k_fwd[60]*(concentrations[2]*concentrations[11] + -1*self.usr_np.exp(log_k_eq[60])*concentrations[1]*concentrations[10]),
            k_fwd[61]*(concentrations[2]*concentrations[11] + -1*self.usr_np.exp(log_k_eq[61])*concentrations[5]*concentrations[8]),
            k_fwd[62]*(concentrations[11]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[62])*concentrations[10]*concentrations[8]),
            k_fwd[63]*(concentrations[11]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[63])*concentrations[5]*concentrations[10]),
            k_fwd[64]*(concentrations[11]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[64])*concentrations[5]*concentrations[10]),
            k_fwd[65]*(concentrations[17]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[65])*concentrations[11]*concentrations[9]),
            k_fwd[66]*(concentrations[15]*concentrations[11] + -1*self.usr_np.exp(log_k_eq[66])*concentrations[14]*concentrations[10]),
            k_fwd[67]*(concentrations[12]*concentrations[11] + -1*self.usr_np.exp(log_k_eq[67])*concentrations[0]*concentrations[10]),
            k_fwd[68]*(concentrations[15]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[68])*concentrations[14]),
            k_fwd[69]*(concentrations[15]*concentrations[10] + -1*self.usr_np.exp(log_k_eq[69])*concentrations[14]*concentrations[3]),
            k_fwd[70]*(concentrations[15]*concentrations[9] + -1*self.usr_np.exp(log_k_eq[70])*concentrations[14]*concentrations[6]),
            k_fwd[71]*(concentrations[17]*concentrations[15] + -1*self.usr_np.exp(log_k_eq[71])*concentrations[14]*concentrations[9]),
            k_fwd[72]*(concentrations[14]*concentrations[2] + -1*self.usr_np.exp(log_k_eq[72])*concentrations[15]*concentrations[1]),
            k_fwd[73]*(concentrations[14]*concentrations[4] + -1*self.usr_np.exp(log_k_eq[73])*concentrations[15]*concentrations[8]),
            k_fwd[74]*(concentrations[14]*concentrations[8] + -1*self.usr_np.exp(log_k_eq[74])*concentrations[15]*concentrations[5]),
            k_fwd[75]*(concentrations[16]*concentrations[14] + -1*self.usr_np.exp(log_k_eq[75])*concentrations[15]**2.0),
            k_fwd[76]*(concentrations[12]*concentrations[15] + -1*self.usr_np.exp(log_k_eq[76])*concentrations[13]*concentrations[14]),
            k_fwd[77]*(concentrations[0]*concentrations[15] + -1*self.usr_np.exp(log_k_eq[77])*concentrations[12]*concentrations[14]),
            ])

    def get_net_production_rates(self, rho, temperature, mass_fractions, concentrations):
        if concentrations is None:
            concentrations = self.get_concentrations(rho, mass_fractions)
        pressure = self.get_pressure(rho, temperature, mass_fractions)
        r_net = self.get_net_rates_of_progress(pressure, temperature, concentrations)
        ones = self._pyro_zeros_like(r_net[0]) + 1.0
        return self._pyro_make_array([
            r_net[39] + r_net[42] + r_net[67] + -1*(r_net[52] + r_net[53] + r_net[54] + r_net[55] + r_net[56] + r_net[77]) * ones,
            r_net[20] + r_net[33] + r_net[43] + r_net[52] + r_net[60] + r_net[72] + -1*(r_net[1] + r_net[2] + r_net[11] + r_net[27]) * ones,
            r_net[1] + r_net[2] + r_net[11] + r_net[17] + r_net[22] + r_net[24] + r_net[27] + r_net[28] + 2.0*r_net[30] + r_net[31] + r_net[36] + r_net[39] + -1*(r_net[0] + r_net[4] + r_net[5] + r_net[7] + r_net[8] + r_net[9] + r_net[10] + r_net[12] + r_net[13] + r_net[20] + r_net[26] + r_net[33] + r_net[42] + r_net[43] + r_net[50] + r_net[52] + r_net[60] + r_net[61] + r_net[68] + r_net[72]) * ones,
            r_net[6] + r_net[14] + r_net[15] + r_net[58] + r_net[59] + r_net[69] + -1*(r_net[0] + r_net[7] + r_net[8] + r_net[9] + r_net[10] + r_net[11] + r_net[18] + r_net[25] + r_net[29] + r_net[30] + r_net[38] + r_net[45] + r_net[46] + r_net[47] + r_net[51] + r_net[56]) * ones,
            r_net[0] + r_net[3] + r_net[12] + r_net[18] + r_net[47] + -1*(r_net[1] + r_net[5] + 2.0*r_net[6] + r_net[14] + r_net[19] + r_net[21] + r_net[22] + r_net[28] + r_net[34] + r_net[36] + r_net[40] + r_net[53] + r_net[54] + r_net[62] + r_net[73]) * ones,
            r_net[2] + r_net[3] + r_net[4] + r_net[12] + r_net[15] + r_net[23] + r_net[35] + r_net[37] + r_net[44] + r_net[55] + r_net[61] + r_net[63] + r_net[64] + r_net[74] * ones,
            r_net[20] + r_net[21] + r_net[23] + r_net[24] + r_net[25] + r_net[40] + r_net[41] + r_net[49] + r_net[51] + r_net[70] + -1*(r_net[16] + r_net[17] + r_net[18] + r_net[19]) * ones,
            r_net[16] + r_net[17] + r_net[18] + r_net[19] + r_net[22] + r_net[30] * ones,
            r_net[0] + r_net[1] + r_net[5] + 2.0*r_net[13] + r_net[14] + r_net[16] + r_net[21] + r_net[29] + r_net[32] + r_net[34] + r_net[38] + r_net[48] + r_net[51] + r_net[53] + r_net[61] + r_net[62] + r_net[73] + -1*(r_net[2] + 2.0*r_net[3] + r_net[4] + r_net[15] + r_net[17] + r_net[23] + r_net[31] + r_net[35] + r_net[37] + r_net[44] + r_net[55] + 2.0*r_net[57] + r_net[63] + r_net[64] + r_net[74]) * ones,
            r_net[28] + r_net[29] + r_net[33] + r_net[34] + r_net[35] + r_net[46] + r_net[50] + r_net[65] + r_net[71] + -1*(r_net[20] + r_net[21] + r_net[22] + r_net[23] + r_net[24] + r_net[25] + r_net[41] + r_net[70]) * ones,
            r_net[7] + r_net[8] + r_net[9] + r_net[10] + r_net[11] + r_net[25] + r_net[45] + r_net[56] + r_net[60] + r_net[62] + r_net[63] + r_net[64] + r_net[66] + r_net[67] + -1*(r_net[12] + r_net[13] + r_net[14] + r_net[15] + r_net[16] + r_net[32] + r_net[48] + 2.0*r_net[58] + 2.0*r_net[59] + r_net[65] + r_net[69]) * ones,
            r_net[57] + r_net[58] + r_net[59] + r_net[65] + -1*(r_net[60] + r_net[61] + r_net[62] + r_net[63] + r_net[64] + r_net[66] + r_net[67]) * ones,
            r_net[41] + r_net[52] + r_net[53] + r_net[55] + r_net[56] + r_net[77] + -1*(r_net[42] + r_net[43] + r_net[44] + r_net[45] + r_net[46] + r_net[47] + r_net[48] + r_net[67] + r_net[76]) * ones,
            r_net[43] + r_net[44] + r_net[45] + r_net[76] + -1*(r_net[40] + r_net[41]) * ones,
            r_net[66] + r_net[68] + r_net[69] + r_net[70] + r_net[71] + r_net[76] + r_net[77] + -1*(r_net[72] + r_net[73] + r_net[74] + r_net[75]) * ones,
            r_net[26] + r_net[27] + r_net[49] + r_net[50] + r_net[72] + r_net[73] + r_net[74] + 2.0*r_net[75] + -1*(r_net[36] + r_net[37] + r_net[38] + r_net[39] + r_net[66] + r_net[68] + r_net[69] + r_net[70] + r_net[71] + r_net[76] + r_net[77]) * ones,
            r_net[37] + r_net[40] + r_net[54] + -1*(r_net[26] + r_net[27] + r_net[28] + r_net[29] + r_net[30] + r_net[31] + r_net[32] + r_net[39] + r_net[75]) * ones,
            r_net[31] + r_net[32] + r_net[36] + r_net[38] + r_net[46] + r_net[51] + r_net[54] + -1*(r_net[33] + r_net[34] + r_net[35] + r_net[65] + r_net[71]) * ones,
            r_net[47] + r_net[48] + -1*(r_net[49] + r_net[50] + r_net[51]) * ones,
            0.0 * ones,
            ])

    def get_species_viscosities(self, temperature):
        return self._pyro_make_array([
            self.usr_np.sqrt(temperature)*(-0.003032740675530599 + 0.0012183622142844836*self.usr_np.log(temperature) + -8.843607391143744e-05*self.usr_np.log(temperature)**2 + -3.3225097643379e-06*self.usr_np.log(temperature)**3 + 4.520629786562667e-07*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.0003286235158163586 + 0.00047402944328505357*self.usr_np.log(temperature) + -8.852339013603458e-05*self.usr_np.log(temperature)**2 + 8.188000383387429e-06*self.usr_np.log(temperature)**3 + -2.7751168466490844e-07*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005094323314878568 + 0.002811619156006952*self.usr_np.log(temperature) + -0.000513261551655216*self.usr_np.log(temperature)**2 + 4.251063806056273e-05*self.usr_np.log(temperature)**3 + -1.3152800694485151e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.00618642807174783 + 0.0036188245122444136*self.usr_np.log(temperature) + -0.0006861983404476142*self.usr_np.log(temperature)**2 + 5.9160127096038374e-05*self.usr_np.log(temperature)**3 + -1.9049771784292983e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.0049360234076490424 + 0.003094326393064444*self.usr_np.log(temperature) + -0.0006001283031178501*self.usr_np.log(temperature)**2 + 5.31827013489187e-05*self.usr_np.log(temperature)**3 + -1.757357630977177e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(0.009495196334929235 + -0.004974400618430521*self.usr_np.log(temperature) + 0.0009719845681913876*self.usr_np.log(temperature)**2 + -7.63468726046495e-05*self.usr_np.log(temperature)**3 + 2.074120177535799e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005216081450818315 + 0.00311119967420752*self.usr_np.log(temperature) + -0.0005939529792233933*self.usr_np.log(temperature)**2 + 5.162313384583074e-05*self.usr_np.log(temperature)**3 + -1.6749040550399804e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.002706042231745467 + 0.0009960891348947763*self.usr_np.log(temperature) + -3.2457592884278304e-05*self.usr_np.log(temperature)**2 + -9.152079934512102e-06*self.usr_np.log(temperature)**3 + 6.716178143186513e-07*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005011998459926483 + 0.0031419541269823133*self.usr_np.log(temperature) + -0.0006093654512099629*self.usr_np.log(temperature)**2 + 5.4001287117584706e-05*self.usr_np.log(temperature)**3 + -1.7844068013034557e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(0.019523896375140452 + -0.011577925191931107*self.usr_np.log(temperature) + 0.002577136575653214*self.usr_np.log(temperature)**2 + -0.0002469609633701339*self.usr_np.log(temperature)**3 + 8.72122485397344e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.006234584035833468 + 0.003646993914882305*self.usr_np.log(temperature) + -0.0006915397979501361*self.usr_np.log(temperature)**2 + 5.9620637251916615e-05*self.usr_np.log(temperature)**3 + -1.919805769584038e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.006281649296907605 + 0.003674525297849738*self.usr_np.log(temperature) + -0.0006967602747212063*self.usr_np.log(temperature)**2 + 6.0070717135682766e-05*self.usr_np.log(temperature)**3 + -1.9342985022610006e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.000723325726252196 + -0.00012337374814843199*self.usr_np.log(temperature) + 0.0001920371637809246*self.usr_np.log(temperature)**2 + -2.9220875862054306e-05*self.usr_np.log(temperature)**3 + 1.3412185536095595e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.0007164898731949987 + -0.00012220779375302768*self.usr_np.log(temperature) + 0.0001902222997665551*self.usr_np.log(temperature)**2 + -2.8944721418636525e-05*self.usr_np.log(temperature)**3 + 1.3285432503453542e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005571710606025799 + 0.0030903896549455395*self.usr_np.log(temperature) + -0.0005670590117722423*self.usr_np.log(temperature)**2 + 4.721150900589917e-05*self.usr_np.log(temperature)**3 + -1.4686904077389338e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005407385695108317 + 0.0029886275771693425*self.usr_np.log(temperature) + -0.0005464546748956718*self.usr_np.log(temperature)**2 + 4.533357876793757e-05*self.usr_np.log(temperature)**3 + -1.4050373243190214e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.005314381026907245 + 0.0029372244903798075*self.usr_np.log(temperature) + -0.0005370558935639658*self.usr_np.log(temperature)**2 + 4.4553861046797365e-05*self.usr_np.log(temperature)**3 + -1.3808712970521162e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(0.01969128214169398 + -0.011677187134636535*self.usr_np.log(temperature) + 0.002599231344696817*self.usr_np.log(temperature)**2 + -0.00024907825335003904*self.usr_np.log(temperature)**3 + 8.795995221499793e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(0.01526834887753463 + -0.009270778612679362*self.usr_np.log(temperature) + 0.0021180036839516434*self.usr_np.log(temperature)**2 + -0.00020694352032325165*self.usr_np.log(temperature)**3 + 7.428386700872629e-06*self.usr_np.log(temperature)**4)**2,
            self.usr_np.sqrt(temperature)*(-0.0052325034588374736 + 0.0031249811202346835*self.usr_np.log(temperature) + -0.0005968857242770352*self.usr_np.log(temperature)**2 + 5.1908396950248406e-05*self.usr_np.log(temperature)**3 + -1.6850989392683053e-06*self.usr_np.log(temperature)**4)**2,
            ])

    def get_species_thermal_conductivities(self, temperature):
        return self._pyro_make_array([
            self.usr_np.sqrt(temperature)*(0.23844120988982623 + -0.12796878999453964*self.usr_np.log(temperature) + 0.024575111608409306*self.usr_np.log(temperature)**2 + -0.001974356645270854*self.usr_np.log(temperature)**3 + 5.668944251373442e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.9677034329275304 + 0.5744337660301296*self.usr_np.log(temperature) + -0.1257371151346395*self.usr_np.log(temperature)**2 + 0.012123569772945523*self.usr_np.log(temperature)**3 + -0.0004317820757895341*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.19161479586135227 + 0.09553836072745772*self.usr_np.log(temperature) + -0.016523473530086274*self.usr_np.log(temperature)**2 + 0.00129663923010161*self.usr_np.log(temperature)**3 + -3.721551758457342e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.10689552101630528 + -0.06376711343770658*self.usr_np.log(temperature) + 0.014217756178712414*self.usr_np.log(temperature)**2 + -0.0013908411531386269*self.usr_np.log(temperature)**3 + 5.09174438888175e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.027926115403422935 + -0.016356625373764096*self.usr_np.log(temperature) + 0.003849088291596164*self.usr_np.log(temperature)**2 + -0.0003927858198400925*self.usr_np.log(temperature)**3 + 1.5080612326746909e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.40448952246523034 + 0.2516652858409429*self.usr_np.log(temperature) + -0.058238000281090274*self.usr_np.log(temperature)**2 + 0.005930903658809399*self.usr_np.log(temperature)**3 + -0.0002223375428685012*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.040600294618875724 + -0.020985470902516234*self.usr_np.log(temperature) + 0.004001373353088539*self.usr_np.log(temperature)**2 + -0.00032019801523515716*self.usr_np.log(temperature)**3 + 9.270576537591034e-06*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.08710886466592467 + -0.05136577647305578*self.usr_np.log(temperature) + 0.011079892418450574*self.usr_np.log(temperature)**2 + -0.001029106462773587*self.usr_np.log(temperature)**3 + 3.531690263249683e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.24502310896223323 + 0.15010008535887331*self.usr_np.log(temperature) + -0.03385280923515083*self.usr_np.log(temperature)**2 + 0.003364115480212172*self.usr_np.log(temperature)**3 + -0.0001233972942085657*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.12106049922737952 + -0.06568749721524338*self.usr_np.log(temperature) + 0.012991361911708611*self.usr_np.log(temperature)**2 + -0.0011019701555636224*self.usr_np.log(temperature)**3 + 3.427871259557219e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.018484431132699684 + 0.011373761063693448*self.usr_np.log(temperature) + -0.0026436277213512833*self.usr_np.log(temperature)**2 + 0.00028471699535619256*self.usr_np.log(temperature)**3 + -1.0883625749574912e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.006133728726524626 + -0.0012884241746796332*self.usr_np.log(temperature) + -0.0003832196624520179*self.usr_np.log(temperature)**2 + 0.00012840152692769835*self.usr_np.log(temperature)**3 + -7.613061191923406e-06*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.1143834438018176 + -0.06043725154052427*self.usr_np.log(temperature) + 0.011229131917437936*self.usr_np.log(temperature)**2 + -0.0008428226720065614*self.usr_np.log(temperature)**3 + 2.1570494127692944e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.07274406195870343 + 0.04406673586010283*self.usr_np.log(temperature) + -0.010255005355448769*self.usr_np.log(temperature)**2 + 0.0010857856616006128*self.usr_np.log(temperature)**3 + -4.245179689416023e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.14677682651432417 + -0.06681802797672004*self.usr_np.log(temperature) + 0.009956130741676334*self.usr_np.log(temperature)**2 + -0.00048039302950334185*self.usr_np.log(temperature)**3 + 1.5597312858208145e-06*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.10177096934283318 + 0.07071197653924269*self.usr_np.log(temperature) + -0.01812426901508243*self.usr_np.log(temperature)**2 + 0.002038323241099894*self.usr_np.log(temperature)**3 + -8.321078878216132e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(-0.13553396798468245 + 0.08538115148894396*self.usr_np.log(temperature) + -0.020020880458238997*self.usr_np.log(temperature)**2 + 0.002082986241578933*self.usr_np.log(temperature)**3 + -8.001014700916656e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.1413820606007098 + -0.07202700530305295*self.usr_np.log(temperature) + 0.012996842162786282*self.usr_np.log(temperature)**2 + -0.0009595411017488158*self.usr_np.log(temperature)**3 + 2.414314677126832e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.1694602176257637 + -0.09382604317216947*self.usr_np.log(temperature) + 0.018834898518171623*self.usr_np.log(temperature)**2 + -0.0016161290313340025*self.usr_np.log(temperature)**3 + 5.084553360724884e-05*self.usr_np.log(temperature)**4),
            self.usr_np.sqrt(temperature)*(0.0026129214099176513 + 0.0015932386446981589*self.usr_np.log(temperature) + -0.000984277527739843*self.usr_np.log(temperature)**2 + 0.00016507154037197712*self.usr_np.log(temperature)**3 + -8.297315315373045e-06*self.usr_np.log(temperature)**4),
            ])

    def get_species_binary_mass_diffusivities(self, temperature):
        return self._pyro_make_array([
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.0009520538681201244 + -0.000968570053636871*self.usr_np.log(temperature) + 0.0002995450791863235*self.usr_np.log(temperature)**2 + -3.389973858796229e-05*self.usr_np.log(temperature)**3 + 1.356765590728881e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.010230615407362177 + 0.005467382116029252*self.usr_np.log(temperature) + -0.0009907311414494326*self.usr_np.log(temperature)**2 + 8.29497230846285e-05*self.usr_np.log(temperature)**3 + -2.54329243577055e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009192152060229575 + 0.0030585218861953253*self.usr_np.log(temperature) + -0.00011911734909055124*self.usr_np.log(temperature)**2 + -2.2551233644786395e-05*self.usr_np.log(temperature)**3 + 1.8322502375425632e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0024013223967703076 + 0.0010663257736673304*self.usr_np.log(temperature) + -0.00014695124315154735*self.usr_np.log(temperature)**2 + 8.724686094313137e-06*self.usr_np.log(temperature)**3 + -1.443818268249818e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004557139410216476 + 0.002227817396358922*self.usr_np.log(temperature) + -0.0003656548120601708*self.usr_np.log(temperature)**2 + 2.753993253053718e-05*self.usr_np.log(temperature)**3 + -7.426760049954737e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.011516970935433973 + -0.0071556270381816925*self.usr_np.log(temperature) + 0.0016313334796078955*self.usr_np.log(temperature)**2 + -0.0001583935865012354*self.usr_np.log(temperature)**3 + 5.6674056722699955e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0025346494284373524 + 0.0011661183997467668*self.usr_np.log(temperature) + -0.00017228841977055012*self.usr_np.log(temperature)**2 + 1.1378755357491804e-05*self.usr_np.log(temperature)**3 + -2.44810376712362e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0009181952732265521 + -0.0008824405554759782*self.usr_np.log(temperature) + 0.00026620970955912955*self.usr_np.log(temperature)**2 + -2.9830473225475686e-05*self.usr_np.log(temperature)**3 + 1.1862628039855896e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004470309023190466 + 0.0021853692223308932*self.usr_np.log(temperature) + -0.0003586877333746095*self.usr_np.log(temperature)**2 + 2.7015194798064033e-05*self.usr_np.log(temperature)**3 + -7.285252759611259e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006438480744054324 + -0.004075644460143526*self.usr_np.log(temperature) + 0.0009444968170159887*self.usr_np.log(temperature)**2 + -9.272696517567768e-05*self.usr_np.log(temperature)**3 + 3.348930311617664e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002384130934784019 + 0.0010586917720735696*self.usr_np.log(temperature) + -0.00014589919503240056*self.usr_np.log(temperature)**2 + 8.662224631578881e-06*self.usr_np.log(temperature)**3 + -1.4334817357891598e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0023678444694532597 + 0.0010514596412408478*self.usr_np.log(temperature) + -0.00014490252905763025*self.usr_np.log(temperature)**2 + 8.603051278662357e-06*self.usr_np.log(temperature)**3 + -1.423689341304826e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0015594508186797798 + -0.0012998474708566365*self.usr_np.log(temperature) + 0.0003649721960766366*self.usr_np.log(temperature)**2 + -3.966748700983098e-05*self.usr_np.log(temperature)**3 + 1.5456241774521608e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.001574744548168195 + -0.0013125952378010661*self.usr_np.log(temperature) + 0.0003685515241142586*self.usr_np.log(temperature)**2 + -4.005651102307477e-05*self.usr_np.log(temperature)**3 + 1.5607823073417749e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001782713440595603 + 0.00062584965591302*self.usr_np.log(temperature) + -3.743315541688863e-05*self.usr_np.log(temperature)**2 + -2.561130795708914e-06*self.usr_np.log(temperature)**3 + 2.7787007159379337e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0017076114460650865 + 0.0005772926994616816*self.usr_np.log(temperature) + -2.6126773750191255e-05*self.usr_np.log(temperature)**2 + -3.6836340526536325e-06*self.usr_np.log(temperature)**3 + 3.1875778203710526e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001747101727687932 + 0.0005906431904837844*self.usr_np.log(temperature) + -2.6730982427396186e-05*self.usr_np.log(temperature)**2 + -3.7688219017432896e-06*self.usr_np.log(temperature)**3 + 3.2612938557882316e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006385136075366192 + -0.004041876571091009*self.usr_np.log(temperature) + 0.0009366713886595591*self.usr_np.log(temperature)**2 + -9.195869554295692e-05*self.usr_np.log(temperature)**3 + 3.321183458739384e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.004420689974644208 + -0.0028653210515181336*self.usr_np.log(temperature) + 0.0006773888965212088*self.usr_np.log(temperature)**2 + -6.73403129452502e-05*self.usr_np.log(temperature)**3 + 2.456832768758002e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002566312350785201 + 0.0011830251199463919*self.usr_np.log(temperature) + -0.00017542469443455652*self.usr_np.log(temperature)**2 + 1.1645149701915719e-05*self.usr_np.log(temperature)**3 + -2.5315663034646197e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.010230615407362177 + 0.005467382116029252*self.usr_np.log(temperature) + -0.0009907311414494326*self.usr_np.log(temperature)**2 + 8.29497230846285e-05*self.usr_np.log(temperature)**3 + -2.54329243577055e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006865233575648626 + 0.004527988362737376*self.usr_np.log(temperature) + -0.0008654211810269055*self.usr_np.log(temperature)**2 + 7.992970847134335e-05*self.usr_np.log(temperature)**3 + -2.6377961782787995e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.02494681207468867 + 0.013946115930419296*self.usr_np.log(temperature) + -0.0026011928734115094*self.usr_np.log(temperature)**2 + 0.00022520946625262844*self.usr_np.log(temperature)**3 + -7.13154352858658e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008078545001671938 + 0.004640788076929539*self.usr_np.log(temperature) + -0.0008759648030253806*self.usr_np.log(temperature)**2 + 7.705769878334639e-05*self.usr_np.log(temperature)**3 + -2.473269089069164e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009169918908815631 + 0.00542436446437354*self.usr_np.log(temperature) + -0.0010322095278371874*self.usr_np.log(temperature)**2 + 9.207446814323219e-05*self.usr_np.log(temperature)**3 + -2.9857817128347404e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009701326278444037 + 0.004014323899384872*self.usr_np.log(temperature) + -0.0004679109587932634*self.usr_np.log(temperature)**2 + 1.9380852658722403e-05*self.usr_np.log(temperature)**3 + 9.241023547807315e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007285927271290707 + 0.004223298411101334*self.usr_np.log(temperature) + -0.0007987477271457576*self.usr_np.log(temperature)**2 + 7.054617033895255e-05*self.usr_np.log(temperature)**3 + -2.2704437485992294e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009335286151716984 + 0.004977408057966928*self.usr_np.log(temperature) + -0.0009000585925404341*self.usr_np.log(temperature)**2 + 7.519297228980869e-05*self.usr_np.log(temperature)**3 + -2.300042056791817e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009139457743590344 + 0.005406345497810469*self.usr_np.log(temperature) + -0.0010287806747270244*self.usr_np.log(temperature)**2 + 9.176860986745408e-05*self.usr_np.log(temperature)**3 + -2.97586337103169e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00977354948666333 + 0.004784293804168399*self.usr_np.log(temperature) + -0.0007867141241975951*self.usr_np.log(temperature)**2 + 5.937682201046671e-05*self.usr_np.log(temperature)**3 + -1.6059026895952696e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008071230238483005 + 0.004636586049734314*self.usr_np.log(temperature) + -0.000875171655856762*self.usr_np.log(temperature)**2 + 7.69879264644244e-05*self.usr_np.log(temperature)**3 + -2.471029653914118e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0080643429624977 + 0.0046326295961572755*self.usr_np.log(temperature) + -0.000874424861557278*self.usr_np.log(temperature)**2 + 7.692223175841828e-05*self.usr_np.log(temperature)**3 + -2.468921095154256e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009640489393709767 + 0.005096817921620048*self.usr_np.log(temperature) + -0.0009143230529377865*self.usr_np.log(temperature)**2 + 7.575173438707875e-05*self.usr_np.log(temperature)**3 + -2.2962124407539474e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00965342526681872 + 0.0051036569717128125*self.usr_np.log(temperature) + -0.0009155499166895052*self.usr_np.log(temperature)**2 + 7.585338014206006e-05*self.usr_np.log(temperature)**3 + -2.2992935615877252e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00848200740606869 + 0.004753196449428737*self.usr_np.log(temperature) + -0.0008884838778255998*self.usr_np.log(temperature)**2 + 7.709224617644328e-05*self.usr_np.log(temperature)**3 + -2.4468226705422157e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008386108668627197 + 0.004691226199159523*self.usr_np.log(temperature) + -0.0008755134626566181*self.usr_np.log(temperature)**2 + 7.584650510536051e-05*self.usr_np.log(temperature)**3 + -2.4032773646547836e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008421659301319497 + 0.004711113379980394*self.usr_np.log(temperature) + -0.0008792249644675684*self.usr_np.log(temperature)**2 + 7.616803578759297e-05*self.usr_np.log(temperature)**3 + -2.4134654070594882e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009762886592027935 + 0.004779074163049336*self.usr_np.log(temperature) + -0.0007858558229379803*self.usr_np.log(temperature)**2 + 5.931204218810342e-05*self.usr_np.log(temperature)**3 + -1.604150657611613e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008912190597381521 + 0.004456716561377835*self.usr_np.log(temperature) + -0.0007542022030744625*self.usr_np.log(temperature)**2 + 5.874430098750949e-05*self.usr_np.log(temperature)**3 + -1.657174844827504e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007323280548457206 + 0.004247486239670019*self.usr_np.log(temperature) + -0.000803359454232897*self.usr_np.log(temperature)**2 + 7.096837772986983e-05*self.usr_np.log(temperature)**3 + -2.2842690699017418e-06*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.009192152060229575 + 0.0030585218861953253*self.usr_np.log(temperature) + -0.00011911734909055124*self.usr_np.log(temperature)**2 + -2.2551233644786395e-05*self.usr_np.log(temperature)**3 + 1.8322502375425632e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.02494681207468867 + 0.013946115930419296*self.usr_np.log(temperature) + -0.0026011928734115094*self.usr_np.log(temperature)**2 + 0.00022520946625262844*self.usr_np.log(temperature)**3 + -7.13154352858658e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.045124959996888286 + 0.021583165661288133*self.usr_np.log(temperature) + -0.0034229936881246003*self.usr_np.log(temperature)**2 + 0.00024780816599332626*self.usr_np.log(temperature)**3 + -6.298684234611228e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.01978919058574967 + 0.009984564215031584*self.usr_np.log(temperature) + -0.0017087964642707695*self.usr_np.log(temperature)**2 + 0.00013470040249436078*self.usr_np.log(temperature)**3 + -3.857904702441848e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.02669027788761092 + 0.013931611307128697*self.usr_np.log(temperature) + -0.0024745908346564117*self.usr_np.log(temperature)**2 + 0.00020278396527027511*self.usr_np.log(temperature)**3 + -6.077989307547116e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.031782681005767414 + -0.021944709939329763*self.usr_np.log(temperature) + 0.005452754910082066*self.usr_np.log(temperature)**2 + -0.0005578687529710515*self.usr_np.log(temperature)**3 + 2.081257384417445e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.018348097559784542 + 0.00934374821913105*self.usr_np.log(temperature) + -0.0016132230148107236*self.usr_np.log(temperature)**2 + 0.0001283904782971689*self.usr_np.log(temperature)**3 + -3.7174163148570795e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007754152127278849 + 0.0024257478524124278*self.usr_np.log(temperature) + -3.2766185862726113e-05*self.usr_np.log(temperature)**2 + -2.7588496893405756e-05*self.usr_np.log(temperature)**3 + 1.911824945304809e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.026643356521013652 + 0.013907119608531785*self.usr_np.log(temperature) + -0.00247024051712679*self.usr_np.log(temperature)**2 + 0.00020242747213748986*self.usr_np.log(temperature)**3 + -6.067304234657098e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.015040351770526808 + -0.011140503424520628*self.usr_np.log(temperature) + 0.002909397659221499*self.usr_np.log(temperature)**2 + -0.00030550481423061117*self.usr_np.log(temperature)**3 + 1.161846056260181e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.01977995988607853 + 0.009979906899031814*self.usr_np.log(temperature) + -0.0017079993934121143*self.usr_np.log(temperature)**2 + 0.00013463757127454265*self.usr_np.log(temperature)**3 + -3.856105176557561e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.019771272354030468 + 0.009975523636330735*self.usr_np.log(temperature) + -0.0017072492250993386*self.usr_np.log(temperature)**2 + 0.0001345784372733676*self.usr_np.log(temperature)**3 + -3.854411541408047e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006051814325170231 + 0.0013376487944893687*self.usr_np.log(temperature) + 0.00021740857354908622*self.usr_np.log(temperature)**2 + -5.219935837844324e-05*self.usr_np.log(temperature)**3 + 2.800675761731988e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0060560218171541325 + 0.0013385787877336517*self.usr_np.log(temperature) + 0.00021755972572349284*self.usr_np.log(temperature)**2 + -5.2235649708333666e-05*self.usr_np.log(temperature)**3 + 2.8026229168389956e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016798072125970478 + 0.008092001051007745*self.usr_np.log(temperature) + -0.0012988732120842422*self.usr_np.log(temperature)**2 + 9.537156380350812e-05*self.usr_np.log(temperature)**3 + -2.4782380689475866e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016287567515301755 + 0.007806467685088397*self.usr_np.log(temperature) + -0.0012424669191316313*self.usr_np.log(temperature)**2 + 9.032790860746924e-05*self.usr_np.log(temperature)**3 + -2.3112731718629754e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016324296381304906 + 0.00782407146203104*self.usr_np.log(temperature) + -0.0012452687126407187*self.usr_np.log(temperature)**2 + 9.053160026632847e-05*self.usr_np.log(temperature)**3 + -2.3164851497901466e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.01503187410020702 + -0.01113422394939384*self.usr_np.log(temperature) + 0.0029077577431878836*self.usr_np.log(temperature)**2 + -0.0003053326128675639*self.usr_np.log(temperature)**3 + 1.1611911681371765e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008364388983951893 + -0.006976007197587993*self.usr_np.log(temperature) + 0.0019593625012748485*self.usr_np.log(temperature)**2 + -0.00021298663413841666*self.usr_np.log(temperature)**3 + 8.299735078233254e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.018552793898362993 + 0.009455038189563062*self.usr_np.log(temperature) + -0.0016339242326530946*self.usr_np.log(temperature)**2 + 0.00013016014962564*self.usr_np.log(temperature)**3 + -3.7729752245626675e-06*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.0024013223967703076 + 0.0010663257736673304*self.usr_np.log(temperature) + -0.00014695124315154735*self.usr_np.log(temperature)**2 + 8.724686094313137e-06*self.usr_np.log(temperature)**3 + -1.443818268249818e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008078545001671938 + 0.004640788076929539*self.usr_np.log(temperature) + -0.0008759648030253806*self.usr_np.log(temperature)**2 + 7.705769878334639e-05*self.usr_np.log(temperature)**3 + -2.473269089069164e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.01978919058574967 + 0.009984564215031584*self.usr_np.log(temperature) + -0.0017087964642707695*self.usr_np.log(temperature)**2 + 0.00013470040249436078*self.usr_np.log(temperature)**3 + -3.857904702441848e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0031272899371257495 + 0.0016332321885344269*self.usr_np.log(temperature) + -0.00029023244731892585*self.usr_np.log(temperature)**2 + 2.3795154191077426e-05*self.usr_np.log(temperature)**3 + -7.135754459127752e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0045622892688763645 + 0.0024510841274093574*self.usr_np.log(temperature) + -0.0004462621814735073*self.usr_np.log(temperature)**2 + 3.755034814735861e-05*self.usr_np.log(temperature)**3 + -1.1574715957969366e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.004416855007486279 + -0.0031775743855664085*self.usr_np.log(temperature) + 0.0008133764546256504*self.usr_np.log(temperature)**2 + -8.454231010206175e-05*self.usr_np.log(temperature)**3 + 3.1913607821353663e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003009672869056897 + 0.0015847679011338385*self.usr_np.log(temperature) + -0.00028341591661372364*self.usr_np.log(temperature)**2 + 2.3400497455366053e-05*self.usr_np.log(temperature)**3 + -7.068324598269804e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019538762606366006 + 0.0008581597928160338*self.usr_np.log(temperature) + -0.0001155237382061367*self.usr_np.log(temperature)**2 + 6.588031407450016e-06*self.usr_np.log(temperature)**3 + -9.570226239511786e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004471245658964389 + 0.002402171063373017*self.usr_np.log(temperature) + -0.0004373567137188616*self.usr_np.log(temperature)**2 + 3.680100520838933e-05*self.usr_np.log(temperature)**3 + -1.1343734566262046e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005530161251171008 + -0.0007124959325135233*self.usr_np.log(temperature) + 0.00023979836465243525*self.usr_np.log(temperature)**2 + -2.799627830511098e-05*self.usr_np.log(temperature)**3 + 1.1425694337218312e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0031033213032470603 + 0.0016207145310248657*self.usr_np.log(temperature) + -0.0002880080052590736*self.usr_np.log(temperature)**2 + 2.3612779882855422e-05*self.usr_np.log(temperature)**3 + -7.081063563969972e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00308060305221495 + 0.0016088498879638456*self.usr_np.log(temperature) + -0.00028589960670053025*self.usr_np.log(temperature)**2 + 2.3439919579816093e-05*self.usr_np.log(temperature)**3 + -7.029225754125662e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002017631168820656 + 0.0008450262479838664*self.usr_np.log(temperature) + -0.0001016515820217343*self.usr_np.log(temperature)**2 + 4.576683622901494e-06*self.usr_np.log(temperature)**3 + -3.980134558767173e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020386859932325406 + 0.0008538444500188671*self.usr_np.log(temperature) + -0.00010271235876112224*self.usr_np.log(temperature)**2 + 4.624443229217549e-06*self.usr_np.log(temperature)**3 + -4.021668931496637e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034988088747142337 + 0.001770656151599679*self.usr_np.log(temperature) + -0.00030404459245461467*self.usr_np.log(temperature)**2 + 2.405300177538219e-05*self.usr_np.log(temperature)**3 + -6.918644716404808e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0035249956962490345 + 0.0017801646362730294*self.usr_np.log(temperature) + -0.0003049993737600602*self.usr_np.log(temperature)**2 + 2.4070574049985574e-05*self.usr_np.log(temperature)**3 + -6.903947178341752e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003610135202136788 + 0.001823161096579385*self.usr_np.log(temperature) + -0.0003123660482802859*self.usr_np.log(temperature)**2 + 2.4651952570085363e-05*self.usr_np.log(temperature)**3 + -7.070698772436281e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005481265157758139 + -0.0007061962486419903*self.usr_np.log(temperature) + 0.0002376781365628588*self.usr_np.log(temperature)**2 + -2.774874327397511e-05*self.usr_np.log(temperature)**3 + 1.1324671637967695e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00011010110796338114 + -0.0002517450170031291*self.usr_np.log(temperature) + 0.00012525090764892621*self.usr_np.log(temperature)**2 + -1.626070152568524e-05*self.usr_np.log(temperature)**3 + 7.045686310128217e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00303005347627421 + 0.0015963119455941247*self.usr_np.log(temperature) + -0.00028558271238060057*self.usr_np.log(temperature)**2 + 2.3589003022566823e-05*self.usr_np.log(temperature)**3 + -7.128139183150021e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.004557139410216476 + 0.002227817396358922*self.usr_np.log(temperature) + -0.0003656548120601708*self.usr_np.log(temperature)**2 + 2.753993253053718e-05*self.usr_np.log(temperature)**3 + -7.426760049954737e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009169918908815631 + 0.00542436446437354*self.usr_np.log(temperature) + -0.0010322095278371874*self.usr_np.log(temperature)**2 + 9.207446814323219e-05*self.usr_np.log(temperature)**3 + -2.9857817128347404e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.02669027788761092 + 0.013931611307128697*self.usr_np.log(temperature) + -0.0024745908346564117*self.usr_np.log(temperature)**2 + 0.00020278396527027511*self.usr_np.log(temperature)**3 + -6.077989307547116e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0045622892688763645 + 0.0024510841274093574*self.usr_np.log(temperature) + -0.0004462621814735073*self.usr_np.log(temperature)**2 + 3.755034814735861e-05*self.usr_np.log(temperature)**3 + -1.1574715957969366e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006200626242455202 + 0.0034194563149447833*self.usr_np.log(temperature) + -0.0006330719706003382*self.usr_np.log(temperature)**2 + 5.431265930458088e-05*self.usr_np.log(temperature)**3 + -1.7055965618529683e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0005572856088380616 + -0.0005667709603532111*self.usr_np.log(temperature) + 0.0003231082930917826*self.usr_np.log(temperature)**2 + -4.3068136080942354e-05*self.usr_np.log(temperature)**3 + 1.8913297388091361e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004301462587613211 + 0.002329882348119633*self.usr_np.log(temperature) + -0.0004266445404172711*self.usr_np.log(temperature)**2 + 3.613291930852209e-05*self.usr_np.log(temperature)**3 + -1.1209458597519765e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00387857138030766 + 0.0018884328951822647*self.usr_np.log(temperature) + -0.0003081791030729948*self.usr_np.log(temperature)**2 + 2.3061582051116772e-05*self.usr_np.log(temperature)**3 + -6.162795831270853e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006108057939016906 + 0.00336840771801604*self.usr_np.log(temperature) + -0.0006236209254989163*self.usr_np.log(temperature)**2 + 5.350183302176779e-05*self.usr_np.log(temperature)**3 + -1.680133943414325e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013272888250194415 + 0.00021186495359184742*self.usr_np.log(temperature) + 8.338986871456491e-05*self.usr_np.log(temperature)**2 + -1.5955102823409383e-05*self.usr_np.log(temperature)**3 + 8.065688520040438e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0045390078886350365 + 0.0024385762353815264*self.usr_np.log(temperature) + -0.0004439849037904978*self.usr_np.log(temperature)**2 + 3.735872857173391e-05*self.usr_np.log(temperature)**3 + -1.1515650136492746e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00451699685165708 + 0.0024267508336622045*self.usr_np.log(temperature) + -0.00044183188525111184*self.usr_np.log(temperature)**2 + 3.717756467509114e-05*self.usr_np.log(temperature)**3 + -1.145980722826736e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004021774263552851 + 0.00191797658426724*self.usr_np.log(temperature) + -0.0003026445382098667*self.usr_np.log(temperature)**2 + 2.1777273839997734e-05*self.usr_np.log(temperature)**3 + -5.481461633717201e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004050605074236105 + 0.0019317259436692868*self.usr_np.log(temperature) + -0.00030481409990267076*self.usr_np.log(temperature)**2 + 2.193338813615908e-05*self.usr_np.log(temperature)**3 + -5.520756475226575e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0049923295405593674 + 0.0026119503294860596*self.usr_np.log(temperature) + -0.0004648317194388052*self.usr_np.log(temperature)**2 + 3.8170881117230436e-05*self.usr_np.log(temperature)**3 + -1.1465893053293108e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0050079607334877424 + 0.002615721593111355*self.usr_np.log(temperature) + -0.0004648685324387309*self.usr_np.log(temperature)**2 + 3.811688111005587e-05*self.usr_np.log(temperature)**3 + -1.1431812827430111e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0050998816165755525 + 0.002663733039595207*self.usr_np.log(temperature) + -0.00047340117242827546*self.usr_np.log(temperature)**2 + 3.8816514665215795e-05*self.usr_np.log(temperature)**3 + -1.1641643212742693e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013193470785842416 + 0.00021059727340927903*self.usr_np.log(temperature) + 8.289091085394808e-05*self.usr_np.log(temperature)**2 + -1.585963650245682e-05*self.usr_np.log(temperature)**3 + 8.017427996903311e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001761447510892698 + 0.0005731704748247918*self.usr_np.log(temperature) + -1.7156677076166038e-05*self.usr_np.log(temperature)**2 + -5.038406328338518e-06*self.usr_np.log(temperature)**3 + 3.8175996555075504e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004334076415428823 + 0.0023487751084675713*self.usr_np.log(temperature) + -0.00043025471406034474*self.usr_np.log(temperature)**2 + 3.6453305767041e-05*self.usr_np.log(temperature)**3 + -1.131328183921725e-06*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.011516970935433973 + -0.0071556270381816925*self.usr_np.log(temperature) + 0.0016313334796078955*self.usr_np.log(temperature)**2 + -0.0001583935865012354*self.usr_np.log(temperature)**3 + 5.6674056722699955e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009701326278444037 + 0.004014323899384872*self.usr_np.log(temperature) + -0.0004679109587932634*self.usr_np.log(temperature)**2 + 1.9380852658722403e-05*self.usr_np.log(temperature)**3 + 9.241023547807315e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.031782681005767414 + -0.021944709939329763*self.usr_np.log(temperature) + 0.005452754910082066*self.usr_np.log(temperature)**2 + -0.0005578687529710515*self.usr_np.log(temperature)**3 + 2.081257384417445e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.004416855007486279 + -0.0031775743855664085*self.usr_np.log(temperature) + 0.0008133764546256504*self.usr_np.log(temperature)**2 + -8.454231010206175e-05*self.usr_np.log(temperature)**3 + 3.1913607821353663e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0005572856088380616 + -0.0005667709603532111*self.usr_np.log(temperature) + 0.0003231082930917826*self.usr_np.log(temperature)**2 + -4.3068136080942354e-05*self.usr_np.log(temperature)**3 + 1.8913297388091361e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008153691915965825 + -0.0039502872622900346*self.usr_np.log(temperature) + 0.0006415133652212911*self.usr_np.log(temperature)**2 + -3.490182562156911e-05*self.usr_np.log(temperature)**3 + 3.2184246745610446e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0034801095778208327 + -0.00261654567161524*self.usr_np.log(temperature) + 0.0006901368404514886*self.usr_np.log(temperature)**2 + -7.282721342074574e-05*self.usr_np.log(temperature)**3 + 2.779507883753783e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.011799896789258451 + -0.007176547139724081*self.usr_np.log(temperature) + 0.0016046798538747835*self.usr_np.log(temperature)**2 + -0.0001536151265017002*self.usr_np.log(temperature)**3 + 5.428853321358771e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.000548468903721082 + -0.0005578041893808191*self.usr_np.log(temperature) + 0.00031799646085823745*self.usr_np.log(temperature)**2 + -4.238676364026507e-05*self.usr_np.log(temperature)**3 + 1.8614073860548128e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.016318584352472888 + -0.00952456786178405*self.usr_np.log(temperature) + 0.002046263146573973*self.usr_np.log(temperature)**2 + -0.0001892082471856223*self.usr_np.log(temperature)**3 + 6.47118939783779e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0021021151307109177 + -0.0018281498403585916*self.usr_np.log(temperature) + 0.0005252030760225731*self.usr_np.log(temperature)**2 + -5.7658032199614234e-05*self.usr_np.log(temperature)**3 + 2.2618777599134024e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0020910881859506547 + -0.0018185600195946322*self.usr_np.log(temperature) + 0.0005224480483680041*self.usr_np.log(temperature)**2 + -5.7355578766817345e-05*self.usr_np.log(temperature)**3 + 2.250012757465988e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.01189940028321595 + -0.0073057252936933595*self.usr_np.log(temperature) + 0.0016478162863818632*self.usr_np.log(temperature)**2 + -0.00015877984522855087*self.usr_np.log(temperature)**3 + 5.644006452870465e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.011991130138128952 + -0.007362043520263369*self.usr_np.log(temperature) + 0.0016605189390588879*self.usr_np.log(temperature)**2 + -0.000160003844070354*self.usr_np.log(temperature)**3 + 5.6875148550325925e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.00860546855507325 + -0.0055958227697099055*self.usr_np.log(temperature) + 0.0013264339989168042*self.usr_np.log(temperature)**2 + -0.0001320757277752311*self.usr_np.log(temperature)**3 + 4.824811077733519e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0056396994924134535 + -0.003904865981311113*self.usr_np.log(temperature) + 0.0009722869115203534*self.usr_np.log(temperature)**2 + -9.958695824611479e-05*self.usr_np.log(temperature)**3 + 3.718491947888623e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005749093308581439 + -0.003980609058033709*self.usr_np.log(temperature) + 0.0009911464581709095*self.usr_np.log(temperature)**2 + -0.00010151865645434024*self.usr_np.log(temperature)**3 + 3.7906199088147135e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.016213327589266264 + -0.009463133293538746*self.usr_np.log(temperature) + 0.0020330645117644635*self.usr_np.log(temperature)**2 + -0.00018798783202946123*self.usr_np.log(temperature)**3 + 6.429449475096154e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.013194593801159792 + -0.0077747242757990635*self.usr_np.log(temperature) + 0.0016863764641858114*self.usr_np.log(temperature)**2 + -0.00015735128294683967*self.usr_np.log(temperature)**3 + 5.429648667265697e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0032788605181610473 + -0.002505478451489095*self.usr_np.log(temperature) + 0.000667816571108672*self.usr_np.log(temperature)**2 + -7.083588486066702e-05*self.usr_np.log(temperature)**3 + 2.713492698249429e-06*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.0025346494284373524 + 0.0011661183997467668*self.usr_np.log(temperature) + -0.00017228841977055012*self.usr_np.log(temperature)**2 + 1.1378755357491804e-05*self.usr_np.log(temperature)**3 + -2.44810376712362e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007285927271290707 + 0.004223298411101334*self.usr_np.log(temperature) + -0.0007987477271457576*self.usr_np.log(temperature)**2 + 7.054617033895255e-05*self.usr_np.log(temperature)**3 + -2.2704437485992294e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.018348097559784542 + 0.00934374821913105*self.usr_np.log(temperature) + -0.0016132230148107236*self.usr_np.log(temperature)**2 + 0.0001283904782971689*self.usr_np.log(temperature)**3 + -3.7174163148570795e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003009672869056897 + 0.0015847679011338385*self.usr_np.log(temperature) + -0.00028341591661372364*self.usr_np.log(temperature)**2 + 2.3400497455366053e-05*self.usr_np.log(temperature)**3 + -7.068324598269804e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004301462587613211 + 0.002329882348119633*self.usr_np.log(temperature) + -0.0004266445404172711*self.usr_np.log(temperature)**2 + 3.613291930852209e-05*self.usr_np.log(temperature)**3 + -1.1209458597519765e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0034801095778208327 + -0.00261654567161524*self.usr_np.log(temperature) + 0.0006901368404514886*self.usr_np.log(temperature)**2 + -7.282721342074574e-05*self.usr_np.log(temperature)**3 + 2.779507883753783e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0029131057507289886 + 0.0015474779150292225*self.usr_np.log(temperature) + -0.00027888548678517145*self.usr_np.log(temperature)**2 + 2.321620033567437e-05*self.usr_np.log(temperature)**3 + -7.074354736449069e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020933310545347633 + 0.0009551433118463711*self.usr_np.log(temperature) + -0.00013894323923946435*self.usr_np.log(temperature)**2 + 8.974603118050582e-06*self.usr_np.log(temperature)**3 + -1.8416952590950704e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004219550975759337 + 0.002285515016154069*self.usr_np.log(temperature) + -0.0004185200615264815*self.usr_np.log(temperature)**2 + 3.544484970404791e-05*self.usr_np.log(temperature)**3 + -1.0995999848798053e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(7.686133458206035e-05 + -0.0004241726082550217*self.usr_np.log(temperature) + 0.00017621054027595732*self.usr_np.log(temperature)**2 + -2.1926515410048614e-05*self.usr_np.log(temperature)**3 + 9.287141121984556e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002988144210836108 + 0.001573431809808491*self.usr_np.log(temperature) + -0.00028138859847361993*self.usr_np.log(temperature)**2 + 2.3233110056852574e-05*self.usr_np.log(temperature)**3 + -7.017763772858793e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002967748990359258 + 0.0015626925394120344*self.usr_np.log(temperature) + -0.00027946801429192295*self.usr_np.log(temperature)**2 + 2.3074535246426228e-05*self.usr_np.log(temperature)**3 + -6.969864866646174e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002191767731787972 + 0.0009659135868747959*self.usr_np.log(temperature) + -0.00013098858829278736*self.usr_np.log(temperature)**2 + 7.5669919933838616e-06*self.usr_np.log(temperature)**3 + -1.1489628590487276e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002213246191569245 + 0.0009753791592642245*self.usr_np.log(temperature) + -0.00013227222482223536*self.usr_np.log(temperature)**2 + 7.641145531975333e-06*self.usr_np.log(temperature)**3 + -1.1602222421260787e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00337880969417297 + 0.0017262012335968909*self.usr_np.log(temperature) + -0.0002992048717117942*self.usr_np.log(temperature)**2 + 2.3909070595076803e-05*self.usr_np.log(temperature)**3 + -6.956797142913897e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0033907606456903727 + 0.0017282716043852636*self.usr_np.log(temperature) + -0.00029871362007977955*self.usr_np.log(temperature)**2 + 2.3800048784658837e-05*self.usr_np.log(temperature)**3 + -6.900448634715758e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034691330221015477 + 0.001768218025519275*self.usr_np.log(temperature) + -0.0003056179400000115*self.usr_np.log(temperature)**2 + 2.4350151424359833e-05*self.usr_np.log(temperature)**3 + -7.059942215726247e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(7.622502660368307e-05 + -0.00042066103234477927*self.usr_np.log(temperature) + 0.00017475175515918912*self.usr_np.log(temperature)**2 + -2.1744993497193575e-05*self.usr_np.log(temperature)**3 + 9.210256145520887e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00045235539949336015 + -4.409058206528131e-05*self.usr_np.log(temperature) + 7.95031974551733e-05*self.usr_np.log(temperature)**2 + -1.1889029922088942e-05*self.usr_np.log(temperature)**3 + 5.504013233597556e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0029348181666659498 + 0.001559923431128209*self.usr_np.log(temperature) + -0.00028128084862643715*self.usr_np.log(temperature)**2 + 2.3428922377910528e-05*self.usr_np.log(temperature)**3 + -7.14358273826035e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.0009181952732265521 + -0.0008824405554759782*self.usr_np.log(temperature) + 0.00026620970955912955*self.usr_np.log(temperature)**2 + -2.9830473225475686e-05*self.usr_np.log(temperature)**3 + 1.1862628039855896e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009335286151716984 + 0.004977408057966928*self.usr_np.log(temperature) + -0.0009000585925404341*self.usr_np.log(temperature)**2 + 7.519297228980869e-05*self.usr_np.log(temperature)**3 + -2.300042056791817e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007754152127278849 + 0.0024257478524124278*self.usr_np.log(temperature) + -3.2766185862726113e-05*self.usr_np.log(temperature)**2 + -2.7588496893405756e-05*self.usr_np.log(temperature)**3 + 1.911824945304809e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019538762606366006 + 0.0008581597928160338*self.usr_np.log(temperature) + -0.0001155237382061367*self.usr_np.log(temperature)**2 + 6.588031407450016e-06*self.usr_np.log(temperature)**3 + -9.570226239511786e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00387857138030766 + 0.0018884328951822647*self.usr_np.log(temperature) + -0.0003081791030729948*self.usr_np.log(temperature)**2 + 2.3061582051116772e-05*self.usr_np.log(temperature)**3 + -6.162795831270853e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.011799896789258451 + -0.007176547139724081*self.usr_np.log(temperature) + 0.0016046798538747835*self.usr_np.log(temperature)**2 + -0.0001536151265017002*self.usr_np.log(temperature)**3 + 5.428853321358771e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020933310545347633 + 0.0009551433118463711*self.usr_np.log(temperature) + -0.00013894323923946435*self.usr_np.log(temperature)**2 + 8.974603118050582e-06*self.usr_np.log(temperature)**3 + -1.8416952590950704e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0008536776054310564 + -0.0007825552849291938*self.usr_np.log(temperature) + 0.00023088784386152654*self.usr_np.log(temperature)**2 + -2.5636905937189747e-05*self.usr_np.log(temperature)**3 + 1.0133819725200464e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0037933388795415605 + 0.0018469341467011473*self.usr_np.log(temperature) + -0.00030140679619521674*self.usr_np.log(temperature)**2 + 2.2554798465980415e-05*self.usr_np.log(temperature)**3 + -6.027366971344322e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005546414281250702 + -0.0034992148409895354*self.usr_np.log(temperature) + 0.0008085594716621666*self.usr_np.log(temperature)**2 + -7.922866698713425e-05*self.usr_np.log(temperature)**3 + 2.856844649427854e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019365240276617492 + 0.0008505385381046079*self.usr_np.log(temperature) + -0.0001144977802880381*self.usr_np.log(temperature)**2 + 6.529523579562417e-06*self.usr_np.log(temperature)**3 + -9.485233755953191e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019200571100619333 + 0.0008433061217638981*self.usr_np.log(temperature) + -0.00011352416700663822*self.usr_np.log(temperature)**2 + 6.474000836142679e-06*self.usr_np.log(temperature)**3 + -9.404577611085978e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014485452347251365 + -0.001173367441385316*self.usr_np.log(temperature) + 0.0003241304304144164*self.usr_np.log(temperature)**2 + -3.496961698497567e-05*self.usr_np.log(temperature)**3 + 1.3556957815872554e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.001465808447899401 + -0.0011873511898985482*self.usr_np.log(temperature) + 0.0003279932940533267*self.usr_np.log(temperature)**2 + -3.5386371628300103e-05*self.usr_np.log(temperature)**3 + 1.3718524501648557e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0014504678947645185 + 0.0004848042116954979*self.usr_np.log(temperature) + -1.9755549184121244e-05*self.usr_np.log(temperature)**2 + -3.4371003946536045e-06*self.usr_np.log(temperature)**3 + 2.8393051616381405e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001386217724871042 + 0.000441937924803899*self.usr_np.log(temperature) + -9.486588448659946e-06*self.usr_np.log(temperature)**2 + -4.47325958326669e-06*self.usr_np.log(temperature)**3 + 3.221751335488127e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0014228581820813974 + 0.0004536192121883492*self.usr_np.log(temperature) + -9.737337613874782e-06*self.usr_np.log(temperature)**2 + -4.591496620287985e-06*self.usr_np.log(temperature)**3 + 3.30690855132615e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005490022368145028 + -0.0034636373652993557*self.usr_np.log(temperature) + 0.0008003386260567461*self.usr_np.log(temperature)**2 + -7.842312742985594e-05*self.usr_np.log(temperature)**3 + 2.827798327412652e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0037755909114692964 + -0.0024354532304081333*self.usr_np.log(temperature) + 0.0005734791374778295*self.usr_np.log(temperature)**2 + -5.687303384632564e-05*self.usr_np.log(temperature)**3 + 2.0709644292386187e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0021194343807516697 + 0.0009691103714402947*self.usr_np.log(temperature) + -0.00014154374102108547*self.usr_np.log(temperature)**2 + 9.196204490091076e-06*self.usr_np.log(temperature)**3 + -1.9113978374504132e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.004470309023190466 + 0.0021853692223308932*self.usr_np.log(temperature) + -0.0003586877333746095*self.usr_np.log(temperature)**2 + 2.7015194798064033e-05*self.usr_np.log(temperature)**3 + -7.285252759611259e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009139457743590344 + 0.005406345497810469*self.usr_np.log(temperature) + -0.0010287806747270244*self.usr_np.log(temperature)**2 + 9.176860986745408e-05*self.usr_np.log(temperature)**3 + -2.97586337103169e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.026643356521013652 + 0.013907119608531785*self.usr_np.log(temperature) + -0.00247024051712679*self.usr_np.log(temperature)**2 + 0.00020242747213748986*self.usr_np.log(temperature)**3 + -6.067304234657098e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004471245658964389 + 0.002402171063373017*self.usr_np.log(temperature) + -0.0004373567137188616*self.usr_np.log(temperature)**2 + 3.680100520838933e-05*self.usr_np.log(temperature)**3 + -1.1343734566262046e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006108057939016906 + 0.00336840771801604*self.usr_np.log(temperature) + -0.0006236209254989163*self.usr_np.log(temperature)**2 + 5.350183302176779e-05*self.usr_np.log(temperature)**3 + -1.680133943414325e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.000548468903721082 + -0.0005578041893808191*self.usr_np.log(temperature) + 0.00031799646085823745*self.usr_np.log(temperature)**2 + -4.238676364026507e-05*self.usr_np.log(temperature)**3 + 1.8614073860548128e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004219550975759337 + 0.002285515016154069*self.usr_np.log(temperature) + -0.0004185200615264815*self.usr_np.log(temperature)**2 + 3.544484970404791e-05*self.usr_np.log(temperature)**3 + -1.0995999848798053e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0037933388795415605 + 0.0018469341467011473*self.usr_np.log(temperature) + -0.00030140679619521674*self.usr_np.log(temperature)**2 + 2.2554798465980415e-05*self.usr_np.log(temperature)**3 + -6.027366971344322e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006014064995814301 + 0.0033165734756941405*self.usr_np.log(temperature) + -0.0006140244274269671*self.usr_np.log(temperature)**2 + 5.267852800349187e-05*self.usr_np.log(temperature)**3 + -1.6542794515407296e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013016871723122573 + 0.00020777835777351282*self.usr_np.log(temperature) + 8.17813880145306e-05*self.usr_np.log(temperature)**2 + -1.5647349911059903e-05*self.usr_np.log(temperature)**3 + 7.910112015170125e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004447487715930472 + 0.0023894071385897114*self.usr_np.log(temperature) + -0.00043503282085309585*self.usr_np.log(temperature)**2 + 3.660546323826793e-05*self.usr_np.log(temperature)**3 + -1.128345968538034e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0044250214607718975 + 0.002377337171480393*self.usr_np.log(temperature) + -0.0004328352749625389*self.usr_np.log(temperature)**2 + 3.642055262590953e-05*self.usr_np.log(temperature)**3 + -1.1226461869891016e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003946177740077637 + 0.0018819247443659002*self.usr_np.log(temperature) + -0.0002969557865709345*self.usr_np.log(temperature)**2 + 2.136793057888101e-05*self.usr_np.log(temperature)**3 + -5.378427645315207e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00397555681595052 + 0.0018959355704074384*self.usr_np.log(temperature) + -0.00029916660604129713*self.usr_np.log(temperature)**2 + 2.1527013644734738e-05*self.usr_np.log(temperature)**3 + -5.418469742779446e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004917696613028348 + 0.002572902927251776*self.usr_np.log(temperature) + -0.0004578827086113135*self.usr_np.log(temperature)**2 + 3.760024478780247e-05*self.usr_np.log(temperature)**3 + -1.1294483462155447e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004935536959887559 + 0.0025778937349184034*self.usr_np.log(temperature) + -0.00045814572945765305*self.usr_np.log(temperature)**2 + 3.756564508507363e-05*self.usr_np.log(temperature)**3 + -1.1266489042325687e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.005028781848268768 + 0.002626596726209046*self.usr_np.log(temperature) + -0.0004668012714490404*self.usr_np.log(temperature)**2 + 3.8275355986134995e-05*self.usr_np.log(temperature)**3 + -1.1479341771781857e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012935882587990926 + 0.000206485590212507*self.usr_np.log(temperature) + 8.127255578359236e-05*self.usr_np.log(temperature)**2 + -1.5549994312684183e-05*self.usr_np.log(temperature)**3 + 7.860896416815809e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0017229716110997626 + 0.0005606505163163001*self.usr_np.log(temperature) + -1.678191791768496e-05*self.usr_np.log(temperature)**2 + -4.928350697418701e-06*self.usr_np.log(temperature)**3 + 3.73421052188494e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0042515394211634595 + 0.0023040456623122873*self.usr_np.log(temperature) + -0.0004220610581434094*self.usr_np.log(temperature)**2 + 3.5759098743335415e-05*self.usr_np.log(temperature)**3 + -1.1097834719993191e-06*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.006438480744054324 + -0.004075644460143526*self.usr_np.log(temperature) + 0.0009444968170159887*self.usr_np.log(temperature)**2 + -9.272696517567768e-05*self.usr_np.log(temperature)**3 + 3.348930311617664e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00977354948666333 + 0.004784293804168399*self.usr_np.log(temperature) + -0.0007867141241975951*self.usr_np.log(temperature)**2 + 5.937682201046671e-05*self.usr_np.log(temperature)**3 + -1.6059026895952696e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.015040351770526808 + -0.011140503424520628*self.usr_np.log(temperature) + 0.002909397659221499*self.usr_np.log(temperature)**2 + -0.00030550481423061117*self.usr_np.log(temperature)**3 + 1.161846056260181e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005530161251171008 + -0.0007124959325135233*self.usr_np.log(temperature) + 0.00023979836465243525*self.usr_np.log(temperature)**2 + -2.799627830511098e-05*self.usr_np.log(temperature)**3 + 1.1425694337218312e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013272888250194415 + 0.00021186495359184742*self.usr_np.log(temperature) + 8.338986871456491e-05*self.usr_np.log(temperature)**2 + -1.5955102823409383e-05*self.usr_np.log(temperature)**3 + 8.065688520040438e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.016318584352472888 + -0.00952456786178405*self.usr_np.log(temperature) + 0.002046263146573973*self.usr_np.log(temperature)**2 + -0.0001892082471856223*self.usr_np.log(temperature)**3 + 6.47118939783779e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(7.686133458206035e-05 + -0.0004241726082550217*self.usr_np.log(temperature) + 0.00017621054027595732*self.usr_np.log(temperature)**2 + -2.1926515410048614e-05*self.usr_np.log(temperature)**3 + 9.287141121984556e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005546414281250702 + -0.0034992148409895354*self.usr_np.log(temperature) + 0.0008085594716621666*self.usr_np.log(temperature)**2 + -7.922866698713425e-05*self.usr_np.log(temperature)**3 + 2.856844649427854e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013016871723122573 + 0.00020777835777351282*self.usr_np.log(temperature) + 8.17813880145306e-05*self.usr_np.log(temperature)**2 + -1.5647349911059903e-05*self.usr_np.log(temperature)**3 + 7.910112015170125e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.01033607908884984 + -0.006093109491599892*self.usr_np.log(temperature) + 0.0013222168553829721*self.usr_np.log(temperature)**2 + -0.00012342381551930524*self.usr_np.log(temperature)**3 + 4.260648659501009e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005489853851721734 + -0.0007073028003655597*self.usr_np.log(temperature) + 0.00023805055874938583*self.usr_np.log(temperature)**2 + -2.77922232834713e-05*self.usr_np.log(temperature)**3 + 1.1342416471499518e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005451663421819347 + -0.0007023824147413284*self.usr_np.log(temperature) + 0.00023639454869835077*self.usr_np.log(temperature)**2 + -2.7598885358401568e-05*self.usr_np.log(temperature)**3 + 1.1263512411061667e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006867405240116581 + -0.004284003624698518*self.usr_np.log(temperature) + 0.0009801505509150713*self.usr_np.log(temperature)**2 + -9.5401003989961e-05*self.usr_np.log(temperature)**3 + 3.420616607979047e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006935865673587619 + -0.0043267104018431205*self.usr_np.log(temperature) + 0.0009899215676588816*self.usr_np.log(temperature)**2 + -9.635204646655486e-05*self.usr_np.log(temperature)**3 + 3.4547163716535117e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0025363415819408303 + -0.0019106114325007865*self.usr_np.log(temperature) + 0.0005045715996008693*self.usr_np.log(temperature)**2 + -5.327822517305788e-05*self.usr_np.log(temperature)**3 + 2.0343078015367618e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002693736277101405 + -0.0020041538091244665*self.usr_np.log(temperature) + 0.0005249537070037087*self.usr_np.log(temperature)**2 + -5.5205411594227855e-05*self.usr_np.log(temperature)**3 + 2.1017363150401196e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002756753942215406 + -0.002051039279927085*self.usr_np.log(temperature) + 0.0005372345517119105*self.usr_np.log(temperature)**2 + -5.649689516273991e-05*self.usr_np.log(temperature)**3 + 2.150904645422773e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.010248964092759539 + -0.006041755278365907*self.usr_np.log(temperature) + 0.0013110728891657306*self.usr_np.log(temperature)**2 + -0.00012238356949237798*self.usr_np.log(temperature)**3 + 4.224738873196512e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008172303080261059 + -0.0048644968206454755*self.usr_np.log(temperature) + 0.0010657386089626213*self.usr_np.log(temperature)**2 + -0.00010033982591704349*self.usr_np.log(temperature)**3 + 3.4923315704406002e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(4.8753187102223985e-05 + -0.00041057344539902415*self.usr_np.log(temperature) + 0.00017396553296733315*self.usr_np.log(temperature)**2 + -2.175852594807885e-05*self.usr_np.log(temperature)**3 + 9.242122812448087e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.002384130934784019 + 0.0010586917720735696*self.usr_np.log(temperature) + -0.00014589919503240056*self.usr_np.log(temperature)**2 + 8.662224631578881e-06*self.usr_np.log(temperature)**3 + -1.4334817357891598e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008071230238483005 + 0.004636586049734314*self.usr_np.log(temperature) + -0.000875171655856762*self.usr_np.log(temperature)**2 + 7.69879264644244e-05*self.usr_np.log(temperature)**3 + -2.471029653914118e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.01977995988607853 + 0.009979906899031814*self.usr_np.log(temperature) + -0.0017079993934121143*self.usr_np.log(temperature)**2 + 0.00013463757127454265*self.usr_np.log(temperature)**3 + -3.856105176557561e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0031033213032470603 + 0.0016207145310248657*self.usr_np.log(temperature) + -0.0002880080052590736*self.usr_np.log(temperature)**2 + 2.3612779882855422e-05*self.usr_np.log(temperature)**3 + -7.081063563969972e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0045390078886350365 + 0.0024385762353815264*self.usr_np.log(temperature) + -0.0004439849037904978*self.usr_np.log(temperature)**2 + 3.735872857173391e-05*self.usr_np.log(temperature)**3 + -1.1515650136492746e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0021021151307109177 + -0.0018281498403585916*self.usr_np.log(temperature) + 0.0005252030760225731*self.usr_np.log(temperature)**2 + -5.7658032199614234e-05*self.usr_np.log(temperature)**3 + 2.2618777599134024e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002988144210836108 + 0.001573431809808491*self.usr_np.log(temperature) + -0.00028138859847361993*self.usr_np.log(temperature)**2 + 2.3233110056852574e-05*self.usr_np.log(temperature)**3 + -7.017763772858793e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019365240276617492 + 0.0008505385381046079*self.usr_np.log(temperature) + -0.0001144977802880381*self.usr_np.log(temperature)**2 + 6.529523579562417e-06*self.usr_np.log(temperature)**3 + -9.485233755953191e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004447487715930472 + 0.0023894071385897114*self.usr_np.log(temperature) + -0.00043503282085309585*self.usr_np.log(temperature)**2 + 3.660546323826793e-05*self.usr_np.log(temperature)**3 + -1.128345968538034e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005489853851721734 + -0.0007073028003655597*self.usr_np.log(temperature) + 0.00023805055874938583*self.usr_np.log(temperature)**2 + -2.77922232834713e-05*self.usr_np.log(temperature)**3 + 1.1342416471499518e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0030791660999914964 + 0.0016080994373577782*self.usr_np.log(temperature) + -0.0002857662483706914*self.usr_np.log(temperature)**2 + 2.342898599171364e-05*self.usr_np.log(temperature)**3 + -7.025946960476384e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003056268300626027 + 0.0015961410248910362*self.usr_np.log(temperature) + -0.0002836411865816468*self.usr_np.log(temperature)**2 + 2.3254759528043535e-05*self.usr_np.log(temperature)**3 + -6.973699462723649e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00200346887544886 + 0.0008390947825065571*self.usr_np.log(temperature) + -0.00010093806235309067*self.usr_np.log(temperature)**2 + 4.5445586554078024e-06*self.usr_np.log(temperature)**3 + -3.952196937890613e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020246709807785757 + 0.0008479746688751682*self.usr_np.log(temperature) + -0.00010200625934605736*self.usr_np.log(temperature)**2 + 4.592652345442668e-06*self.usr_np.log(temperature)**3 + -3.994021838728305e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003480921649954134 + 0.001761603892477904*self.usr_np.log(temperature) + -0.00030249020233090657*self.usr_np.log(temperature)**2 + 2.3930033798577485e-05*self.usr_np.log(temperature)**3 + -6.883274006729954e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003507746818162366 + 0.0017714537482529911*self.usr_np.log(temperature) + -0.00030350691888477024*self.usr_np.log(temperature)**2 + 2.3952789396401684e-05*self.usr_np.log(temperature)**3 + -6.870164061048884e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003593295042058037 + 0.0018146566159995172*self.usr_np.log(temperature) + -0.0003109089576278631*self.usr_np.log(temperature)**2 + 2.4536958863645677e-05*self.usr_np.log(temperature)**3 + -7.037716157498495e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005440595516918467 + -0.0007009564459727446*self.usr_np.log(temperature) + 0.00023591462318127142*self.usr_np.log(temperature)**2 + -2.7542854416062612e-05*self.usr_np.log(temperature)**3 + 1.1240645356603968e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00010913248123696911 + -0.0002495302622660443*self.usr_np.log(temperature) + 0.00012414899888223493*self.usr_np.log(temperature)**2 + -1.6117646198563468e-05*self.usr_np.log(temperature)**3 + 6.983701102517874e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0030083773760878328 + 0.0015848924053342296*self.usr_np.log(temperature) + -0.0002835397387057684*self.usr_np.log(temperature)**2 + 2.342025431999138e-05*self.usr_np.log(temperature)**3 + -7.077146598264797e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.0023678444694532597 + 0.0010514596412408478*self.usr_np.log(temperature) + -0.00014490252905763025*self.usr_np.log(temperature)**2 + 8.603051278662357e-06*self.usr_np.log(temperature)**3 + -1.423689341304826e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0080643429624977 + 0.0046326295961572755*self.usr_np.log(temperature) + -0.000874424861557278*self.usr_np.log(temperature)**2 + 7.692223175841828e-05*self.usr_np.log(temperature)**3 + -2.468921095154256e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.019771272354030468 + 0.009975523636330735*self.usr_np.log(temperature) + -0.0017072492250993386*self.usr_np.log(temperature)**2 + 0.0001345784372733676*self.usr_np.log(temperature)**3 + -3.854411541408047e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00308060305221495 + 0.0016088498879638456*self.usr_np.log(temperature) + -0.00028589960670053025*self.usr_np.log(temperature)**2 + 2.3439919579816093e-05*self.usr_np.log(temperature)**3 + -7.029225754125662e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00451699685165708 + 0.0024267508336622045*self.usr_np.log(temperature) + -0.00044183188525111184*self.usr_np.log(temperature)**2 + 3.717756467509114e-05*self.usr_np.log(temperature)**3 + -1.145980722826736e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0020910881859506547 + -0.0018185600195946322*self.usr_np.log(temperature) + 0.0005224480483680041*self.usr_np.log(temperature)**2 + -5.7355578766817345e-05*self.usr_np.log(temperature)**3 + 2.250012757465988e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002967748990359258 + 0.0015626925394120344*self.usr_np.log(temperature) + -0.00027946801429192295*self.usr_np.log(temperature)**2 + 2.3074535246426228e-05*self.usr_np.log(temperature)**3 + -6.969864866646174e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0019200571100619333 + 0.0008433061217638981*self.usr_np.log(temperature) + -0.00011352416700663822*self.usr_np.log(temperature)**2 + 6.474000836142679e-06*self.usr_np.log(temperature)**3 + -9.404577611085978e-08*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0044250214607718975 + 0.002377337171480393*self.usr_np.log(temperature) + -0.0004328352749625389*self.usr_np.log(temperature)**2 + 3.642055262590953e-05*self.usr_np.log(temperature)**3 + -1.1226461869891016e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005451663421819347 + -0.0007023824147413284*self.usr_np.log(temperature) + 0.00023639454869835077*self.usr_np.log(temperature)**2 + -2.7598885358401568e-05*self.usr_np.log(temperature)**3 + 1.1263512411061667e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003056268300626027 + 0.0015961410248910362*self.usr_np.log(temperature) + -0.0002836411865816468*self.usr_np.log(temperature)**2 + 2.3254759528043535e-05*self.usr_np.log(temperature)**3 + -6.973699462723649e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003033197649291935 + 0.0015840923402075633*self.usr_np.log(temperature) + -0.0002815000830285195*self.usr_np.log(temperature)**2 + 2.3079217855679582e-05*self.usr_np.log(temperature)**3 + -6.921057556687821e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001990053976076507 + 0.0008334763413032353*self.usr_np.log(temperature) + -0.00010026219762180664*self.usr_np.log(temperature)**2 + 4.5141290349140466e-06*self.usr_np.log(temperature)**3 + -3.925733663793291e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020113974926177277 + 0.000842415453656832*self.usr_np.log(temperature) + -0.00010133751914637297*self.usr_np.log(temperature)**2 + 4.5625434946018825e-06*self.usr_np.log(temperature)**3 + -3.9678375335770675e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003464010281427157 + 0.0017530454888074214*self.usr_np.log(temperature) + -0.0003010206135832654*self.usr_np.log(temperature)**2 + 2.3813774468081287e-05*self.usr_np.log(temperature)**3 + -6.849832983014968e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034914424881461893 + 0.00176321986820995*self.usr_np.log(temperature) + -0.00030209619079478765*self.usr_np.log(temperature)**2 + 2.3841454626951785e-05*self.usr_np.log(temperature)**3 + -6.83823090623605e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003577380629313439 + 0.0018066196488033253*self.usr_np.log(temperature) + -0.00030953196703256176*self.usr_np.log(temperature)**2 + 2.4428286659870273e-05*self.usr_np.log(temperature)**3 + -7.006546682551128e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005402056861210452 + -0.0006959911955582747*self.usr_np.log(temperature) + 0.00023424351338927375*self.usr_np.log(temperature)**2 + -2.7347753607580745e-05*self.usr_np.log(temperature)**3 + 1.1161021837420728e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00010821335037069786 + -0.0002474286792740311*self.usr_np.log(temperature) + 0.00012310339654881674*self.usr_np.log(temperature)**2 + -1.5981900855261737e-05*self.usr_np.log(temperature)**3 + 6.924883276888655e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002987842465018575 + 0.001574074073546689*self.usr_np.log(temperature) + -0.0002816043221704563*self.usr_np.log(temperature)**2 + 2.3260389788567543e-05*self.usr_np.log(temperature)**3 + -7.028838637592768e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.0015594508186797798 + -0.0012998474708566365*self.usr_np.log(temperature) + 0.0003649721960766366*self.usr_np.log(temperature)**2 + -3.966748700983098e-05*self.usr_np.log(temperature)**3 + 1.5456241774521608e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009640489393709767 + 0.005096817921620048*self.usr_np.log(temperature) + -0.0009143230529377865*self.usr_np.log(temperature)**2 + 7.575173438707875e-05*self.usr_np.log(temperature)**3 + -2.2962124407539474e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.006051814325170231 + 0.0013376487944893687*self.usr_np.log(temperature) + 0.00021740857354908622*self.usr_np.log(temperature)**2 + -5.219935837844324e-05*self.usr_np.log(temperature)**3 + 2.800675761731988e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002017631168820656 + 0.0008450262479838664*self.usr_np.log(temperature) + -0.0001016515820217343*self.usr_np.log(temperature)**2 + 4.576683622901494e-06*self.usr_np.log(temperature)**3 + -3.980134558767173e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004021774263552851 + 0.00191797658426724*self.usr_np.log(temperature) + -0.0003026445382098667*self.usr_np.log(temperature)**2 + 2.1777273839997734e-05*self.usr_np.log(temperature)**3 + -5.481461633717201e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.01189940028321595 + -0.0073057252936933595*self.usr_np.log(temperature) + 0.0016478162863818632*self.usr_np.log(temperature)**2 + -0.00015877984522855087*self.usr_np.log(temperature)**3 + 5.644006452870465e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002191767731787972 + 0.0009659135868747959*self.usr_np.log(temperature) + -0.00013098858829278736*self.usr_np.log(temperature)**2 + 7.5669919933838616e-06*self.usr_np.log(temperature)**3 + -1.1489628590487276e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014485452347251365 + -0.001173367441385316*self.usr_np.log(temperature) + 0.0003241304304144164*self.usr_np.log(temperature)**2 + -3.496961698497567e-05*self.usr_np.log(temperature)**3 + 1.3556957815872554e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003946177740077637 + 0.0018819247443659002*self.usr_np.log(temperature) + -0.0002969557865709345*self.usr_np.log(temperature)**2 + 2.136793057888101e-05*self.usr_np.log(temperature)**3 + -5.378427645315207e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006867405240116581 + -0.004284003624698518*self.usr_np.log(temperature) + 0.0009801505509150713*self.usr_np.log(temperature)**2 + -9.5401003989961e-05*self.usr_np.log(temperature)**3 + 3.420616607979047e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00200346887544886 + 0.0008390947825065571*self.usr_np.log(temperature) + -0.00010093806235309067*self.usr_np.log(temperature)**2 + 4.5445586554078024e-06*self.usr_np.log(temperature)**3 + -3.952196937890613e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001990053976076507 + 0.0008334763413032353*self.usr_np.log(temperature) + -0.00010026219762180664*self.usr_np.log(temperature)**2 + 4.5141290349140466e-06*self.usr_np.log(temperature)**3 + -3.925733663793291e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002151166349571511 + -0.0016210000557478085*self.usr_np.log(temperature) + 0.0004281815626090811*self.usr_np.log(temperature)**2 + -4.521698032317456e-05*self.usr_np.log(temperature)**3 + 1.7266405882715566e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0021718859043981516 + -0.0016366131669960525*self.usr_np.log(temperature) + 0.00043230571198698534*self.usr_np.log(temperature)**2 + -4.5652500199683576e-05*self.usr_np.log(temperature)**3 + 1.7432712055840328e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012257858853137425 + 0.000310860354467676*self.usr_np.log(temperature) + 2.6580971311127462e-05*self.usr_np.log(temperature)**2 + -8.370770356358219e-06*self.usr_np.log(temperature)**3 + 4.7334086075072046e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011585659619077816 + 0.00026718047975990807*self.usr_np.log(temperature) + 3.676731149202827e-05*self.usr_np.log(temperature)**2 + -9.380765632125812e-06*self.usr_np.log(temperature)**3 + 5.100450325829072e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011850188793552693 + 0.00027328086886272416*self.usr_np.log(temperature) + 3.7606799868375715e-05*self.usr_np.log(temperature)**2 + -9.594951640822083e-06*self.usr_np.log(temperature)**3 + 5.216906182460238e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006811569301050317 + -0.004249172220840861*self.usr_np.log(temperature) + 0.0009721813653882581*self.usr_np.log(temperature)**2 + -9.462533917035548e-05*self.usr_np.log(temperature)**3 + 3.3928050352152955e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0049084394224768214 + -0.003119357799625018*self.usr_np.log(temperature) + 0.0007253417306728563*self.usr_np.log(temperature)**2 + -7.13686002963578e-05*self.usr_np.log(temperature)**3 + 2.5822577007530742e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002222383738045446 + 0.000982150714733322*self.usr_np.log(temperature) + -0.00013399180799389794*self.usr_np.log(temperature)**2 + 7.820951350022455e-06*self.usr_np.log(temperature)**3 + -1.228222738921866e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.001574744548168195 + -0.0013125952378010661*self.usr_np.log(temperature) + 0.0003685515241142586*self.usr_np.log(temperature)**2 + -4.005651102307477e-05*self.usr_np.log(temperature)**3 + 1.5607823073417749e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00965342526681872 + 0.0051036569717128125*self.usr_np.log(temperature) + -0.0009155499166895052*self.usr_np.log(temperature)**2 + 7.585338014206006e-05*self.usr_np.log(temperature)**3 + -2.2992935615877252e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0060560218171541325 + 0.0013385787877336517*self.usr_np.log(temperature) + 0.00021755972572349284*self.usr_np.log(temperature)**2 + -5.2235649708333666e-05*self.usr_np.log(temperature)**3 + 2.8026229168389956e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020386859932325406 + 0.0008538444500188671*self.usr_np.log(temperature) + -0.00010271235876112224*self.usr_np.log(temperature)**2 + 4.624443229217549e-06*self.usr_np.log(temperature)**3 + -4.021668931496637e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004050605074236105 + 0.0019317259436692868*self.usr_np.log(temperature) + -0.00030481409990267076*self.usr_np.log(temperature)**2 + 2.193338813615908e-05*self.usr_np.log(temperature)**3 + -5.520756475226575e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.011991130138128952 + -0.007362043520263369*self.usr_np.log(temperature) + 0.0016605189390588879*self.usr_np.log(temperature)**2 + -0.000160003844070354*self.usr_np.log(temperature)**3 + 5.6875148550325925e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002213246191569245 + 0.0009753791592642245*self.usr_np.log(temperature) + -0.00013227222482223536*self.usr_np.log(temperature)**2 + 7.641145531975333e-06*self.usr_np.log(temperature)**3 + -1.1602222421260787e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.001465808447899401 + -0.0011873511898985482*self.usr_np.log(temperature) + 0.0003279932940533267*self.usr_np.log(temperature)**2 + -3.5386371628300103e-05*self.usr_np.log(temperature)**3 + 1.3718524501648557e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00397555681595052 + 0.0018959355704074384*self.usr_np.log(temperature) + -0.00029916660604129713*self.usr_np.log(temperature)**2 + 2.1527013644734738e-05*self.usr_np.log(temperature)**3 + -5.418469742779446e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006935865673587619 + -0.0043267104018431205*self.usr_np.log(temperature) + 0.0009899215676588816*self.usr_np.log(temperature)**2 + -9.635204646655486e-05*self.usr_np.log(temperature)**3 + 3.4547163716535117e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020246709807785757 + 0.0008479746688751682*self.usr_np.log(temperature) + -0.00010200625934605736*self.usr_np.log(temperature)**2 + 4.592652345442668e-06*self.usr_np.log(temperature)**3 + -3.994021838728305e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0020113974926177277 + 0.000842415453656832*self.usr_np.log(temperature) + -0.00010133751914637297*self.usr_np.log(temperature)**2 + 4.5625434946018825e-06*self.usr_np.log(temperature)**3 + -3.9678375335770675e-09*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0021718859043981516 + -0.0016366131669960525*self.usr_np.log(temperature) + 0.00043230571198698534*self.usr_np.log(temperature)**2 + -4.5652500199683576e-05*self.usr_np.log(temperature)**3 + 1.7432712055840328e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0021924096560376628 + -0.0016520787317868104*self.usr_np.log(temperature) + 0.00043639088747827803*self.usr_np.log(temperature)**2 + -4.6083904342090185e-05*self.usr_np.log(temperature)**3 + 1.7597446608417355e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012345882661569556 + 0.00031309264581982227*self.usr_np.log(temperature) + 2.67718495341784e-05*self.usr_np.log(temperature)**2 + -8.430880942863068e-06*self.usr_np.log(temperature)**3 + 4.76739926255705e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011665508172007935 + 0.0002690218919352896*self.usr_np.log(temperature) + 3.702071239566295e-05*self.usr_np.log(temperature)**2 + -9.445418020129005e-06*self.usr_np.log(temperature)**3 + 5.135602711721808e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001192826670344025 + 0.00027508144769643655*self.usr_np.log(temperature) + 3.785458160025808e-05*self.usr_np.log(temperature)**2 + -9.658170360704564e-06*self.usr_np.log(temperature)**3 + 5.251279063458615e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006880585313219007 + -0.004292225577382395*self.usr_np.log(temperature) + 0.0009820316771135386*self.usr_np.log(temperature)**2 + -9.558409966622879e-05*self.usr_np.log(temperature)**3 + 3.427181529572004e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.004966444795481125 + -0.003156220740600933*self.usr_np.log(temperature) + 0.0007339134403400959*self.usr_np.log(temperature)**2 + -7.221199713297118e-05*self.usr_np.log(temperature)**3 + 2.6127734733355013e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0022441637429302572 + 0.0009917760764565184*self.usr_np.log(temperature) + -0.00013530496655584436*self.usr_np.log(temperature)**2 + 7.897598940539772e-06*self.usr_np.log(temperature)**3 + -1.2402596778391278e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.001782713440595603 + 0.00062584965591302*self.usr_np.log(temperature) + -3.743315541688863e-05*self.usr_np.log(temperature)**2 + -2.561130795708914e-06*self.usr_np.log(temperature)**3 + 2.7787007159379337e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00848200740606869 + 0.004753196449428737*self.usr_np.log(temperature) + -0.0008884838778255998*self.usr_np.log(temperature)**2 + 7.709224617644328e-05*self.usr_np.log(temperature)**3 + -2.4468226705422157e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016798072125970478 + 0.008092001051007745*self.usr_np.log(temperature) + -0.0012988732120842422*self.usr_np.log(temperature)**2 + 9.537156380350812e-05*self.usr_np.log(temperature)**3 + -2.4782380689475866e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034988088747142337 + 0.001770656151599679*self.usr_np.log(temperature) + -0.00030404459245461467*self.usr_np.log(temperature)**2 + 2.405300177538219e-05*self.usr_np.log(temperature)**3 + -6.918644716404808e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0049923295405593674 + 0.0026119503294860596*self.usr_np.log(temperature) + -0.0004648317194388052*self.usr_np.log(temperature)**2 + 3.8170881117230436e-05*self.usr_np.log(temperature)**3 + -1.1465893053293108e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.00860546855507325 + -0.0055958227697099055*self.usr_np.log(temperature) + 0.0013264339989168042*self.usr_np.log(temperature)**2 + -0.0001320757277752311*self.usr_np.log(temperature)**3 + 4.824811077733519e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00337880969417297 + 0.0017262012335968909*self.usr_np.log(temperature) + -0.0002992048717117942*self.usr_np.log(temperature)**2 + 2.3909070595076803e-05*self.usr_np.log(temperature)**3 + -6.956797142913897e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0014504678947645185 + 0.0004848042116954979*self.usr_np.log(temperature) + -1.9755549184121244e-05*self.usr_np.log(temperature)**2 + -3.4371003946536045e-06*self.usr_np.log(temperature)**3 + 2.8393051616381405e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004917696613028348 + 0.002572902927251776*self.usr_np.log(temperature) + -0.0004578827086113135*self.usr_np.log(temperature)**2 + 3.760024478780247e-05*self.usr_np.log(temperature)**3 + -1.1294483462155447e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0025363415819408303 + -0.0019106114325007865*self.usr_np.log(temperature) + 0.0005045715996008693*self.usr_np.log(temperature)**2 + -5.327822517305788e-05*self.usr_np.log(temperature)**3 + 2.0343078015367618e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003480921649954134 + 0.001761603892477904*self.usr_np.log(temperature) + -0.00030249020233090657*self.usr_np.log(temperature)**2 + 2.3930033798577485e-05*self.usr_np.log(temperature)**3 + -6.883274006729954e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003464010281427157 + 0.0017530454888074214*self.usr_np.log(temperature) + -0.0003010206135832654*self.usr_np.log(temperature)**2 + 2.3813774468081287e-05*self.usr_np.log(temperature)**3 + -6.849832983014968e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012257858853137425 + 0.000310860354467676*self.usr_np.log(temperature) + 2.6580971311127462e-05*self.usr_np.log(temperature)**2 + -8.370770356358219e-06*self.usr_np.log(temperature)**3 + 4.7334086075072046e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012345882661569556 + 0.00031309264581982227*self.usr_np.log(temperature) + 2.67718495341784e-05*self.usr_np.log(temperature)**2 + -8.430880942863068e-06*self.usr_np.log(temperature)**3 + 4.76739926255705e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0035096650172919334 + 0.0017007413573665484*self.usr_np.log(temperature) + -0.0002755874139063913*self.usr_np.log(temperature)**2 + 2.0457220798799553e-05*self.usr_np.log(temperature)**3 + -5.403457160370338e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003479586966673144 + 0.0016790313688376621*self.usr_np.log(temperature) + -0.00027024415432407375*self.usr_np.log(temperature)**2 + 1.990599059506276e-05*self.usr_np.log(temperature)**3 + -5.197483075979193e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003543538829530304 + 0.001709890544036946*self.usr_np.log(temperature) + -0.0002752110131085501*self.usr_np.log(temperature)**2 + 2.0271845850960684e-05*self.usr_np.log(temperature)**3 + -5.29300841500847e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0025211385886596037 + -0.00189915910565373*self.usr_np.log(temperature) + 0.0005015471652336446*self.usr_np.log(temperature)**2 + -5.2958872091360285e-05*self.usr_np.log(temperature)**3 + 2.0221140307511386e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0013146332092551513 + -0.0011379268922288184*self.usr_np.log(temperature) + 0.0003261054613349652*self.usr_np.log(temperature)**2 + -3.5762541380361196e-05*self.usr_np.log(temperature)**3 + 1.4019363250614273e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034084478434894044 + 0.001742645528887295*self.usr_np.log(temperature) + -0.00030233049879963047*self.usr_np.log(temperature)**2 + 2.418148752996495e-05*self.usr_np.log(temperature)**3 + -7.044076835923595e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.0017076114460650865 + 0.0005772926994616816*self.usr_np.log(temperature) + -2.6126773750191255e-05*self.usr_np.log(temperature)**2 + -3.6836340526536325e-06*self.usr_np.log(temperature)**3 + 3.1875778203710526e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008386108668627197 + 0.004691226199159523*self.usr_np.log(temperature) + -0.0008755134626566181*self.usr_np.log(temperature)**2 + 7.584650510536051e-05*self.usr_np.log(temperature)**3 + -2.4032773646547836e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016287567515301755 + 0.007806467685088397*self.usr_np.log(temperature) + -0.0012424669191316313*self.usr_np.log(temperature)**2 + 9.032790860746924e-05*self.usr_np.log(temperature)**3 + -2.3112731718629754e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0035249956962490345 + 0.0017801646362730294*self.usr_np.log(temperature) + -0.0003049993737600602*self.usr_np.log(temperature)**2 + 2.4070574049985574e-05*self.usr_np.log(temperature)**3 + -6.903947178341752e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0050079607334877424 + 0.002615721593111355*self.usr_np.log(temperature) + -0.0004648685324387309*self.usr_np.log(temperature)**2 + 3.811688111005587e-05*self.usr_np.log(temperature)**3 + -1.1431812827430111e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0056396994924134535 + -0.003904865981311113*self.usr_np.log(temperature) + 0.0009722869115203534*self.usr_np.log(temperature)**2 + -9.958695824611479e-05*self.usr_np.log(temperature)**3 + 3.718491947888623e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0033907606456903727 + 0.0017282716043852636*self.usr_np.log(temperature) + -0.00029871362007977955*self.usr_np.log(temperature)**2 + 2.3800048784658837e-05*self.usr_np.log(temperature)**3 + -6.900448634715758e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001386217724871042 + 0.000441937924803899*self.usr_np.log(temperature) + -9.486588448659946e-06*self.usr_np.log(temperature)**2 + -4.47325958326669e-06*self.usr_np.log(temperature)**3 + 3.221751335488127e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004935536959887559 + 0.0025778937349184034*self.usr_np.log(temperature) + -0.00045814572945765305*self.usr_np.log(temperature)**2 + 3.756564508507363e-05*self.usr_np.log(temperature)**3 + -1.1266489042325687e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002693736277101405 + -0.0020041538091244665*self.usr_np.log(temperature) + 0.0005249537070037087*self.usr_np.log(temperature)**2 + -5.5205411594227855e-05*self.usr_np.log(temperature)**3 + 2.1017363150401196e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003507746818162366 + 0.0017714537482529911*self.usr_np.log(temperature) + -0.00030350691888477024*self.usr_np.log(temperature)**2 + 2.3952789396401684e-05*self.usr_np.log(temperature)**3 + -6.870164061048884e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034914424881461893 + 0.00176321986820995*self.usr_np.log(temperature) + -0.00030209619079478765*self.usr_np.log(temperature)**2 + 2.3841454626951785e-05*self.usr_np.log(temperature)**3 + -6.83823090623605e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011585659619077816 + 0.00026718047975990807*self.usr_np.log(temperature) + 3.676731149202827e-05*self.usr_np.log(temperature)**2 + -9.380765632125812e-06*self.usr_np.log(temperature)**3 + 5.100450325829072e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011665508172007935 + 0.0002690218919352896*self.usr_np.log(temperature) + 3.702071239566295e-05*self.usr_np.log(temperature)**2 + -9.445418020129005e-06*self.usr_np.log(temperature)**3 + 5.135602711721808e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003479586966673144 + 0.0016790313688376621*self.usr_np.log(temperature) + -0.00027024415432407375*self.usr_np.log(temperature)**2 + 1.990599059506276e-05*self.usr_np.log(temperature)**3 + -5.197483075979193e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034409280361573456 + 0.0016525325006103062*self.usr_np.log(temperature) + -0.00026391614213234593*self.usr_np.log(temperature)**2 + 1.9264329242272498e-05*self.usr_np.log(temperature)**3 + -4.960500028504701e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003502199992318464 + 0.0016819588349818596*self.usr_np.log(temperature) + -0.00026861564706969854*self.usr_np.log(temperature)**2 + 1.9607365517641477e-05*self.usr_np.log(temperature)**3 + -5.048830716425196e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0026782600376945324 + -0.0019926394064639346*self.usr_np.log(temperature) + 0.0005219377067682077*self.usr_np.log(temperature)**2 + -5.4888241656870784e-05*self.usr_np.log(temperature)**3 + 2.0896612746387645e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014478119698883136 + -0.001218916501709094*self.usr_np.log(temperature) + 0.000344147734152096*self.usr_np.log(temperature)**2 + -3.74962671174019e-05*self.usr_np.log(temperature)**3 + 1.4634693083415085e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034202879289978445 + 0.0017446222817605324*self.usr_np.log(temperature) + -0.0003018140459047648*self.usr_np.log(temperature)**2 + 2.4069623644622516e-05*self.usr_np.log(temperature)**3 + -6.986581563814774e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.001747101727687932 + 0.0005906431904837844*self.usr_np.log(temperature) + -2.6730982427396186e-05*self.usr_np.log(temperature)**2 + -3.7688219017432896e-06*self.usr_np.log(temperature)**3 + 3.2612938557882316e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008421659301319497 + 0.004711113379980394*self.usr_np.log(temperature) + -0.0008792249644675684*self.usr_np.log(temperature)**2 + 7.616803578759297e-05*self.usr_np.log(temperature)**3 + -2.4134654070594882e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.016324296381304906 + 0.00782407146203104*self.usr_np.log(temperature) + -0.0012452687126407187*self.usr_np.log(temperature)**2 + 9.053160026632847e-05*self.usr_np.log(temperature)**3 + -2.3164851497901466e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003610135202136788 + 0.001823161096579385*self.usr_np.log(temperature) + -0.0003123660482802859*self.usr_np.log(temperature)**2 + 2.4651952570085363e-05*self.usr_np.log(temperature)**3 + -7.070698772436281e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0050998816165755525 + 0.002663733039595207*self.usr_np.log(temperature) + -0.00047340117242827546*self.usr_np.log(temperature)**2 + 3.8816514665215795e-05*self.usr_np.log(temperature)**3 + -1.1641643212742693e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005749093308581439 + -0.003980609058033709*self.usr_np.log(temperature) + 0.0009911464581709095*self.usr_np.log(temperature)**2 + -0.00010151865645434024*self.usr_np.log(temperature)**3 + 3.7906199088147135e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034691330221015477 + 0.001768218025519275*self.usr_np.log(temperature) + -0.0003056179400000115*self.usr_np.log(temperature)**2 + 2.4350151424359833e-05*self.usr_np.log(temperature)**3 + -7.059942215726247e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0014228581820813974 + 0.0004536192121883492*self.usr_np.log(temperature) + -9.737337613874782e-06*self.usr_np.log(temperature)**2 + -4.591496620287985e-06*self.usr_np.log(temperature)**3 + 3.30690855132615e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.005028781848268768 + 0.002626596726209046*self.usr_np.log(temperature) + -0.0004668012714490404*self.usr_np.log(temperature)**2 + 3.8275355986134995e-05*self.usr_np.log(temperature)**3 + -1.1479341771781857e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002756753942215406 + -0.002051039279927085*self.usr_np.log(temperature) + 0.0005372345517119105*self.usr_np.log(temperature)**2 + -5.649689516273991e-05*self.usr_np.log(temperature)**3 + 2.150904645422773e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003593295042058037 + 0.0018146566159995172*self.usr_np.log(temperature) + -0.0003109089576278631*self.usr_np.log(temperature)**2 + 2.4536958863645677e-05*self.usr_np.log(temperature)**3 + -7.037716157498495e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003577380629313439 + 0.0018066196488033253*self.usr_np.log(temperature) + -0.00030953196703256176*self.usr_np.log(temperature)**2 + 2.4428286659870273e-05*self.usr_np.log(temperature)**3 + -7.006546682551128e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0011850188793552693 + 0.00027328086886272416*self.usr_np.log(temperature) + 3.7606799868375715e-05*self.usr_np.log(temperature)**2 + -9.594951640822083e-06*self.usr_np.log(temperature)**3 + 5.216906182460238e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001192826670344025 + 0.00027508144769643655*self.usr_np.log(temperature) + 3.785458160025808e-05*self.usr_np.log(temperature)**2 + -9.658170360704564e-06*self.usr_np.log(temperature)**3 + 5.251279063458615e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003543538829530304 + 0.001709890544036946*self.usr_np.log(temperature) + -0.0002752110131085501*self.usr_np.log(temperature)**2 + 2.0271845850960684e-05*self.usr_np.log(temperature)**3 + -5.29300841500847e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003502199992318464 + 0.0016819588349818596*self.usr_np.log(temperature) + -0.00026861564706969854*self.usr_np.log(temperature)**2 + 1.9607365517641477e-05*self.usr_np.log(temperature)**3 + -5.048830716425196e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.003562418254789717 + 0.0017108791247444765*self.usr_np.log(temperature) + -0.0002732343346293682*self.usr_np.log(temperature)**2 + 1.9944502598702722e-05*self.usr_np.log(temperature)**3 + -5.135642381590292e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002741633454130172 + -0.0020397895581030223*self.usr_np.log(temperature) + 0.0005342878800809359*self.usr_np.log(temperature)**2 + -5.618701599046279e-05*self.usr_np.log(temperature)**3 + 2.1391071732037924e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014858662654376592 + -0.0012509545078575404*self.usr_np.log(temperature) + 0.00035319331455542583*self.usr_np.log(temperature)**2 + -3.8481819150309906e-05*self.usr_np.log(temperature)**3 + 1.5019351414166096e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034993466828984986 + 0.0017849486129014208*self.usr_np.log(temperature) + -0.00030879037154561017*self.usr_np.log(temperature)**2 + 2.4625984539260213e-05*self.usr_np.log(temperature)**3 + -7.148073942199062e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.006385136075366192 + -0.004041876571091009*self.usr_np.log(temperature) + 0.0009366713886595591*self.usr_np.log(temperature)**2 + -9.195869554295692e-05*self.usr_np.log(temperature)**3 + 3.321183458739384e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.009762886592027935 + 0.004779074163049336*self.usr_np.log(temperature) + -0.0007858558229379803*self.usr_np.log(temperature)**2 + 5.931204218810342e-05*self.usr_np.log(temperature)**3 + -1.604150657611613e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.01503187410020702 + -0.01113422394939384*self.usr_np.log(temperature) + 0.0029077577431878836*self.usr_np.log(temperature)**2 + -0.0003053326128675639*self.usr_np.log(temperature)**3 + 1.1611911681371765e-05*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005481265157758139 + -0.0007061962486419903*self.usr_np.log(temperature) + 0.0002376781365628588*self.usr_np.log(temperature)**2 + -2.774874327397511e-05*self.usr_np.log(temperature)**3 + 1.1324671637967695e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0013193470785842416 + 0.00021059727340927903*self.usr_np.log(temperature) + 8.289091085394808e-05*self.usr_np.log(temperature)**2 + -1.585963650245682e-05*self.usr_np.log(temperature)**3 + 8.017427996903311e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.016213327589266264 + -0.009463133293538746*self.usr_np.log(temperature) + 0.0020330645117644635*self.usr_np.log(temperature)**2 + -0.00018798783202946123*self.usr_np.log(temperature)**3 + 6.429449475096154e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(7.622502660368307e-05 + -0.00042066103234477927*self.usr_np.log(temperature) + 0.00017475175515918912*self.usr_np.log(temperature)**2 + -2.1744993497193575e-05*self.usr_np.log(temperature)**3 + 9.210256145520887e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.005490022368145028 + -0.0034636373652993557*self.usr_np.log(temperature) + 0.0008003386260567461*self.usr_np.log(temperature)**2 + -7.842312742985594e-05*self.usr_np.log(temperature)**3 + 2.827798327412652e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0012935882587990926 + 0.000206485590212507*self.usr_np.log(temperature) + 8.127255578359236e-05*self.usr_np.log(temperature)**2 + -1.5549994312684183e-05*self.usr_np.log(temperature)**3 + 7.860896416815809e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.010248964092759539 + -0.006041755278365907*self.usr_np.log(temperature) + 0.0013110728891657306*self.usr_np.log(temperature)**2 + -0.00012238356949237798*self.usr_np.log(temperature)**3 + 4.224738873196512e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005440595516918467 + -0.0007009564459727446*self.usr_np.log(temperature) + 0.00023591462318127142*self.usr_np.log(temperature)**2 + -2.7542854416062612e-05*self.usr_np.log(temperature)**3 + 1.1240645356603968e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0005402056861210452 + -0.0006959911955582747*self.usr_np.log(temperature) + 0.00023424351338927375*self.usr_np.log(temperature)**2 + -2.7347753607580745e-05*self.usr_np.log(temperature)**3 + 1.1161021837420728e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006811569301050317 + -0.004249172220840861*self.usr_np.log(temperature) + 0.0009721813653882581*self.usr_np.log(temperature)**2 + -9.462533917035548e-05*self.usr_np.log(temperature)**3 + 3.3928050352152955e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006880585313219007 + -0.004292225577382395*self.usr_np.log(temperature) + 0.0009820316771135386*self.usr_np.log(temperature)**2 + -9.558409966622879e-05*self.usr_np.log(temperature)**3 + 3.427181529572004e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0025211385886596037 + -0.00189915910565373*self.usr_np.log(temperature) + 0.0005015471652336446*self.usr_np.log(temperature)**2 + -5.2958872091360285e-05*self.usr_np.log(temperature)**3 + 2.0221140307511386e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0026782600376945324 + -0.0019926394064639346*self.usr_np.log(temperature) + 0.0005219377067682077*self.usr_np.log(temperature)**2 + -5.4888241656870784e-05*self.usr_np.log(temperature)**3 + 2.0896612746387645e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.002741633454130172 + -0.0020397895581030223*self.usr_np.log(temperature) + 0.0005342878800809359*self.usr_np.log(temperature)**2 + -5.618701599046279e-05*self.usr_np.log(temperature)**3 + 2.1391071732037924e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.010161102254048291 + -0.00598996080206777*self.usr_np.log(temperature) + 0.0012998333849897079*self.usr_np.log(temperature)**2 + -0.0001213344053675144*self.usr_np.log(temperature)**3 + 4.188521229920347e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008089949658399272 + -0.004815476617298709*self.usr_np.log(temperature) + 0.0010549990144575311*self.usr_np.log(temperature)**2 + -9.932868769421865e-05*self.usr_np.log(temperature)**3 + 3.4571388649978144e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(4.834954715742912e-05 + -0.0004071742041814487*self.usr_np.log(temperature) + 0.00017252522839634985*self.usr_np.log(temperature)**2 + -2.1578381618068583e-05*self.usr_np.log(temperature)**3 + 9.165604944192455e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(0.004420689974644208 + -0.0028653210515181336*self.usr_np.log(temperature) + 0.0006773888965212088*self.usr_np.log(temperature)**2 + -6.73403129452502e-05*self.usr_np.log(temperature)**3 + 2.456832768758002e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.008912190597381521 + 0.004456716561377835*self.usr_np.log(temperature) + -0.0007542022030744625*self.usr_np.log(temperature)**2 + 5.874430098750949e-05*self.usr_np.log(temperature)**3 + -1.657174844827504e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008364388983951893 + -0.006976007197587993*self.usr_np.log(temperature) + 0.0019593625012748485*self.usr_np.log(temperature)**2 + -0.00021298663413841666*self.usr_np.log(temperature)**3 + 8.299735078233254e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00011010110796338114 + -0.0002517450170031291*self.usr_np.log(temperature) + 0.00012525090764892621*self.usr_np.log(temperature)**2 + -1.626070152568524e-05*self.usr_np.log(temperature)**3 + 7.045686310128217e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.001761447510892698 + 0.0005731704748247918*self.usr_np.log(temperature) + -1.7156677076166038e-05*self.usr_np.log(temperature)**2 + -5.038406328338518e-06*self.usr_np.log(temperature)**3 + 3.8175996555075504e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.013194593801159792 + -0.0077747242757990635*self.usr_np.log(temperature) + 0.0016863764641858114*self.usr_np.log(temperature)**2 + -0.00015735128294683967*self.usr_np.log(temperature)**3 + 5.429648667265697e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00045235539949336015 + -4.409058206528131e-05*self.usr_np.log(temperature) + 7.95031974551733e-05*self.usr_np.log(temperature)**2 + -1.1889029922088942e-05*self.usr_np.log(temperature)**3 + 5.504013233597556e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0037755909114692964 + -0.0024354532304081333*self.usr_np.log(temperature) + 0.0005734791374778295*self.usr_np.log(temperature)**2 + -5.687303384632564e-05*self.usr_np.log(temperature)**3 + 2.0709644292386187e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0017229716110997626 + 0.0005606505163163001*self.usr_np.log(temperature) + -1.678191791768496e-05*self.usr_np.log(temperature)**2 + -4.928350697418701e-06*self.usr_np.log(temperature)**3 + 3.73421052188494e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008172303080261059 + -0.0048644968206454755*self.usr_np.log(temperature) + 0.0010657386089626213*self.usr_np.log(temperature)**2 + -0.00010033982591704349*self.usr_np.log(temperature)**3 + 3.4923315704406002e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00010913248123696911 + -0.0002495302622660443*self.usr_np.log(temperature) + 0.00012414899888223493*self.usr_np.log(temperature)**2 + -1.6117646198563468e-05*self.usr_np.log(temperature)**3 + 6.983701102517874e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00010821335037069786 + -0.0002474286792740311*self.usr_np.log(temperature) + 0.00012310339654881674*self.usr_np.log(temperature)**2 + -1.5981900855261737e-05*self.usr_np.log(temperature)**3 + 6.924883276888655e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0049084394224768214 + -0.003119357799625018*self.usr_np.log(temperature) + 0.0007253417306728563*self.usr_np.log(temperature)**2 + -7.13686002963578e-05*self.usr_np.log(temperature)**3 + 2.5822577007530742e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.004966444795481125 + -0.003156220740600933*self.usr_np.log(temperature) + 0.0007339134403400959*self.usr_np.log(temperature)**2 + -7.221199713297118e-05*self.usr_np.log(temperature)**3 + 2.6127734733355013e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0013146332092551513 + -0.0011379268922288184*self.usr_np.log(temperature) + 0.0003261054613349652*self.usr_np.log(temperature)**2 + -3.5762541380361196e-05*self.usr_np.log(temperature)**3 + 1.4019363250614273e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014478119698883136 + -0.001218916501709094*self.usr_np.log(temperature) + 0.000344147734152096*self.usr_np.log(temperature)**2 + -3.74962671174019e-05*self.usr_np.log(temperature)**3 + 1.4634693083415085e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0014858662654376592 + -0.0012509545078575404*self.usr_np.log(temperature) + 0.00035319331455542583*self.usr_np.log(temperature)**2 + -3.8481819150309906e-05*self.usr_np.log(temperature)**3 + 1.5019351414166096e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.008089949658399272 + -0.004815476617298709*self.usr_np.log(temperature) + 0.0010549990144575311*self.usr_np.log(temperature)**2 + -9.932868769421865e-05*self.usr_np.log(temperature)**3 + 3.4571388649978144e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.006232612412652693 + -0.00374907679254768*self.usr_np.log(temperature) + 0.0008296736073504523*self.usr_np.log(temperature)**2 + -7.877553115946174e-05*self.usr_np.log(temperature)**3 + 2.763340796880672e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00047712412660957796 + -3.1658119656161194e-05*self.usr_np.log(temperature) + 7.733651697639052e-05*self.usr_np.log(temperature)**2 + -1.171699798360121e-05*self.usr_np.log(temperature)**3 + 5.4540516801399e-07*self.usr_np.log(temperature)**4),
            ]),
            self._pyro_make_array([
                self.usr_np.sqrt(temperature)*temperature*(-0.002566312350785201 + 0.0011830251199463919*self.usr_np.log(temperature) + -0.00017542469443455652*self.usr_np.log(temperature)**2 + 1.1645149701915719e-05*self.usr_np.log(temperature)**3 + -2.5315663034646197e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.007323280548457206 + 0.004247486239670019*self.usr_np.log(temperature) + -0.000803359454232897*self.usr_np.log(temperature)**2 + 7.096837772986983e-05*self.usr_np.log(temperature)**3 + -2.2842690699017418e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.018552793898362993 + 0.009455038189563062*self.usr_np.log(temperature) + -0.0016339242326530946*self.usr_np.log(temperature)**2 + 0.00013016014962564*self.usr_np.log(temperature)**3 + -3.7729752245626675e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00303005347627421 + 0.0015963119455941247*self.usr_np.log(temperature) + -0.00028558271238060057*self.usr_np.log(temperature)**2 + 2.3589003022566823e-05*self.usr_np.log(temperature)**3 + -7.128139183150021e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.004334076415428823 + 0.0023487751084675713*self.usr_np.log(temperature) + -0.00043025471406034474*self.usr_np.log(temperature)**2 + 3.6453305767041e-05*self.usr_np.log(temperature)**3 + -1.131328183921725e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(0.0032788605181610473 + -0.002505478451489095*self.usr_np.log(temperature) + 0.000667816571108672*self.usr_np.log(temperature)**2 + -7.083588486066702e-05*self.usr_np.log(temperature)**3 + 2.713492698249429e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0029348181666659498 + 0.001559923431128209*self.usr_np.log(temperature) + -0.00028128084862643715*self.usr_np.log(temperature)**2 + 2.3428922377910528e-05*self.usr_np.log(temperature)**3 + -7.14358273826035e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0021194343807516697 + 0.0009691103714402947*self.usr_np.log(temperature) + -0.00014154374102108547*self.usr_np.log(temperature)**2 + 9.196204490091076e-06*self.usr_np.log(temperature)**3 + -1.9113978374504132e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0042515394211634595 + 0.0023040456623122873*self.usr_np.log(temperature) + -0.0004220610581434094*self.usr_np.log(temperature)**2 + 3.5759098743335415e-05*self.usr_np.log(temperature)**3 + -1.1097834719993191e-06*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(4.8753187102223985e-05 + -0.00041057344539902415*self.usr_np.log(temperature) + 0.00017396553296733315*self.usr_np.log(temperature)**2 + -2.175852594807885e-05*self.usr_np.log(temperature)**3 + 9.242122812448087e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0030083773760878328 + 0.0015848924053342296*self.usr_np.log(temperature) + -0.0002835397387057684*self.usr_np.log(temperature)**2 + 2.342025431999138e-05*self.usr_np.log(temperature)**3 + -7.077146598264797e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002987842465018575 + 0.001574074073546689*self.usr_np.log(temperature) + -0.0002816043221704563*self.usr_np.log(temperature)**2 + 2.3260389788567543e-05*self.usr_np.log(temperature)**3 + -7.028838637592768e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.002222383738045446 + 0.000982150714733322*self.usr_np.log(temperature) + -0.00013399180799389794*self.usr_np.log(temperature)**2 + 7.820951350022455e-06*self.usr_np.log(temperature)**3 + -1.228222738921866e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0022441637429302572 + 0.0009917760764565184*self.usr_np.log(temperature) + -0.00013530496655584436*self.usr_np.log(temperature)**2 + 7.897598940539772e-06*self.usr_np.log(temperature)**3 + -1.2402596778391278e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034084478434894044 + 0.001742645528887295*self.usr_np.log(temperature) + -0.00030233049879963047*self.usr_np.log(temperature)**2 + 2.418148752996495e-05*self.usr_np.log(temperature)**3 + -7.044076835923595e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034202879289978445 + 0.0017446222817605324*self.usr_np.log(temperature) + -0.0003018140459047648*self.usr_np.log(temperature)**2 + 2.4069623644622516e-05*self.usr_np.log(temperature)**3 + -6.986581563814774e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.0034993466828984986 + 0.0017849486129014208*self.usr_np.log(temperature) + -0.00030879037154561017*self.usr_np.log(temperature)**2 + 2.4625984539260213e-05*self.usr_np.log(temperature)**3 + -7.148073942199062e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(4.834954715742912e-05 + -0.0004071742041814487*self.usr_np.log(temperature) + 0.00017252522839634985*self.usr_np.log(temperature)**2 + -2.1578381618068583e-05*self.usr_np.log(temperature)**3 + 9.165604944192455e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00047712412660957796 + -3.1658119656161194e-05*self.usr_np.log(temperature) + 7.733651697639052e-05*self.usr_np.log(temperature)**2 + -1.171699798360121e-05*self.usr_np.log(temperature)**3 + 5.4540516801399e-07*self.usr_np.log(temperature)**4),
                self.usr_np.sqrt(temperature)*temperature*(-0.00295673852294946 + 0.001572491741915425*self.usr_np.log(temperature) + -0.000283699905789111*self.usr_np.log(temperature)**2 + 2.364377574630533e-05*self.usr_np.log(temperature)**3 + -7.213510385775298e-07*self.usr_np.log(temperature)**4),
            ]),
        ])

    def get_mixture_viscosity_mixavg(self, temperature, mass_fractions):
        mmw = self.get_mix_molecular_weight(mass_fractions)
        mole_fractions = self.get_mole_fractions(mmw, mass_fractions)
        viscosities = self.get_species_viscosities(temperature)
        mix_rule_f = self._pyro_make_array([
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[0])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[1])*self.usr_np.sqrt(0.07186141013759179)))**2) / self.usr_np.sqrt(119.32539682539682) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[2])*self.usr_np.sqrt(0.03593070506879589)))**2) / self.usr_np.sqrt(230.65079365079364) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[3])*self.usr_np.sqrt(1.1405860126898126)))**2) / self.usr_np.sqrt(15.013938371148196) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[4])*self.usr_np.sqrt(0.5702930063449063)))**2) / self.usr_np.sqrt(22.027876742296392) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[5])*self.usr_np.sqrt(0.642154416482498)))**2) / self.usr_np.sqrt(20.458062725506522) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[6])*self.usr_np.sqrt(0.9984315962073145)))**2) / self.usr_np.sqrt(16.012566940378434) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[7])*self.usr_np.sqrt(1.5687246025522208)))**2) / self.usr_np.sqrt(13.099684155513645) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[8])*self.usr_np.sqrt(0.6062237114137022)))**2) / self.usr_np.sqrt(21.19644852119715) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[9])*self.usr_np.sqrt(1.0343623012761105)))**2) / self.usr_np.sqrt(15.734233923771452) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[10])*self.usr_np.sqrt(1.1765167177586084)))**2) / self.usr_np.sqrt(14.799733381809368) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[11])*self.usr_np.sqrt(1.2124474228274045)))**2) / self.usr_np.sqrt(14.598224260598576) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[12])*self.usr_np.sqrt(0.9640692949312042)))**2) / self.usr_np.sqrt(16.298158692597795) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[13])*self.usr_np.sqrt(0.9281385898624082)))**2) / self.usr_np.sqrt(16.61940241185959) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[14])*self.usr_np.sqrt(0.5718614101375918)))**2) / self.usr_np.sqrt(21.989403478152465) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[15])*self.usr_np.sqrt(0.5359307050687959)))**2) / self.usr_np.sqrt(22.92730295976056) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[16])*self.usr_np.sqrt(0.5)))**2) / self.usr_np.sqrt(24.0) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[17])*self.usr_np.sqrt(1.0702930063449063)))**2) / self.usr_np.sqrt(15.474588689802172) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[18])*self.usr_np.sqrt(1.5343623012761105)))**2) / self.usr_np.sqrt(13.213892438146125) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[0] / viscosities[19])*self.usr_np.sqrt(0.998574178370286)))**2) / self.usr_np.sqrt(16.01142285999857),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[0])*self.usr_np.sqrt(13.915674603174603)))**2) / self.usr_np.sqrt(8.574891281100735) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[1])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[2])*self.usr_np.sqrt(0.5)))**2) / self.usr_np.sqrt(24.0) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[3])*self.usr_np.sqrt(15.87202380952381)))**2) / self.usr_np.sqrt(8.504031501968873) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[4])*self.usr_np.sqrt(7.936011904761905)))**2) / self.usr_np.sqrt(9.008063003937746) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[5])*self.usr_np.sqrt(8.936011904761905)))**2) / self.usr_np.sqrt(8.895253955037468) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[6])*self.usr_np.sqrt(13.893849206349206)))**2) / self.usr_np.sqrt(8.575794359157443) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[7])*self.usr_np.sqrt(21.82986111111111)))**2) / self.usr_np.sqrt(8.366470494671544) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[8])*self.usr_np.sqrt(8.436011904761905)))**2) / self.usr_np.sqrt(8.948315399541364) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[9])*self.usr_np.sqrt(14.393849206349207)))**2) / self.usr_np.sqrt(8.555792956096216) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[10])*self.usr_np.sqrt(16.37202380952381)))**2) / self.usr_np.sqrt(8.488638429376477) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[11])*self.usr_np.sqrt(16.87202380952381)))**2) / self.usr_np.sqrt(8.474157699770682) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[12])*self.usr_np.sqrt(13.415674603174603)))**2) / self.usr_np.sqrt(8.596317385195594) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[13])*self.usr_np.sqrt(12.915674603174601)))**2) / self.usr_np.sqrt(8.619402411859589) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[14])*self.usr_np.sqrt(7.957837301587301)))**2) / self.usr_np.sqrt(9.005298260923768) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[15])*self.usr_np.sqrt(7.457837301587301)))**2) / self.usr_np.sqrt(9.072697040239442) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[16])*self.usr_np.sqrt(6.957837301587301)))**2) / self.usr_np.sqrt(9.14978256220147) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[17])*self.usr_np.sqrt(14.893849206349206)))**2) / self.usr_np.sqrt(8.537134483447678) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[18])*self.usr_np.sqrt(21.35168650793651)))**2) / self.usr_np.sqrt(8.374677662910907) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[1] / viscosities[19])*self.usr_np.sqrt(13.895833333333332)))**2) / self.usr_np.sqrt(8.575712143928037),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[0])*self.usr_np.sqrt(27.831349206349206)))**2) / self.usr_np.sqrt(8.287445640550366) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[1])*self.usr_np.sqrt(2.0)))**2) / self.usr_np.sqrt(12.0) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[2])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[3])*self.usr_np.sqrt(31.74404761904762)))**2) / self.usr_np.sqrt(8.252015750984437) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[4])*self.usr_np.sqrt(15.87202380952381)))**2) / self.usr_np.sqrt(8.504031501968873) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[5])*self.usr_np.sqrt(17.87202380952381)))**2) / self.usr_np.sqrt(8.447626977518734) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[6])*self.usr_np.sqrt(27.78769841269841)))**2) / self.usr_np.sqrt(8.287897179578723) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[7])*self.usr_np.sqrt(43.65972222222222)))**2) / self.usr_np.sqrt(8.183235247335773) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[8])*self.usr_np.sqrt(16.87202380952381)))**2) / self.usr_np.sqrt(8.474157699770682) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[9])*self.usr_np.sqrt(28.787698412698415)))**2) / self.usr_np.sqrt(8.277896478048108) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[10])*self.usr_np.sqrt(32.74404761904762)))**2) / self.usr_np.sqrt(8.244319214688238) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[11])*self.usr_np.sqrt(33.74404761904762)))**2) / self.usr_np.sqrt(8.237078849885341) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[12])*self.usr_np.sqrt(26.831349206349206)))**2) / self.usr_np.sqrt(8.298158692597797) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[13])*self.usr_np.sqrt(25.831349206349202)))**2) / self.usr_np.sqrt(8.309701205929795) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[14])*self.usr_np.sqrt(15.915674603174603)))**2) / self.usr_np.sqrt(8.502649130461883) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[15])*self.usr_np.sqrt(14.915674603174603)))**2) / self.usr_np.sqrt(8.53634852011972) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[16])*self.usr_np.sqrt(13.915674603174603)))**2) / self.usr_np.sqrt(8.574891281100735) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[17])*self.usr_np.sqrt(29.78769841269841)))**2) / self.usr_np.sqrt(8.26856724172384) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[18])*self.usr_np.sqrt(42.70337301587302)))**2) / self.usr_np.sqrt(8.187338831455454) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[2] / viscosities[19])*self.usr_np.sqrt(27.791666666666664)))**2) / self.usr_np.sqrt(8.287856071964018),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[0])*self.usr_np.sqrt(0.8767422963935245)))**2) / self.usr_np.sqrt(17.1246881015185) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[1])*self.usr_np.sqrt(0.06300393774610913)))**2) / self.usr_np.sqrt(134.97619047619048) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[2])*self.usr_np.sqrt(0.031501968873054564)))**2) / self.usr_np.sqrt(261.95238095238096) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[3])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[4])*self.usr_np.sqrt(0.5)))**2) / self.usr_np.sqrt(24.0) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[5])*self.usr_np.sqrt(0.5630039377461091)))**2) / self.usr_np.sqrt(22.209492089925064) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[6])*self.usr_np.sqrt(0.875367210450653)))**2) / self.usr_np.sqrt(17.139021777936453) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[7])*self.usr_np.sqrt(1.3753672104506531)))**2) / self.usr_np.sqrt(13.816628416914721) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[8])*self.usr_np.sqrt(0.5315019688730546)))**2) / self.usr_np.sqrt(23.051684600458636) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[9])*self.usr_np.sqrt(0.9068691793237077)))**2) / self.usr_np.sqrt(16.821559032324764) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[10])*self.usr_np.sqrt(1.0315019688730545)))**2) / self.usr_np.sqrt(15.75568078531176) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[11])*self.usr_np.sqrt(1.0630039377461091)))**2) / self.usr_np.sqrt(15.525842300229318) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[12])*self.usr_np.sqrt(0.84524032752047)))**2) / self.usr_np.sqrt(17.464763735857428) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[13])*self.usr_np.sqrt(0.8137383586474153)))**2) / self.usr_np.sqrt(17.831169828711886) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[14])*self.usr_np.sqrt(0.5013750859428714)))**2) / self.usr_np.sqrt(23.956117933054916) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[15])*self.usr_np.sqrt(0.4698731170698168)))**2) / self.usr_np.sqrt(25.025872963086133) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[16])*self.usr_np.sqrt(0.43837114819676226)))**2) / self.usr_np.sqrt(26.249376203037002) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[17])*self.usr_np.sqrt(0.9383711481967623)))**2) / self.usr_np.sqrt(16.52541131019783) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[18])*self.usr_np.sqrt(1.34524032752047)))**2) / self.usr_np.sqrt(13.946892786618655) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[3] / viscosities[19])*self.usr_np.sqrt(0.8754922182636414)))**2) / self.usr_np.sqrt(17.137716855857786),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[0])*self.usr_np.sqrt(1.753484592787049)))**2) / self.usr_np.sqrt(12.56234405075925) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[1])*self.usr_np.sqrt(0.12600787549221826)))**2) / self.usr_np.sqrt(71.48809523809524) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[2])*self.usr_np.sqrt(0.06300393774610913)))**2) / self.usr_np.sqrt(134.97619047619048) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[3])*self.usr_np.sqrt(2.0)))**2) / self.usr_np.sqrt(12.0) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[4])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[5])*self.usr_np.sqrt(1.1260078754922183)))**2) / self.usr_np.sqrt(15.104746044962532) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[6])*self.usr_np.sqrt(1.750734420901306)))**2) / self.usr_np.sqrt(12.569510888968226) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[7])*self.usr_np.sqrt(2.7507344209013063)))**2) / self.usr_np.sqrt(10.90831420845736) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[8])*self.usr_np.sqrt(1.0630039377461091)))**2) / self.usr_np.sqrt(15.525842300229318) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[9])*self.usr_np.sqrt(1.8137383586474154)))**2) / self.usr_np.sqrt(12.410779516162382) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[10])*self.usr_np.sqrt(2.063003937746109)))**2) / self.usr_np.sqrt(11.87784039265588) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[11])*self.usr_np.sqrt(2.1260078754922183)))**2) / self.usr_np.sqrt(11.762921150114659) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[12])*self.usr_np.sqrt(1.69048065504094)))**2) / self.usr_np.sqrt(12.732381867928714) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[13])*self.usr_np.sqrt(1.6274767172948306)))**2) / self.usr_np.sqrt(12.915584914355943) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[14])*self.usr_np.sqrt(1.0027501718857428)))**2) / self.usr_np.sqrt(15.978058966527458) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[15])*self.usr_np.sqrt(0.9397462341396337)))**2) / self.usr_np.sqrt(16.512936481543065) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[16])*self.usr_np.sqrt(0.8767422963935245)))**2) / self.usr_np.sqrt(17.1246881015185) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[17])*self.usr_np.sqrt(1.8767422963935245)))**2) / self.usr_np.sqrt(12.262705655098914) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[18])*self.usr_np.sqrt(2.69048065504094)))**2) / self.usr_np.sqrt(10.973446393309327) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[4] / viscosities[19])*self.usr_np.sqrt(1.7509844365272829)))**2) / self.usr_np.sqrt(12.568858427928893),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[0])*self.usr_np.sqrt(1.557257840688315)))**2) / self.usr_np.sqrt(13.137235331859983) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[1])*self.usr_np.sqrt(0.11190674437968359)))**2) / self.usr_np.sqrt(79.48809523809524) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[2])*self.usr_np.sqrt(0.055953372189841796)))**2) / self.usr_np.sqrt(150.97619047619048) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[3])*self.usr_np.sqrt(1.7761865112406328)))**2) / self.usr_np.sqrt(12.504031501968873) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[4])*self.usr_np.sqrt(0.8880932556203164)))**2) / self.usr_np.sqrt(17.008063003937746) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[5])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[6])*self.usr_np.sqrt(1.5548154315847902)))**2) / self.usr_np.sqrt(13.14530524812567) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[7])*self.usr_np.sqrt(2.4429086872051067)))**2) / self.usr_np.sqrt(11.274784703128905) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[8])*self.usr_np.sqrt(0.9440466278101582)))**2) / self.usr_np.sqrt(16.474157699770682) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[9])*self.usr_np.sqrt(1.6107688037746322)))**2) / self.usr_np.sqrt(12.966572472258598) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[10])*self.usr_np.sqrt(1.8321398834304745)))**2) / self.usr_np.sqrt(12.366478822032358) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[11])*self.usr_np.sqrt(1.8880932556203165)))**2) / self.usr_np.sqrt(12.237078849885341) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[12])*self.usr_np.sqrt(1.5013044684984733)))**2) / self.usr_np.sqrt(13.328699253124306) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[13])*self.usr_np.sqrt(1.4453510963086316)))**2) / self.usr_np.sqrt(13.534987326215532) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[14])*self.usr_np.sqrt(0.8905356647238412)))**2) / self.usr_np.sqrt(16.983357227451226) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[15])*self.usr_np.sqrt(0.8345822925339994)))**2) / self.usr_np.sqrt(17.58563352178251) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[16])*self.usr_np.sqrt(0.7786289203441575)))**2) / self.usr_np.sqrt(18.274470663719967) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[17])*self.usr_np.sqrt(1.666722175964474)))**2) / self.usr_np.sqrt(12.799840138546593) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[18])*self.usr_np.sqrt(2.38939772411879)))**2) / self.usr_np.sqrt(11.348124056220234) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[5] / viscosities[19])*self.usr_np.sqrt(1.55503746877602)))**2) / self.usr_np.sqrt(13.144570571856928),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[0])*self.usr_np.sqrt(1.0015708675473045)))**2) / self.usr_np.sqrt(15.987452769658516) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[1])*self.usr_np.sqrt(0.07197429489468048)))**2) / self.usr_np.sqrt(119.15079365079364) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[2])*self.usr_np.sqrt(0.03598714744734024)))**2) / self.usr_np.sqrt(230.3015873015873) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[3])*self.usr_np.sqrt(1.1423777222420566)))**2) / self.usr_np.sqrt(15.002937683605225) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[4])*self.usr_np.sqrt(0.5711888611210283)))**2) / self.usr_np.sqrt(22.00587536721045) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[5])*self.usr_np.sqrt(0.6431631560157087)))**2) / self.usr_np.sqrt(20.43852345267832) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[6])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[7])*self.usr_np.sqrt(1.5711888611210283)))**2) / self.usr_np.sqrt(13.091685791542638) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[8])*self.usr_np.sqrt(0.6071760085683685)))**2) / self.usr_np.sqrt(21.175751161286527) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[9])*self.usr_np.sqrt(1.0359871474473403)))**2) / self.usr_np.sqrt(15.72210352195189) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[10])*self.usr_np.sqrt(1.1783648696893967)))**2) / self.usr_np.sqrt(14.789068654184087) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[11])*self.usr_np.sqrt(1.214352017136737)))**2) / self.usr_np.sqrt(14.587875580643264) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[12])*self.usr_np.sqrt(0.9655837200999643)))**2) / self.usr_np.sqrt(16.28514382903202) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[13])*self.usr_np.sqrt(0.929596572652624)))**2) / self.usr_np.sqrt(16.60588370842615) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[14])*self.usr_np.sqrt(0.5727597286683328)))**2) / self.usr_np.sqrt(21.967462444679924) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[15])*self.usr_np.sqrt(0.5367725812209926)))**2) / self.usr_np.sqrt(22.9038909211839) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[16])*self.usr_np.sqrt(0.5007854337736523)))**2) / self.usr_np.sqrt(23.97490553931703) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[17])*self.usr_np.sqrt(1.0719742948946804)))**2) / self.usr_np.sqrt(15.46286551655232) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[18])*self.usr_np.sqrt(1.5367725812209927)))**2) / self.usr_np.sqrt(13.205714949471483) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[6] / viscosities[19])*self.usr_np.sqrt(1.000142806140664)))**2) / self.usr_np.sqrt(15.998857714000142),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[0])*self.usr_np.sqrt(0.6374605194392056)))**2) / self.usr_np.sqrt(20.549796820417768) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[1])*self.usr_np.sqrt(0.04580881183394306)))**2) / self.usr_np.sqrt(182.63888888888889) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[2])*self.usr_np.sqrt(0.02290440591697153)))**2) / self.usr_np.sqrt(357.27777777777777) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[3])*self.usr_np.sqrt(0.7270785521143402)))**2) / self.usr_np.sqrt(19.002937683605225) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[4])*self.usr_np.sqrt(0.3635392760571701)))**2) / self.usr_np.sqrt(30.00587536721045) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[5])*self.usr_np.sqrt(0.4093480878911132)))**2) / self.usr_np.sqrt(27.543269497640853) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[6])*self.usr_np.sqrt(0.6364607239428298)))**2) / self.usr_np.sqrt(20.569510888968225) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[7])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[8])*self.usr_np.sqrt(0.3864436819741417)))**2) / self.usr_np.sqrt(28.701593461515845) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[9])*self.usr_np.sqrt(0.6593651298598014)))**2) / self.usr_np.sqrt(20.132883038114272) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[10])*self.usr_np.sqrt(0.7499829580313118)))**2) / self.usr_np.sqrt(18.66690904683997) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[11])*self.usr_np.sqrt(0.7728873639482834)))**2) / self.usr_np.sqrt(18.35079673075792) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[12])*self.usr_np.sqrt(0.614556113522234)))**2) / self.usr_np.sqrt(21.017525696960732) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[13])*self.usr_np.sqrt(0.5916517076052625)))**2) / self.usr_np.sqrt(21.521468622782088) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[14])*self.usr_np.sqrt(0.36453907155354587)))**2) / self.usr_np.sqrt(29.94552141120738) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[15])*self.usr_np.sqrt(0.34163466563657435)))**2) / self.usr_np.sqrt(31.41682740272697) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[16])*self.usr_np.sqrt(0.3187302597196028)))**2) / self.usr_np.sqrt(33.099593640835536) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[17])*self.usr_np.sqrt(0.682269535776773)))**2) / self.usr_np.sqrt(19.725571171651236) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[18])*self.usr_np.sqrt(0.9780953895794042)))**2) / self.usr_np.sqrt(16.17916134278081) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[7] / viscosities[19])*self.usr_np.sqrt(0.6365516144425004)))**2) / self.usr_np.sqrt(20.567716141929036),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[0])*self.usr_np.sqrt(1.649556065149644)))**2) / self.usr_np.sqrt(12.849789691309617) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[1])*self.usr_np.sqrt(0.11853942494267065)))**2) / self.usr_np.sqrt(75.48809523809524) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[2])*self.usr_np.sqrt(0.05926971247133533)))**2) / self.usr_np.sqrt(142.97619047619048) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[3])*self.usr_np.sqrt(1.8814605750573292)))**2) / self.usr_np.sqrt(12.252015750984437) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[4])*self.usr_np.sqrt(0.9407302875286646)))**2) / self.usr_np.sqrt(16.504031501968875) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[5])*self.usr_np.sqrt(1.0592697124713353)))**2) / self.usr_np.sqrt(15.552373022481266) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[6])*self.usr_np.sqrt(1.646968895160816)))**2) / self.usr_np.sqrt(12.857408068546949) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[7])*self.usr_np.sqrt(2.5876991826894806)))**2) / self.usr_np.sqrt(11.091549455793134) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[8])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[9])*self.usr_np.sqrt(1.7062386076321514)))**2) / self.usr_np.sqrt(12.688675994210492) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[10])*self.usr_np.sqrt(1.9407302875286645)))**2) / self.usr_np.sqrt(12.12215960734412) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[11])*self.usr_np.sqrt(2.0)))**2) / self.usr_np.sqrt(12.0) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[12])*self.usr_np.sqrt(1.5902863526783089)))**2) / self.usr_np.sqrt(13.03054056052651) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[13])*self.usr_np.sqrt(1.5310166402069734)))**2) / self.usr_np.sqrt(13.225286120285737) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[14])*self.usr_np.sqrt(0.9433174575174926)))**2) / self.usr_np.sqrt(16.480708096989343) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[15])*self.usr_np.sqrt(0.8840477450461574)))**2) / self.usr_np.sqrt(17.04928500166279) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[16])*self.usr_np.sqrt(0.824778032574822)))**2) / self.usr_np.sqrt(17.699579382619234) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[17])*self.usr_np.sqrt(1.7655083201034867)))**2) / self.usr_np.sqrt(12.531272896822754) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[18])*self.usr_np.sqrt(2.5310166402069734)))**2) / self.usr_np.sqrt(11.160785224764782) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[8] / viscosities[19])*self.usr_np.sqrt(1.6472040924325275)))**2) / self.usr_np.sqrt(12.856714499892911),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[0])*self.usr_np.sqrt(0.9667792404714315)))**2) / self.usr_np.sqrt(16.274898410208884) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[1])*self.usr_np.sqrt(0.06947411951202702)))**2) / self.usr_np.sqrt(123.15079365079366) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[2])*self.usr_np.sqrt(0.03473705975601351)))**2) / self.usr_np.sqrt(238.30158730158732) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[3])*self.usr_np.sqrt(1.1026948790405955)))**2) / self.usr_np.sqrt(15.254953434589662) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[4])*self.usr_np.sqrt(0.5513474395202977)))**2) / self.usr_np.sqrt(22.509906869179325) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[5])*self.usr_np.sqrt(0.6208215590323247)))**2) / self.usr_np.sqrt(20.886150430197056) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[6])*self.usr_np.sqrt(0.9652629402439864)))**2) / self.usr_np.sqrt(16.28789717957872) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[7])*self.usr_np.sqrt(1.5166103797642843)))**2) / self.usr_np.sqrt(13.27492103887841) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[8])*self.usr_np.sqrt(0.5860844992763113)))**2) / self.usr_np.sqrt(21.649908861057213) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[9])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[10])*self.usr_np.sqrt(1.137431938796609)))**2) / self.usr_np.sqrt(15.033387868872326) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[11])*self.usr_np.sqrt(1.1721689985526227)))**2) / self.usr_np.sqrt(14.824954430528607) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[12])*self.usr_np.sqrt(0.932042180715418)))**2) / self.usr_np.sqrt(16.583302521629818) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[13])*self.usr_np.sqrt(0.8973051209594044)))**2) / self.usr_np.sqrt(16.915584914355943) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[14])*self.usr_np.sqrt(0.5528637397477427)))**2) / self.usr_np.sqrt(22.470111575141807) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[15])*self.usr_np.sqrt(0.5181266799917292)))**2) / self.usr_np.sqrt(23.440239441303625) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[16])*self.usr_np.sqrt(0.48338962023571574)))**2) / self.usr_np.sqrt(24.549796820417768) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[17])*self.usr_np.sqrt(1.0347370597560135)))**2) / self.usr_np.sqrt(15.73143275827616) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[18])*self.usr_np.sqrt(1.4833896202357157)))**2) / self.usr_np.sqrt(13.393053780926937) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[9] / viscosities[19])*self.usr_np.sqrt(0.9654007857192087)))**2) / self.usr_np.sqrt(16.28671378596416),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[0])*self.usr_np.sqrt(0.849966672726171)))**2) / self.usr_np.sqrt(17.412133742068868) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[1])*self.usr_np.sqrt(0.061079803672059625)))**2) / self.usr_np.sqrt(138.97619047619048) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[2])*self.usr_np.sqrt(0.030539901836029813)))**2) / self.usr_np.sqrt(269.95238095238096) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[3])*self.usr_np.sqrt(0.9694600981639702)))**2) / self.usr_np.sqrt(16.252015750984434) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[4])*self.usr_np.sqrt(0.4847300490819851)))**2) / self.usr_np.sqrt(24.50403150196887) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[5])*self.usr_np.sqrt(0.5458098527540447)))**2) / self.usr_np.sqrt(22.657119067443794) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[6])*self.usr_np.sqrt(0.8486335817730108)))**2) / self.usr_np.sqrt(17.426918957515174) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[7])*self.usr_np.sqrt(1.333363630854996)))**2) / self.usr_np.sqrt(13.999863664250494) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[8])*self.usr_np.sqrt(0.515269950918015)))**2) / self.usr_np.sqrt(23.525842300229314) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[9])*self.usr_np.sqrt(0.8791734836090408)))**2) / self.usr_np.sqrt(17.09945551037287) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[10])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[11])*self.usr_np.sqrt(1.03053990183603)))**2) / self.usr_np.sqrt(15.762921150114657) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[12])*self.usr_np.sqrt(0.8194267708901412)))**2) / self.usr_np.sqrt(17.762922428455227) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[13])*self.usr_np.sqrt(0.7888868690541113)))**2) / self.usr_np.sqrt(18.140871034641677) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[14])*self.usr_np.sqrt(0.4860631400351451)))**2) / self.usr_np.sqrt(24.4587670635168) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[15])*self.usr_np.sqrt(0.45552323819911533)))**2) / self.usr_np.sqrt(25.562221483205853) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[16])*self.usr_np.sqrt(0.4249833363630855)))**2) / self.usr_np.sqrt(26.824267484137735) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[17])*self.usr_np.sqrt(0.9097133854450706)))**2) / self.usr_np.sqrt(16.79397855192167) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[18])*self.usr_np.sqrt(1.3041568199721263)))**2) / self.usr_np.sqrt(14.134231618074107) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[10] / viscosities[19])*self.usr_np.sqrt(0.8487547718596619)))**2) / self.usr_np.sqrt(17.425572927821804),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[0])*self.usr_np.sqrt(0.824778032574822)))**2) / self.usr_np.sqrt(17.699579382619234) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[1])*self.usr_np.sqrt(0.05926971247133533)))**2) / self.usr_np.sqrt(142.97619047619048) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[2])*self.usr_np.sqrt(0.029634856235667664)))**2) / self.usr_np.sqrt(277.95238095238096) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[3])*self.usr_np.sqrt(0.9407302875286646)))**2) / self.usr_np.sqrt(16.504031501968875) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[4])*self.usr_np.sqrt(0.4703651437643323)))**2) / self.usr_np.sqrt(25.008063003937746) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[5])*self.usr_np.sqrt(0.5296348562356676)))**2) / self.usr_np.sqrt(23.104746044962532) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[6])*self.usr_np.sqrt(0.823484447580408)))**2) / self.usr_np.sqrt(17.714816137093898) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[7])*self.usr_np.sqrt(1.2938495913447403)))**2) / self.usr_np.sqrt(14.183098911586267) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[8])*self.usr_np.sqrt(0.5)))**2) / self.usr_np.sqrt(24.0) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[9])*self.usr_np.sqrt(0.8531193038160757)))**2) / self.usr_np.sqrt(17.377351988420983) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[10])*self.usr_np.sqrt(0.9703651437643322)))**2) / self.usr_np.sqrt(16.24431921468824) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[11])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[12])*self.usr_np.sqrt(0.7951431763391544)))**2) / self.usr_np.sqrt(18.06108112105302) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[13])*self.usr_np.sqrt(0.7655083201034867)))**2) / self.usr_np.sqrt(18.450572240571475) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[14])*self.usr_np.sqrt(0.4716587287587463)))**2) / self.usr_np.sqrt(24.961416193978685) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[15])*self.usr_np.sqrt(0.4420238725230787)))**2) / self.usr_np.sqrt(26.098570003325577) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[16])*self.usr_np.sqrt(0.412389016287411)))**2) / self.usr_np.sqrt(27.39915876523847) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[17])*self.usr_np.sqrt(0.8827541600517433)))**2) / self.usr_np.sqrt(17.06254579364551) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[18])*self.usr_np.sqrt(1.2655083201034867)))**2) / self.usr_np.sqrt(14.321570449529563) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[11] / viscosities[19])*self.usr_np.sqrt(0.8236020462162638)))**2) / self.usr_np.sqrt(17.713428999785823),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[0])*self.usr_np.sqrt(1.0372698365747246)))**2) / self.usr_np.sqrt(15.712554359449634) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[1])*self.usr_np.sqrt(0.07453967314944909)))**2) / self.usr_np.sqrt(115.32539682539682) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[2])*self.usr_np.sqrt(0.037269836574724546)))**2) / self.usr_np.sqrt(222.65079365079364) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[3])*self.usr_np.sqrt(1.1830954669821785)))**2) / self.usr_np.sqrt(14.761922620163759) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[4])*self.usr_np.sqrt(0.5915477334910892)))**2) / self.usr_np.sqrt(21.523845240327518) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[5])*self.usr_np.sqrt(0.6660874066405383)))**2) / self.usr_np.sqrt(20.010435747987785) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[6])*self.usr_np.sqrt(1.0356429786290025)))**2) / self.usr_np.sqrt(15.724669760799713) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[7])*self.usr_np.sqrt(1.6271907121200917)))**2) / self.usr_np.sqrt(12.916448908177873) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[8])*self.usr_np.sqrt(0.6288175700658138)))**2) / self.usr_np.sqrt(20.72229082142647) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[9])*self.usr_np.sqrt(1.072912815203727)))**2) / self.usr_np.sqrt(15.456337445723344) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[10])*self.usr_np.sqrt(1.220365303556903)))**2) / self.usr_np.sqrt(14.555414167121128) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[11])*self.usr_np.sqrt(1.2576351401316277)))**2) / self.usr_np.sqrt(14.361145410713235) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[12])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[13])*self.usr_np.sqrt(0.9627301634252754)))**2) / self.usr_np.sqrt(16.309701205929798) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[14])*self.usr_np.sqrt(0.5931745914368114)))**2) / self.usr_np.sqrt(21.48675434769058) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[15])*self.usr_np.sqrt(0.5559047548620868)))**2) / self.usr_np.sqrt(22.390954439640836) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[16])*self.usr_np.sqrt(0.5186349182873623)))**2) / self.usr_np.sqrt(23.425108718899267) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[17])*self.usr_np.sqrt(1.1101826517784514)))**2) / self.usr_np.sqrt(15.206021448078332) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[18])*self.usr_np.sqrt(1.5915477334910892)))**2) / self.usr_np.sqrt(13.026553606690673) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[12] / viscosities[19])*self.usr_np.sqrt(1.0357908748058862)))**2) / self.usr_np.sqrt(15.723566788034553),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[0])*self.usr_np.sqrt(1.0774253014824489)))**2) / self.usr_np.sqrt(15.425108718899265) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[1])*self.usr_np.sqrt(0.07742530148244874)))**2) / self.usr_np.sqrt(111.32539682539681) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[2])*self.usr_np.sqrt(0.03871265074122437)))**2) / self.usr_np.sqrt(214.65079365079362) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[3])*self.usr_np.sqrt(1.2288962285889855)))**2) / self.usr_np.sqrt(14.509906869179321) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[4])*self.usr_np.sqrt(0.6144481142944928)))**2) / self.usr_np.sqrt(21.019813738358643) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[5])*self.usr_np.sqrt(0.6918734157769415)))**2) / self.usr_np.sqrt(19.562808770469054) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[6])*self.usr_np.sqrt(1.0757354635532683)))**2) / self.usr_np.sqrt(15.436772581220993) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[7])*self.usr_np.sqrt(1.6901835778477612)))**2) / self.usr_np.sqrt(12.7332136608421) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[8])*self.usr_np.sqrt(0.6531607650357172)))**2) / self.usr_np.sqrt(20.248133121655787) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[9])*self.usr_np.sqrt(1.1144481142944929)))**2) / self.usr_np.sqrt(15.178440967675236) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[10])*self.usr_np.sqrt(1.2676088793302098)))**2) / self.usr_np.sqrt(14.31109495243289) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[11])*self.usr_np.sqrt(1.3063215300714344)))**2) / self.usr_np.sqrt(14.124066560827893) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[12])*self.usr_np.sqrt(1.0387126507412245)))**2) / self.usr_np.sqrt(15.701841307402203) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[13])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[14])*self.usr_np.sqrt(0.6161379522236732)))**2) / self.usr_np.sqrt(20.984105217228695) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[15])*self.usr_np.sqrt(0.5774253014824489)))**2) / self.usr_np.sqrt(21.854605919521113) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[16])*self.usr_np.sqrt(0.5387126507412244)))**2) / self.usr_np.sqrt(22.85021743779853) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[17])*self.usr_np.sqrt(1.1531607650357172)))**2) / self.usr_np.sqrt(14.937454206354492) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[18])*self.usr_np.sqrt(1.6531607650357174)))**2) / self.usr_np.sqrt(12.839214775235218) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[13] / viscosities[19])*self.usr_np.sqrt(1.075889085183194)))**2) / self.usr_np.sqrt(15.435710716070535),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[0])*self.usr_np.sqrt(1.748675434769058)))**2) / self.usr_np.sqrt(12.574891281100735) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[1])*self.usr_np.sqrt(0.12566228261547094)))**2) / self.usr_np.sqrt(71.6626984126984) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[2])*self.usr_np.sqrt(0.06283114130773547)))**2) / self.usr_np.sqrt(135.3253968253968) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[3])*self.usr_np.sqrt(1.9945147416318645)))**2) / self.usr_np.sqrt(12.011000687542971) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[4])*self.usr_np.sqrt(0.9972573708159322)))**2) / self.usr_np.sqrt(16.022001375085942) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[5])*self.usr_np.sqrt(1.1229196534314032)))**2) / self.usr_np.sqrt(15.12428531779073) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[6])*self.usr_np.sqrt(1.7459328055849903)))**2) / self.usr_np.sqrt(12.582077829346662) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[7])*self.usr_np.sqrt(2.7431901764009226)))**2) / self.usr_np.sqrt(10.916312572428367) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[8])*self.usr_np.sqrt(1.0600885121236678)))**2) / self.usr_np.sqrt(15.546539660139942) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[9])*self.usr_np.sqrt(1.808763946892726)))**2) / self.usr_np.sqrt(12.422909917981942) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[10])*self.usr_np.sqrt(2.0573458829396)))**2) / self.usr_np.sqrt(11.888505120281161) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[11])*self.usr_np.sqrt(2.1201770242473357)))**2) / self.usr_np.sqrt(11.773269830069971) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[12])*self.usr_np.sqrt(1.6858442934613227)))**2) / self.usr_np.sqrt(12.745396731494491) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[13])*self.usr_np.sqrt(1.623013152153587)))**2) / self.usr_np.sqrt(12.929103617789385) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[14])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[15])*self.usr_np.sqrt(0.9371688586922646)))**2) / self.usr_np.sqrt(16.53634852011972) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[16])*self.usr_np.sqrt(0.874337717384529)))**2) / self.usr_np.sqrt(17.14978256220147) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[17])*self.usr_np.sqrt(1.8715950882004613)))**2) / self.usr_np.sqrt(12.274428828348764) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[18])*self.usr_np.sqrt(2.683101664277255)))**2) / self.usr_np.sqrt(10.981623881983971) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[14] / viscosities[19])*self.usr_np.sqrt(1.7461821355108147)))**2) / self.usr_np.sqrt(12.58142357392732),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[0])*self.usr_np.sqrt(1.8659128699700698)))**2) / self.usr_np.sqrt(12.287445640550366) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[1])*self.usr_np.sqrt(0.13408713002993017)))**2) / self.usr_np.sqrt(67.6626984126984) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[2])*self.usr_np.sqrt(0.06704356501496508)))**2) / self.usr_np.sqrt(127.32539682539682) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[3])*self.usr_np.sqrt(2.1282341203857666)))**2) / self.usr_np.sqrt(11.758984936558534) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[4])*self.usr_np.sqrt(1.0641170601928833)))**2) / self.usr_np.sqrt(15.51796987311707) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[5])*self.usr_np.sqrt(1.1982041902228135)))**2) / self.usr_np.sqrt(14.676658340271995) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[6])*self.usr_np.sqrt(1.8629863651479879)))**2) / self.usr_np.sqrt(12.294180649767942) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[7])*self.usr_np.sqrt(2.927103425340871)))**2) / self.usr_np.sqrt(10.733077325092594) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[8])*self.usr_np.sqrt(1.1311606252078485)))**2) / self.usr_np.sqrt(15.07238196036926) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[9])*self.usr_np.sqrt(1.930029930162953)))**2) / self.usr_np.sqrt(12.145013439933834) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[10])*self.usr_np.sqrt(2.1952776854007316)))**2) / self.usr_np.sqrt(11.644185905592924) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[11])*self.usr_np.sqrt(2.262321250415697)))**2) / self.usr_np.sqrt(11.53619098018463) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[12])*self.usr_np.sqrt(1.7988693049551048)))**2) / self.usr_np.sqrt(12.447238038896694) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[13])*self.usr_np.sqrt(1.7318257399401393)))**2) / self.usr_np.sqrt(12.61940241185959) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[14])*self.usr_np.sqrt(1.067043565014965)))**2) / self.usr_np.sqrt(15.497350869538117) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[15])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[16])*self.usr_np.sqrt(0.9329564349850349)))**2) / self.usr_np.sqrt(16.574891281100733) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[17])*self.usr_np.sqrt(1.997073495177918)))**2) / self.usr_np.sqrt(12.005861586624924) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[18])*self.usr_np.sqrt(2.862986365147988)))**2) / self.usr_np.sqrt(10.794285050528517) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[15] / viscosities[19])*self.usr_np.sqrt(1.8632524110409046)))**2) / self.usr_np.sqrt(12.293567501963304),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[0])*self.usr_np.sqrt(2.0)))**2) / self.usr_np.sqrt(12.0) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[1])*self.usr_np.sqrt(0.14372282027518357)))**2) / self.usr_np.sqrt(63.66269841269841) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[2])*self.usr_np.sqrt(0.07186141013759179)))**2) / self.usr_np.sqrt(119.32539682539682) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[3])*self.usr_np.sqrt(2.2811720253796253)))**2) / self.usr_np.sqrt(11.506969185574098) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[4])*self.usr_np.sqrt(1.1405860126898126)))**2) / self.usr_np.sqrt(15.013938371148196) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[5])*self.usr_np.sqrt(1.284308832964996)))**2) / self.usr_np.sqrt(14.229031362753261) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[6])*self.usr_np.sqrt(1.996863192414629)))**2) / self.usr_np.sqrt(12.006283470189217) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[7])*self.usr_np.sqrt(3.1374492051044416)))**2) / self.usr_np.sqrt(10.549842077756821) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[8])*self.usr_np.sqrt(1.2124474228274045)))**2) / self.usr_np.sqrt(14.598224260598576) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[9])*self.usr_np.sqrt(2.068724602552221)))**2) / self.usr_np.sqrt(11.867116961885726) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[10])*self.usr_np.sqrt(2.353033435517217)))**2) / self.usr_np.sqrt(11.399866690904684) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[11])*self.usr_np.sqrt(2.424894845654809)))**2) / self.usr_np.sqrt(11.299112130299289) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[12])*self.usr_np.sqrt(1.9281385898624084)))**2) / self.usr_np.sqrt(12.149079346298898) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[13])*self.usr_np.sqrt(1.8562771797248163)))**2) / self.usr_np.sqrt(12.309701205929795) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[14])*self.usr_np.sqrt(1.1437228202751837)))**2) / self.usr_np.sqrt(14.994701739076232) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[15])*self.usr_np.sqrt(1.0718614101375918)))**2) / self.usr_np.sqrt(15.46365147988028) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[16])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[17])*self.usr_np.sqrt(2.1405860126898126)))**2) / self.usr_np.sqrt(11.737294344901086) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[18])*self.usr_np.sqrt(3.068724602552221)))**2) / self.usr_np.sqrt(10.606946219073063) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[16] / viscosities[19])*self.usr_np.sqrt(1.997148356740572)))**2) / self.usr_np.sqrt(12.005711429999286),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[0])*self.usr_np.sqrt(0.9343235862252713)))**2) / self.usr_np.sqrt(16.56234405075925) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[1])*self.usr_np.sqrt(0.06714181043095983)))**2) / self.usr_np.sqrt(127.15079365079364) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[2])*self.usr_np.sqrt(0.03357090521547992)))**2) / self.usr_np.sqrt(246.3015873015873) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[3])*self.usr_np.sqrt(1.0656764137747285)))**2) / self.usr_np.sqrt(15.506969185574098) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[4])*self.usr_np.sqrt(0.5328382068873643)))**2) / self.usr_np.sqrt(23.013938371148196) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[5])*self.usr_np.sqrt(0.5999800173183242)))**2) / self.usr_np.sqrt(21.333777407715793) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[6])*self.usr_np.sqrt(0.9328581895690401)))**2) / self.usr_np.sqrt(16.57579435915744) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[7])*self.usr_np.sqrt(1.4656963964564045)))**2) / self.usr_np.sqrt(13.458156286214184) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[8])*self.usr_np.sqrt(0.5664091121028443)))**2) / self.usr_np.sqrt(22.12406656082789) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[9])*self.usr_np.sqrt(0.9664290947845201)))**2) / self.usr_np.sqrt(16.277896478048106) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[10])*self.usr_np.sqrt(1.0992473189902086)))**2) / self.usr_np.sqrt(15.277707083560564) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[11])*self.usr_np.sqrt(1.1328182242056886)))**2) / self.usr_np.sqrt(15.062033280413946) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[12])*self.usr_np.sqrt(0.9007526810097914)))**2) / self.usr_np.sqrt(16.881461214227613) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[13])*self.usr_np.sqrt(0.8671817757943114)))**2) / self.usr_np.sqrt(17.225286120285737) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[14])*self.usr_np.sqrt(0.5343036035435955)))**2) / self.usr_np.sqrt(22.97276070560369) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[15])*self.usr_np.sqrt(0.5007326983281156)))**2) / self.usr_np.sqrt(23.976587961423345) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[16])*self.usr_np.sqrt(0.46716179311263567)))**2) / self.usr_np.sqrt(25.1246881015185) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[17])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[18])*self.usr_np.sqrt(1.433590887897156)))**2) / self.usr_np.sqrt(13.58039261238239) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[17] / viscosities[19])*self.usr_np.sqrt(0.9329914074468794)))**2) / self.usr_np.sqrt(16.57456985792818),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[0])*self.usr_np.sqrt(0.6517365547682658)))**2) / self.usr_np.sqrt(20.274898410208884) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[1])*self.usr_np.sqrt(0.0468347078638634)))**2) / self.usr_np.sqrt(178.81349206349208) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[2])*self.usr_np.sqrt(0.0234173539319317)))**2) / self.usr_np.sqrt(349.62698412698415) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[3])*self.usr_np.sqrt(0.7433615983273318)))**2) / self.usr_np.sqrt(18.76192262016376) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[4])*self.usr_np.sqrt(0.3716807991636659)))**2) / self.usr_np.sqrt(29.52384524032752) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[5])*self.usr_np.sqrt(0.4185155070275293)))**2) / self.usr_np.sqrt(27.11518179295032) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[6])*self.usr_np.sqrt(0.6507143686839354)))**2) / self.usr_np.sqrt(20.29418064976794) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[7])*self.usr_np.sqrt(1.0223951678476013)))**2) / self.usr_np.sqrt(15.824763116635234) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[8])*self.usr_np.sqrt(0.39509815309559765)))**2) / self.usr_np.sqrt(28.248133121655787) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[9])*self.usr_np.sqrt(0.6741317226158671)))**2) / self.usr_np.sqrt(19.867116961885728) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[10])*self.usr_np.sqrt(0.7667789522592635)))**2) / self.usr_np.sqrt(18.433254559777012) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[11])*self.usr_np.sqrt(0.7901963061911953)))**2) / self.usr_np.sqrt(18.12406656082789) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[12])*self.usr_np.sqrt(0.6283192008363341)))**2) / self.usr_np.sqrt(20.732381867928716) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[13])*self.usr_np.sqrt(0.6049018469044023)))**2) / self.usr_np.sqrt(21.225286120285737) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[14])*self.usr_np.sqrt(0.3727029852479963)))**2) / self.usr_np.sqrt(29.46481331421804) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[15])*self.usr_np.sqrt(0.34928563131606455)))**2) / self.usr_np.sqrt(30.903890921183905) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[16])*self.usr_np.sqrt(0.3258682773841329)))**2) / self.usr_np.sqrt(32.54979682041777) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[17])*self.usr_np.sqrt(0.6975490765477987)))**2) / self.usr_np.sqrt(19.468727103177248) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[18])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[18] / viscosities[19])*self.usr_np.sqrt(0.6508072946916018)))**2) / self.usr_np.sqrt(20.292425215963448),
            (mole_fractions[0]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[0])*self.usr_np.sqrt(1.0014278574998214)))**2) / self.usr_np.sqrt(15.988593426962288) + (mole_fractions[1]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[1])*self.usr_np.sqrt(0.0719640179910045)))**2) / self.usr_np.sqrt(119.16666666666666) + (mole_fractions[2]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[2])*self.usr_np.sqrt(0.03598200899550225)))**2) / self.usr_np.sqrt(230.33333333333331) + (mole_fractions[3]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[3])*self.usr_np.sqrt(1.1422146069822232)))**2) / self.usr_np.sqrt(15.00393774610913) + (mole_fractions[4]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[4])*self.usr_np.sqrt(0.5711073034911116)))**2) / self.usr_np.sqrt(22.00787549221826) + (mole_fractions[5]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[5])*self.usr_np.sqrt(0.6430713214821161)))**2) / self.usr_np.sqrt(20.440299750208162) + (mole_fractions[6]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[6])*self.usr_np.sqrt(0.9998572142500178)))**2) / self.usr_np.sqrt(16.00114244912531) + (mole_fractions[7]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[7])*self.usr_np.sqrt(1.5709645177411296)))**2) / self.usr_np.sqrt(13.092412915540002) + (mole_fractions[8]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[8])*self.usr_np.sqrt(0.6070893124866139)))**2) / self.usr_np.sqrt(21.177632739460222) + (mole_fractions[9]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[9])*self.usr_np.sqrt(1.0358392232455202)))**2) / self.usr_np.sqrt(15.723206285753669) + (mole_fractions[10]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[10])*self.usr_np.sqrt(1.1781966159777255)))**2) / self.usr_np.sqrt(14.790038174877296) + (mole_fractions[11]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[11])*self.usr_np.sqrt(1.2141786249732278)))**2) / self.usr_np.sqrt(14.588816369730111) + (mole_fractions[12]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[12])*self.usr_np.sqrt(0.9654458485043192)))**2) / self.usr_np.sqrt(16.286326998447088) + (mole_fractions[13]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[13])*self.usr_np.sqrt(0.929463839508817)))**2) / self.usr_np.sqrt(16.60711268146555) + (mole_fractions[14]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[14])*self.usr_np.sqrt(0.5726779467409152)))**2) / self.usr_np.sqrt(21.969457084086518) + (mole_fractions[15]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[15])*self.usr_np.sqrt(0.536695937745413)))**2) / self.usr_np.sqrt(22.906019288327236) + (mole_fractions[16]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[16])*self.usr_np.sqrt(0.5007139287499107)))**2) / self.usr_np.sqrt(23.977186853924575) + (mole_fractions[17]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[17])*self.usr_np.sqrt(1.0718212322410223)))**2) / self.usr_np.sqrt(15.463931259575034) + (mole_fractions[18]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[18])*self.usr_np.sqrt(1.536553151995431)))**2) / self.usr_np.sqrt(13.206458357532814) + (mole_fractions[19]*(1 + self.usr_np.sqrt((viscosities[19] / viscosities[19])*self.usr_np.sqrt(1.0)))**2) / self.usr_np.sqrt(16.0),
            ])
        return sum(mole_fractions*viscosities/mix_rule_f)

    def get_mixture_thermal_conductivity_mixavg(self, temperature, mass_fractions):
        mmw = self.get_mix_molecular_weight(mass_fractions)
        mole_fractions = self.get_mole_fractions(mmw, mass_fractions)
        conductivities = self.get_species_thermal_conductivities(temperature)
        return 0.5*(sum(mole_fractions*conductivities)
            + 1/sum(mole_fractions/conductivities))

    def get_species_mass_diffusivities_mixavg(self, pressure, temperature,
            mass_fractions):
        mmw = self.get_mix_molecular_weight(mass_fractions)
        mole_fractions = self.get_mole_fractions(mmw, mass_fractions)
        bdiff_ij = self.get_species_binary_mass_diffusivities(temperature)
        zeros = self._pyro_zeros_like(temperature)

        x_sum = self._pyro_make_array([
            mole_fractions[0] / bdiff_ij[0][0] + mole_fractions[1] / bdiff_ij[1][0] + mole_fractions[2] / bdiff_ij[2][0] + mole_fractions[3] / bdiff_ij[3][0] + mole_fractions[4] / bdiff_ij[4][0] + mole_fractions[5] / bdiff_ij[5][0] + mole_fractions[6] / bdiff_ij[6][0] + mole_fractions[7] / bdiff_ij[7][0] + mole_fractions[8] / bdiff_ij[8][0] + mole_fractions[9] / bdiff_ij[9][0] + mole_fractions[10] / bdiff_ij[10][0] + mole_fractions[11] / bdiff_ij[11][0] + mole_fractions[12] / bdiff_ij[12][0] + mole_fractions[13] / bdiff_ij[13][0] + mole_fractions[14] / bdiff_ij[14][0] + mole_fractions[15] / bdiff_ij[15][0] + mole_fractions[16] / bdiff_ij[16][0] + mole_fractions[17] / bdiff_ij[17][0] + mole_fractions[18] / bdiff_ij[18][0] + mole_fractions[19] / bdiff_ij[19][0],
            mole_fractions[0] / bdiff_ij[0][1] + mole_fractions[1] / bdiff_ij[1][1] + mole_fractions[2] / bdiff_ij[2][1] + mole_fractions[3] / bdiff_ij[3][1] + mole_fractions[4] / bdiff_ij[4][1] + mole_fractions[5] / bdiff_ij[5][1] + mole_fractions[6] / bdiff_ij[6][1] + mole_fractions[7] / bdiff_ij[7][1] + mole_fractions[8] / bdiff_ij[8][1] + mole_fractions[9] / bdiff_ij[9][1] + mole_fractions[10] / bdiff_ij[10][1] + mole_fractions[11] / bdiff_ij[11][1] + mole_fractions[12] / bdiff_ij[12][1] + mole_fractions[13] / bdiff_ij[13][1] + mole_fractions[14] / bdiff_ij[14][1] + mole_fractions[15] / bdiff_ij[15][1] + mole_fractions[16] / bdiff_ij[16][1] + mole_fractions[17] / bdiff_ij[17][1] + mole_fractions[18] / bdiff_ij[18][1] + mole_fractions[19] / bdiff_ij[19][1],
            mole_fractions[0] / bdiff_ij[0][2] + mole_fractions[1] / bdiff_ij[1][2] + mole_fractions[2] / bdiff_ij[2][2] + mole_fractions[3] / bdiff_ij[3][2] + mole_fractions[4] / bdiff_ij[4][2] + mole_fractions[5] / bdiff_ij[5][2] + mole_fractions[6] / bdiff_ij[6][2] + mole_fractions[7] / bdiff_ij[7][2] + mole_fractions[8] / bdiff_ij[8][2] + mole_fractions[9] / bdiff_ij[9][2] + mole_fractions[10] / bdiff_ij[10][2] + mole_fractions[11] / bdiff_ij[11][2] + mole_fractions[12] / bdiff_ij[12][2] + mole_fractions[13] / bdiff_ij[13][2] + mole_fractions[14] / bdiff_ij[14][2] + mole_fractions[15] / bdiff_ij[15][2] + mole_fractions[16] / bdiff_ij[16][2] + mole_fractions[17] / bdiff_ij[17][2] + mole_fractions[18] / bdiff_ij[18][2] + mole_fractions[19] / bdiff_ij[19][2],
            mole_fractions[0] / bdiff_ij[0][3] + mole_fractions[1] / bdiff_ij[1][3] + mole_fractions[2] / bdiff_ij[2][3] + mole_fractions[3] / bdiff_ij[3][3] + mole_fractions[4] / bdiff_ij[4][3] + mole_fractions[5] / bdiff_ij[5][3] + mole_fractions[6] / bdiff_ij[6][3] + mole_fractions[7] / bdiff_ij[7][3] + mole_fractions[8] / bdiff_ij[8][3] + mole_fractions[9] / bdiff_ij[9][3] + mole_fractions[10] / bdiff_ij[10][3] + mole_fractions[11] / bdiff_ij[11][3] + mole_fractions[12] / bdiff_ij[12][3] + mole_fractions[13] / bdiff_ij[13][3] + mole_fractions[14] / bdiff_ij[14][3] + mole_fractions[15] / bdiff_ij[15][3] + mole_fractions[16] / bdiff_ij[16][3] + mole_fractions[17] / bdiff_ij[17][3] + mole_fractions[18] / bdiff_ij[18][3] + mole_fractions[19] / bdiff_ij[19][3],
            mole_fractions[0] / bdiff_ij[0][4] + mole_fractions[1] / bdiff_ij[1][4] + mole_fractions[2] / bdiff_ij[2][4] + mole_fractions[3] / bdiff_ij[3][4] + mole_fractions[4] / bdiff_ij[4][4] + mole_fractions[5] / bdiff_ij[5][4] + mole_fractions[6] / bdiff_ij[6][4] + mole_fractions[7] / bdiff_ij[7][4] + mole_fractions[8] / bdiff_ij[8][4] + mole_fractions[9] / bdiff_ij[9][4] + mole_fractions[10] / bdiff_ij[10][4] + mole_fractions[11] / bdiff_ij[11][4] + mole_fractions[12] / bdiff_ij[12][4] + mole_fractions[13] / bdiff_ij[13][4] + mole_fractions[14] / bdiff_ij[14][4] + mole_fractions[15] / bdiff_ij[15][4] + mole_fractions[16] / bdiff_ij[16][4] + mole_fractions[17] / bdiff_ij[17][4] + mole_fractions[18] / bdiff_ij[18][4] + mole_fractions[19] / bdiff_ij[19][4],
            mole_fractions[0] / bdiff_ij[0][5] + mole_fractions[1] / bdiff_ij[1][5] + mole_fractions[2] / bdiff_ij[2][5] + mole_fractions[3] / bdiff_ij[3][5] + mole_fractions[4] / bdiff_ij[4][5] + mole_fractions[5] / bdiff_ij[5][5] + mole_fractions[6] / bdiff_ij[6][5] + mole_fractions[7] / bdiff_ij[7][5] + mole_fractions[8] / bdiff_ij[8][5] + mole_fractions[9] / bdiff_ij[9][5] + mole_fractions[10] / bdiff_ij[10][5] + mole_fractions[11] / bdiff_ij[11][5] + mole_fractions[12] / bdiff_ij[12][5] + mole_fractions[13] / bdiff_ij[13][5] + mole_fractions[14] / bdiff_ij[14][5] + mole_fractions[15] / bdiff_ij[15][5] + mole_fractions[16] / bdiff_ij[16][5] + mole_fractions[17] / bdiff_ij[17][5] + mole_fractions[18] / bdiff_ij[18][5] + mole_fractions[19] / bdiff_ij[19][5],
            mole_fractions[0] / bdiff_ij[0][6] + mole_fractions[1] / bdiff_ij[1][6] + mole_fractions[2] / bdiff_ij[2][6] + mole_fractions[3] / bdiff_ij[3][6] + mole_fractions[4] / bdiff_ij[4][6] + mole_fractions[5] / bdiff_ij[5][6] + mole_fractions[6] / bdiff_ij[6][6] + mole_fractions[7] / bdiff_ij[7][6] + mole_fractions[8] / bdiff_ij[8][6] + mole_fractions[9] / bdiff_ij[9][6] + mole_fractions[10] / bdiff_ij[10][6] + mole_fractions[11] / bdiff_ij[11][6] + mole_fractions[12] / bdiff_ij[12][6] + mole_fractions[13] / bdiff_ij[13][6] + mole_fractions[14] / bdiff_ij[14][6] + mole_fractions[15] / bdiff_ij[15][6] + mole_fractions[16] / bdiff_ij[16][6] + mole_fractions[17] / bdiff_ij[17][6] + mole_fractions[18] / bdiff_ij[18][6] + mole_fractions[19] / bdiff_ij[19][6],
            mole_fractions[0] / bdiff_ij[0][7] + mole_fractions[1] / bdiff_ij[1][7] + mole_fractions[2] / bdiff_ij[2][7] + mole_fractions[3] / bdiff_ij[3][7] + mole_fractions[4] / bdiff_ij[4][7] + mole_fractions[5] / bdiff_ij[5][7] + mole_fractions[6] / bdiff_ij[6][7] + mole_fractions[7] / bdiff_ij[7][7] + mole_fractions[8] / bdiff_ij[8][7] + mole_fractions[9] / bdiff_ij[9][7] + mole_fractions[10] / bdiff_ij[10][7] + mole_fractions[11] / bdiff_ij[11][7] + mole_fractions[12] / bdiff_ij[12][7] + mole_fractions[13] / bdiff_ij[13][7] + mole_fractions[14] / bdiff_ij[14][7] + mole_fractions[15] / bdiff_ij[15][7] + mole_fractions[16] / bdiff_ij[16][7] + mole_fractions[17] / bdiff_ij[17][7] + mole_fractions[18] / bdiff_ij[18][7] + mole_fractions[19] / bdiff_ij[19][7],
            mole_fractions[0] / bdiff_ij[0][8] + mole_fractions[1] / bdiff_ij[1][8] + mole_fractions[2] / bdiff_ij[2][8] + mole_fractions[3] / bdiff_ij[3][8] + mole_fractions[4] / bdiff_ij[4][8] + mole_fractions[5] / bdiff_ij[5][8] + mole_fractions[6] / bdiff_ij[6][8] + mole_fractions[7] / bdiff_ij[7][8] + mole_fractions[8] / bdiff_ij[8][8] + mole_fractions[9] / bdiff_ij[9][8] + mole_fractions[10] / bdiff_ij[10][8] + mole_fractions[11] / bdiff_ij[11][8] + mole_fractions[12] / bdiff_ij[12][8] + mole_fractions[13] / bdiff_ij[13][8] + mole_fractions[14] / bdiff_ij[14][8] + mole_fractions[15] / bdiff_ij[15][8] + mole_fractions[16] / bdiff_ij[16][8] + mole_fractions[17] / bdiff_ij[17][8] + mole_fractions[18] / bdiff_ij[18][8] + mole_fractions[19] / bdiff_ij[19][8],
            mole_fractions[0] / bdiff_ij[0][9] + mole_fractions[1] / bdiff_ij[1][9] + mole_fractions[2] / bdiff_ij[2][9] + mole_fractions[3] / bdiff_ij[3][9] + mole_fractions[4] / bdiff_ij[4][9] + mole_fractions[5] / bdiff_ij[5][9] + mole_fractions[6] / bdiff_ij[6][9] + mole_fractions[7] / bdiff_ij[7][9] + mole_fractions[8] / bdiff_ij[8][9] + mole_fractions[9] / bdiff_ij[9][9] + mole_fractions[10] / bdiff_ij[10][9] + mole_fractions[11] / bdiff_ij[11][9] + mole_fractions[12] / bdiff_ij[12][9] + mole_fractions[13] / bdiff_ij[13][9] + mole_fractions[14] / bdiff_ij[14][9] + mole_fractions[15] / bdiff_ij[15][9] + mole_fractions[16] / bdiff_ij[16][9] + mole_fractions[17] / bdiff_ij[17][9] + mole_fractions[18] / bdiff_ij[18][9] + mole_fractions[19] / bdiff_ij[19][9],
            mole_fractions[0] / bdiff_ij[0][10] + mole_fractions[1] / bdiff_ij[1][10] + mole_fractions[2] / bdiff_ij[2][10] + mole_fractions[3] / bdiff_ij[3][10] + mole_fractions[4] / bdiff_ij[4][10] + mole_fractions[5] / bdiff_ij[5][10] + mole_fractions[6] / bdiff_ij[6][10] + mole_fractions[7] / bdiff_ij[7][10] + mole_fractions[8] / bdiff_ij[8][10] + mole_fractions[9] / bdiff_ij[9][10] + mole_fractions[10] / bdiff_ij[10][10] + mole_fractions[11] / bdiff_ij[11][10] + mole_fractions[12] / bdiff_ij[12][10] + mole_fractions[13] / bdiff_ij[13][10] + mole_fractions[14] / bdiff_ij[14][10] + mole_fractions[15] / bdiff_ij[15][10] + mole_fractions[16] / bdiff_ij[16][10] + mole_fractions[17] / bdiff_ij[17][10] + mole_fractions[18] / bdiff_ij[18][10] + mole_fractions[19] / bdiff_ij[19][10],
            mole_fractions[0] / bdiff_ij[0][11] + mole_fractions[1] / bdiff_ij[1][11] + mole_fractions[2] / bdiff_ij[2][11] + mole_fractions[3] / bdiff_ij[3][11] + mole_fractions[4] / bdiff_ij[4][11] + mole_fractions[5] / bdiff_ij[5][11] + mole_fractions[6] / bdiff_ij[6][11] + mole_fractions[7] / bdiff_ij[7][11] + mole_fractions[8] / bdiff_ij[8][11] + mole_fractions[9] / bdiff_ij[9][11] + mole_fractions[10] / bdiff_ij[10][11] + mole_fractions[11] / bdiff_ij[11][11] + mole_fractions[12] / bdiff_ij[12][11] + mole_fractions[13] / bdiff_ij[13][11] + mole_fractions[14] / bdiff_ij[14][11] + mole_fractions[15] / bdiff_ij[15][11] + mole_fractions[16] / bdiff_ij[16][11] + mole_fractions[17] / bdiff_ij[17][11] + mole_fractions[18] / bdiff_ij[18][11] + mole_fractions[19] / bdiff_ij[19][11],
            mole_fractions[0] / bdiff_ij[0][12] + mole_fractions[1] / bdiff_ij[1][12] + mole_fractions[2] / bdiff_ij[2][12] + mole_fractions[3] / bdiff_ij[3][12] + mole_fractions[4] / bdiff_ij[4][12] + mole_fractions[5] / bdiff_ij[5][12] + mole_fractions[6] / bdiff_ij[6][12] + mole_fractions[7] / bdiff_ij[7][12] + mole_fractions[8] / bdiff_ij[8][12] + mole_fractions[9] / bdiff_ij[9][12] + mole_fractions[10] / bdiff_ij[10][12] + mole_fractions[11] / bdiff_ij[11][12] + mole_fractions[12] / bdiff_ij[12][12] + mole_fractions[13] / bdiff_ij[13][12] + mole_fractions[14] / bdiff_ij[14][12] + mole_fractions[15] / bdiff_ij[15][12] + mole_fractions[16] / bdiff_ij[16][12] + mole_fractions[17] / bdiff_ij[17][12] + mole_fractions[18] / bdiff_ij[18][12] + mole_fractions[19] / bdiff_ij[19][12],
            mole_fractions[0] / bdiff_ij[0][13] + mole_fractions[1] / bdiff_ij[1][13] + mole_fractions[2] / bdiff_ij[2][13] + mole_fractions[3] / bdiff_ij[3][13] + mole_fractions[4] / bdiff_ij[4][13] + mole_fractions[5] / bdiff_ij[5][13] + mole_fractions[6] / bdiff_ij[6][13] + mole_fractions[7] / bdiff_ij[7][13] + mole_fractions[8] / bdiff_ij[8][13] + mole_fractions[9] / bdiff_ij[9][13] + mole_fractions[10] / bdiff_ij[10][13] + mole_fractions[11] / bdiff_ij[11][13] + mole_fractions[12] / bdiff_ij[12][13] + mole_fractions[13] / bdiff_ij[13][13] + mole_fractions[14] / bdiff_ij[14][13] + mole_fractions[15] / bdiff_ij[15][13] + mole_fractions[16] / bdiff_ij[16][13] + mole_fractions[17] / bdiff_ij[17][13] + mole_fractions[18] / bdiff_ij[18][13] + mole_fractions[19] / bdiff_ij[19][13],
            mole_fractions[0] / bdiff_ij[0][14] + mole_fractions[1] / bdiff_ij[1][14] + mole_fractions[2] / bdiff_ij[2][14] + mole_fractions[3] / bdiff_ij[3][14] + mole_fractions[4] / bdiff_ij[4][14] + mole_fractions[5] / bdiff_ij[5][14] + mole_fractions[6] / bdiff_ij[6][14] + mole_fractions[7] / bdiff_ij[7][14] + mole_fractions[8] / bdiff_ij[8][14] + mole_fractions[9] / bdiff_ij[9][14] + mole_fractions[10] / bdiff_ij[10][14] + mole_fractions[11] / bdiff_ij[11][14] + mole_fractions[12] / bdiff_ij[12][14] + mole_fractions[13] / bdiff_ij[13][14] + mole_fractions[14] / bdiff_ij[14][14] + mole_fractions[15] / bdiff_ij[15][14] + mole_fractions[16] / bdiff_ij[16][14] + mole_fractions[17] / bdiff_ij[17][14] + mole_fractions[18] / bdiff_ij[18][14] + mole_fractions[19] / bdiff_ij[19][14],
            mole_fractions[0] / bdiff_ij[0][15] + mole_fractions[1] / bdiff_ij[1][15] + mole_fractions[2] / bdiff_ij[2][15] + mole_fractions[3] / bdiff_ij[3][15] + mole_fractions[4] / bdiff_ij[4][15] + mole_fractions[5] / bdiff_ij[5][15] + mole_fractions[6] / bdiff_ij[6][15] + mole_fractions[7] / bdiff_ij[7][15] + mole_fractions[8] / bdiff_ij[8][15] + mole_fractions[9] / bdiff_ij[9][15] + mole_fractions[10] / bdiff_ij[10][15] + mole_fractions[11] / bdiff_ij[11][15] + mole_fractions[12] / bdiff_ij[12][15] + mole_fractions[13] / bdiff_ij[13][15] + mole_fractions[14] / bdiff_ij[14][15] + mole_fractions[15] / bdiff_ij[15][15] + mole_fractions[16] / bdiff_ij[16][15] + mole_fractions[17] / bdiff_ij[17][15] + mole_fractions[18] / bdiff_ij[18][15] + mole_fractions[19] / bdiff_ij[19][15],
            mole_fractions[0] / bdiff_ij[0][16] + mole_fractions[1] / bdiff_ij[1][16] + mole_fractions[2] / bdiff_ij[2][16] + mole_fractions[3] / bdiff_ij[3][16] + mole_fractions[4] / bdiff_ij[4][16] + mole_fractions[5] / bdiff_ij[5][16] + mole_fractions[6] / bdiff_ij[6][16] + mole_fractions[7] / bdiff_ij[7][16] + mole_fractions[8] / bdiff_ij[8][16] + mole_fractions[9] / bdiff_ij[9][16] + mole_fractions[10] / bdiff_ij[10][16] + mole_fractions[11] / bdiff_ij[11][16] + mole_fractions[12] / bdiff_ij[12][16] + mole_fractions[13] / bdiff_ij[13][16] + mole_fractions[14] / bdiff_ij[14][16] + mole_fractions[15] / bdiff_ij[15][16] + mole_fractions[16] / bdiff_ij[16][16] + mole_fractions[17] / bdiff_ij[17][16] + mole_fractions[18] / bdiff_ij[18][16] + mole_fractions[19] / bdiff_ij[19][16],
            mole_fractions[0] / bdiff_ij[0][17] + mole_fractions[1] / bdiff_ij[1][17] + mole_fractions[2] / bdiff_ij[2][17] + mole_fractions[3] / bdiff_ij[3][17] + mole_fractions[4] / bdiff_ij[4][17] + mole_fractions[5] / bdiff_ij[5][17] + mole_fractions[6] / bdiff_ij[6][17] + mole_fractions[7] / bdiff_ij[7][17] + mole_fractions[8] / bdiff_ij[8][17] + mole_fractions[9] / bdiff_ij[9][17] + mole_fractions[10] / bdiff_ij[10][17] + mole_fractions[11] / bdiff_ij[11][17] + mole_fractions[12] / bdiff_ij[12][17] + mole_fractions[13] / bdiff_ij[13][17] + mole_fractions[14] / bdiff_ij[14][17] + mole_fractions[15] / bdiff_ij[15][17] + mole_fractions[16] / bdiff_ij[16][17] + mole_fractions[17] / bdiff_ij[17][17] + mole_fractions[18] / bdiff_ij[18][17] + mole_fractions[19] / bdiff_ij[19][17],
            mole_fractions[0] / bdiff_ij[0][18] + mole_fractions[1] / bdiff_ij[1][18] + mole_fractions[2] / bdiff_ij[2][18] + mole_fractions[3] / bdiff_ij[3][18] + mole_fractions[4] / bdiff_ij[4][18] + mole_fractions[5] / bdiff_ij[5][18] + mole_fractions[6] / bdiff_ij[6][18] + mole_fractions[7] / bdiff_ij[7][18] + mole_fractions[8] / bdiff_ij[8][18] + mole_fractions[9] / bdiff_ij[9][18] + mole_fractions[10] / bdiff_ij[10][18] + mole_fractions[11] / bdiff_ij[11][18] + mole_fractions[12] / bdiff_ij[12][18] + mole_fractions[13] / bdiff_ij[13][18] + mole_fractions[14] / bdiff_ij[14][18] + mole_fractions[15] / bdiff_ij[15][18] + mole_fractions[16] / bdiff_ij[16][18] + mole_fractions[17] / bdiff_ij[17][18] + mole_fractions[18] / bdiff_ij[18][18] + mole_fractions[19] / bdiff_ij[19][18],
            mole_fractions[0] / bdiff_ij[0][19] + mole_fractions[1] / bdiff_ij[1][19] + mole_fractions[2] / bdiff_ij[2][19] + mole_fractions[3] / bdiff_ij[3][19] + mole_fractions[4] / bdiff_ij[4][19] + mole_fractions[5] / bdiff_ij[5][19] + mole_fractions[6] / bdiff_ij[6][19] + mole_fractions[7] / bdiff_ij[7][19] + mole_fractions[8] / bdiff_ij[8][19] + mole_fractions[9] / bdiff_ij[9][19] + mole_fractions[10] / bdiff_ij[10][19] + mole_fractions[11] / bdiff_ij[11][19] + mole_fractions[12] / bdiff_ij[12][19] + mole_fractions[13] / bdiff_ij[13][19] + mole_fractions[14] / bdiff_ij[14][19] + mole_fractions[15] / bdiff_ij[15][19] + mole_fractions[16] / bdiff_ij[16][19] + mole_fractions[17] / bdiff_ij[17][19] + mole_fractions[18] / bdiff_ij[18][19] + mole_fractions[19] / bdiff_ij[19][19],
            ])
        denom = self._pyro_make_array([
            x_sum[0] - mole_fractions[0]/bdiff_ij[0][0],
            x_sum[1] - mole_fractions[1]/bdiff_ij[1][1],
            x_sum[2] - mole_fractions[2]/bdiff_ij[2][2],
            x_sum[3] - mole_fractions[3]/bdiff_ij[3][3],
            x_sum[4] - mole_fractions[4]/bdiff_ij[4][4],
            x_sum[5] - mole_fractions[5]/bdiff_ij[5][5],
            x_sum[6] - mole_fractions[6]/bdiff_ij[6][6],
            x_sum[7] - mole_fractions[7]/bdiff_ij[7][7],
            x_sum[8] - mole_fractions[8]/bdiff_ij[8][8],
            x_sum[9] - mole_fractions[9]/bdiff_ij[9][9],
            x_sum[10] - mole_fractions[10]/bdiff_ij[10][10],
            x_sum[11] - mole_fractions[11]/bdiff_ij[11][11],
            x_sum[12] - mole_fractions[12]/bdiff_ij[12][12],
            x_sum[13] - mole_fractions[13]/bdiff_ij[13][13],
            x_sum[14] - mole_fractions[14]/bdiff_ij[14][14],
            x_sum[15] - mole_fractions[15]/bdiff_ij[15][15],
            x_sum[16] - mole_fractions[16]/bdiff_ij[16][16],
            x_sum[17] - mole_fractions[17]/bdiff_ij[17][17],
            x_sum[18] - mole_fractions[18]/bdiff_ij[18][18],
            x_sum[19] - mole_fractions[19]/bdiff_ij[19][19],
            ])

        return self._pyro_make_array([
            self.usr_np.where(self.usr_np.greater(denom[0], zeros), (mmw - mole_fractions[0] * self.molecular_weights[0])/(pressure * mmw * denom[0]), bdiff_ij[0][0] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[1], zeros), (mmw - mole_fractions[1] * self.molecular_weights[1])/(pressure * mmw * denom[1]), bdiff_ij[1][1] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[2], zeros), (mmw - mole_fractions[2] * self.molecular_weights[2])/(pressure * mmw * denom[2]), bdiff_ij[2][2] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[3], zeros), (mmw - mole_fractions[3] * self.molecular_weights[3])/(pressure * mmw * denom[3]), bdiff_ij[3][3] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[4], zeros), (mmw - mole_fractions[4] * self.molecular_weights[4])/(pressure * mmw * denom[4]), bdiff_ij[4][4] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[5], zeros), (mmw - mole_fractions[5] * self.molecular_weights[5])/(pressure * mmw * denom[5]), bdiff_ij[5][5] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[6], zeros), (mmw - mole_fractions[6] * self.molecular_weights[6])/(pressure * mmw * denom[6]), bdiff_ij[6][6] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[7], zeros), (mmw - mole_fractions[7] * self.molecular_weights[7])/(pressure * mmw * denom[7]), bdiff_ij[7][7] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[8], zeros), (mmw - mole_fractions[8] * self.molecular_weights[8])/(pressure * mmw * denom[8]), bdiff_ij[8][8] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[9], zeros), (mmw - mole_fractions[9] * self.molecular_weights[9])/(pressure * mmw * denom[9]), bdiff_ij[9][9] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[10], zeros), (mmw - mole_fractions[10] * self.molecular_weights[10])/(pressure * mmw * denom[10]), bdiff_ij[10][10] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[11], zeros), (mmw - mole_fractions[11] * self.molecular_weights[11])/(pressure * mmw * denom[11]), bdiff_ij[11][11] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[12], zeros), (mmw - mole_fractions[12] * self.molecular_weights[12])/(pressure * mmw * denom[12]), bdiff_ij[12][12] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[13], zeros), (mmw - mole_fractions[13] * self.molecular_weights[13])/(pressure * mmw * denom[13]), bdiff_ij[13][13] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[14], zeros), (mmw - mole_fractions[14] * self.molecular_weights[14])/(pressure * mmw * denom[14]), bdiff_ij[14][14] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[15], zeros), (mmw - mole_fractions[15] * self.molecular_weights[15])/(pressure * mmw * denom[15]), bdiff_ij[15][15] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[16], zeros), (mmw - mole_fractions[16] * self.molecular_weights[16])/(pressure * mmw * denom[16]), bdiff_ij[16][16] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[17], zeros), (mmw - mole_fractions[17] * self.molecular_weights[17])/(pressure * mmw * denom[17]), bdiff_ij[17][17] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[18], zeros), (mmw - mole_fractions[18] * self.molecular_weights[18])/(pressure * mmw * denom[18]), bdiff_ij[18][18] / pressure),
            self.usr_np.where(self.usr_np.greater(denom[19], zeros), (mmw - mole_fractions[19] * self.molecular_weights[19])/(pressure * mmw * denom[19]), bdiff_ij[19][19] / pressure),
            ])
