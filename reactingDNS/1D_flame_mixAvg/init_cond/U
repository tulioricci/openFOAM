/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       volVectorField;
    location    "0.000000";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField  uniform (5.952410108387e-01 0. 0.);

/*
internalField  #codeStream
{
    codeInclude  // Headers for compilation
    #{
      #include "fvCFD.H"
    #};

    codeOptions // Compilation options
    #{
      -I$(FOAM_SRC)/finiteVolume/lnInclude \
      -I$(FOAM_SRC)/meshTools/lnInclude 
    #};

    codeLibs  // Libraries for compilation
    #{
      -lmeshTools \
      -lfiniteVolume
    #};

    code  // User code
    #{
      // Access to internal mesh information
      const IOdictionary& d = static_cast<const IOdictionary&>(dict);
      const fvMesh& mesh = refCast<const fvMesh>(d.db());

      scalar T1 = 0.5952410108387;  // Value at x1
      scalar T2 = 4.784825407076;  // Value at x2
      scalar x1 = -0.0002;  // Start of the domain
      scalar x2 = 0.0002;  // End of the domain
      scalar gradient = (T2 - T1) / (x2 - x1);

      vectorField T(mesh.nCells(), Foam::Vector<double>(0., 0., 0.)); // initialization

      forAll(T, i) // Loop on elements
      {
        const scalar x = mesh.C()[i].x(); // Access to z component of cell centers coordinates
        if (x < x1){
          T[i][0] = T1;
          Info << x << tab << T[i] << endl;
        }
        else if (x > x2){
          T[i][0] = T2;
          Info << x << tab << T[i] << endl;
        }
        else{
          T[i][0] = T1 + gradient * (x - x1); // Compute the temperature
          Info << x << tab << T[i] << endl;
        }
      }
      writeEntry(os, "", T); // Write output in the dictionary
    #};
};
*/
 
boundaryField
{
    frontAndBack
    {
        type            empty;
    }
    outlet
    {
        type            inletOutlet;
        inletValue      uniform (4.784825407076e+00 0 0 );
    }

    inlet
    {
        type            codedFixedValue;
        value           uniform (5.952410108387e-01 0 0);
        name            myVelocityInlet;
        //redirectType    myPinlet;

        code
        #{
            const scalar p0 = 101325.0;
            const scalar rho0 = 1.169853268102;
            const scalar T0 = 300.0;
            const scalar R = 288.7114215170679;
            const scalar gamma = 1.382504729781694;
            const scalar u0 = 5.952410108387e-01;

            const fvPatch& boundaryPatch = patch();          // Get the current patch
            vectorField& patchField = *this;                 // Directly access the boundary field

            // Access the fields
            const vectorField& faceNormals = boundaryPatch.Sf();
            const scalarField faceAreas = mag(faceNormals);
            const volVectorField& U = db().lookupObject<volVectorField>("U");
            const volScalarField& psi = db().lookupObject<volScalarField>("thermo:psi");
            const volScalarField& p = db().lookupObject<volScalarField>("p_rgh");
            const volScalarField& T = db().lookupObject<volScalarField>("T");

            const vectorField& UVal = U.internalField();       // Access cell-centered velocity
            const scalarField& psiVal = psi.internalField();   // Access cell-centered psi
            const scalarField& pVal = p.internalField();       // Access cell-centered pressure
            const scalarField& TVal = T.internalField();       // Access cell-centered temperature

            // Loop over the boundary faces and compute necessary values
            forAll(boundaryPatch, faceI)
            {
                // Get the cell index corresponding to the boundary face
                label cellI = boundaryPatch.faceCells()[faceI];

                // Extract cell-centered values
                vector U_cell = UVal[cellI];
                scalar psi_cell = psiVal[cellI];
                scalar p_cell = pVal[cellI];
                scalar T_cell = TVal[cellI];

                // Compute quantities
                vector nHat = faceNormals[faceI] / faceAreas[faceI];
                scalar U_normal = mag(U_cell & nHat);
                scalar rho_cell = psi_cell * p_cell;

                // Compute perturbed values
                scalar u_tilde = U_normal - u0;
                scalar p_tilde = p_cell - p0;
                scalar rho_tilde = rho_cell - rho0;
                scalar sound_speed = sqrt(gamma * R * T_cell);

                // Compute coefficients
                //scalar c1 = rho_tilde * std::pow(sound_speed,2) + p_tilde;
                //scalar c2 = 0.0;
                //scalar c3 = rho0 * sound_speed * u_tilde + p_tilde;
                //scalar c4 = 0.0;
                scalar c1 = 0.0;
                //scalar c2 = 0.0;
                scalar c3 = 0.0;
                scalar c4 = -rho0 * sound_speed * u_tilde + p_tilde;
                
                //Info << 1.0/(rho0*sound_speed)*(0.5*c3 - 0.5*c4) + u0 << endl;
                patchField[faceI] = vector(1.0/(rho0*sound_speed)*(0.5*c3 - 0.5*c4) + u0, 0, 0);
            }

            // Update the coefficients for the patch field
            fixedValueFvPatchField::updateCoeffs();
        #};

        /*
        codeOptions
        #{
            -I$(LIB_SRC)/../applications/solvers/combustion/reactingDNS/transport
        #};
        */

        codeInclude
        #{
            #include <cmath>
            #include <iostream>
        #};
    }

}


// ************************************************************************* //
