/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default none;
    grad(U) fourth;
    grad(p_rgh) fourth;
    grad(rho) fourth;
    grad(C2H4) fourth;
    grad(H2) fourth;
    grad(H) fourth;
    grad(O2) fourth;
    grad(O) fourth;
    grad(H2O) fourth;
    grad(CO) fourth;
    grad(CO2) fourth;
    grad(OH) fourth;
    grad(HCO) fourth;
    grad(HO2) fourth;
    grad(H2O2) fourth;
    grad(C2H3) fourth;
    grad(C2H2) fourth;
    grad(CH4) fourth;
    grad(CH3) fourth;
    grad(CH2) fourth;
    grad(CH2O) fourth;
    grad(CH2CHO) fourth;
    grad(N2) fourth;
    grad(h) fourth;
    grad(MW) fourth;
    grad((1-(0*C2H4))) fourth;
    //default         Gauss linear;
    //limitedGrad     cellLimited Gauss linear 1;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss cubicUpwindFit 1; //linearUpwind grad(U);
    div(phi,Yi_h)   Gauss limitedCubic 1; //Gauss limitedLinear 1;
    div(phi,K)      Gauss cubicUpwindFit 1; //Gauss linear;
    div(((mixMu+(rho*nut))*dev2(grad(U).T()))) Gauss linear;
}

laplacianSchemes
{
    //default        Gauss harmonic corrected; //linear limited 1.0;
    laplacian((mixMu+(rho*nut)),U)  Gauss linear limited 1.0;
    default none;
    //
    laplacian((rho*DiffC2H4),C2H4)  Gauss harmonic corrected;
    laplacian((rho*DiffCH4),CH4)  Gauss harmonic corrected;
    laplacian((rho*DiffH2),H2)  Gauss harmonic corrected;
    laplacian((rho*DiffH),H)  Gauss harmonic corrected;
    laplacian((rho*DiffO2),O2)  Gauss harmonic corrected;
    laplacian((rho*DiffO),O)  Gauss harmonic corrected;
    laplacian((rho*DiffH2O),H2O)  Gauss harmonic corrected;
    laplacian((rho*DiffCO),CO)  Gauss harmonic corrected;
    laplacian((rho*DiffH2O2),H2O2)  Gauss harmonic corrected;
    laplacian((rho*DiffC2H2),C2H2)  Gauss harmonic corrected;
    laplacian((rho*DiffCO2),CO2)   Gauss harmonic corrected;
    laplacian((rho*DiffOH),OH)   Gauss harmonic corrected;
    laplacian((rho*DiffHCO),HCO)   Gauss harmonic corrected;
    laplacian((rho*DiffHO2),HO2)   Gauss harmonic corrected;
    laplacian((rho*DiffC2H3),C2H3)   Gauss harmonic corrected;
    laplacian((rho*DiffCH2),CH2)   Gauss harmonic corrected;
    laplacian((rho*DiffCH2O),CH2O)   Gauss harmonic corrected;
    laplacian((rho*DiffCH2CHO),CH2CHO)   Gauss harmonic corrected;
    //
    laplacian((rho*DiffC2H4),C2H4)  Gauss harmonic corrected;
    laplacian((rho*DiffCH4),CH4)  Gauss harmonic corrected;
    laplacian((rho*DiffCH3),CH3)  Gauss harmonic corrected;
    laplacian((rho*DiffH2),H2)  Gauss harmonic corrected;
    laplacian((rho*DiffH),H)  Gauss harmonic corrected;
    laplacian((rho*DiffO2),O2)  Gauss harmonic corrected;
    laplacian((rho*DiffO),O)  Gauss harmonic corrected;
    laplacian((rho*DiffH2O),H2O)  Gauss harmonic corrected;
    laplacian((rho*DiffCO),CO)  Gauss harmonic corrected;
    laplacian((rho*DiffH2O2),H2O2)  Gauss harmonic corrected;
    laplacian((rho*DiffC2H2),C2H2)  Gauss harmonic corrected;
    laplacian((rho*DiffCO2),CO2)  Gauss harmonic corrected;
    laplacian((rho*DiffOH),OH)  Gauss harmonic corrected;
    laplacian((rho*DiffHCO),HCO)  Gauss harmonic corrected;
    laplacian((rho*DiffHO2),HO2)  Gauss harmonic corrected;
    laplacian((rho*DiffC2H3),C2H3)  Gauss harmonic corrected;
    laplacian((rho*DiffCH2),CH2)  Gauss harmonic corrected;
    laplacian((rho*DiffCH2O),CH2O)  Gauss harmonic corrected;
    laplacian((rho*DiffCH2CHO),CH2CHO)  Gauss harmonic corrected;
    /*
    laplacian((((rho*DiffC2H4)*C2H4)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffCH4)*CH4)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffCH3)*CH3)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffH2)*H2)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffH)*H)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffO2)*O2)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffO)*O)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffH2O)*H2O)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffCO)*CO)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffH2O2)*H2O2)|MW),MW)  Gauss harmonic corrected;
    laplacian((((rho*DiffC2H2)*C2H2)|MW),MW)  Gauss harmonic limited 1.0;
    laplacian((((rho*DiffCO2)*CO2)|MW),MW)  Gauss harmonic limited 1.0;
    laplacian((((rho*DiffOH)*OH)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffHCO)*HCO)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffHO2)*HO2)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffC2H3)*C2H3)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffCH2)*CH2)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffCH2O)*CH2O)|MW),MW)  Gauss linear limited 1.0;
    laplacian((((rho*DiffCH2CHO)*CH2CHO)|MW),MW)  Gauss linear limited 1.0;
    */
    //
    laplacian((mixAlpha*Hsi),C2H4)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CH4)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CH3)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),H2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),H)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),O2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),O)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),H2O)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CO)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CO2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),OH)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),HCO)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),HO2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),H2O2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),C2H3)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),C2H2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CH2)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CH2O)  Gauss harmonic corrected;
    laplacian((mixAlpha*Hsi),CH2CHO)  Gauss harmonic corrected;
    //
    laplacian((mixAlpha*Hsi),(1-(0*C2H4)))   Gauss linear limited 1.0; // N2?!?!?!?
    laplacian(mixAlpha,h)   Gauss linear limited 1.0;
    laplacian(rhorAUf,p_rgh)   Gauss linear limited 1.0;
}

interpolationSchemes
{
    default         linear;
    /*
    default none;
    interpolate(DiffError)     linear;
    interpolate(Hsi)      linear;
    interpolate(((((rho*DiffC2H4)*grad(C2H4))+((((C2H4*rho)*DiffC2H4)*grad(MW))|MW))-(C2H4*DiffError)))     linear;
    interpolate(((((rho*DiffH2)*grad(H2))+((((H2*rho)*DiffH2)*grad(MW))|MW))-(H2*DiffError)))     linear;
    interpolate(((((rho*DiffH)*grad(H))+((((H*rho)*DiffH)*grad(MW))|MW))-(H*DiffError)))     linear;
    interpolate(((((rho*DiffO2)*grad(O2))+((((O2*rho)*DiffO2)*grad(MW))|MW))-(O2*DiffError)))     linear;
    interpolate(((((rho*DiffO)*grad(O))+((((O*rho)*DiffO)*grad(MW))|MW))-(O*DiffError)))     linear;
    interpolate(((((rho*DiffH2O)*grad(H2O))+((((H2O*rho)*DiffH2O)*grad(MW))|MW))-(H2O*DiffError)))     linear;
    interpolate(((((rho*DiffCO)*grad(CO))+((((CO*rho)*DiffCO)*grad(MW))|MW))-(CO*DiffError)))     linear;
    interpolate(((((rho*DiffCO2)*grad(CO2))+((((CO2*rho)*DiffCO2)*grad(MW))|MW))-(CO2*DiffError)))     linear;
    interpolate(((((rho*DiffOH)*grad(OH))+((((OH*rho)*DiffOH)*grad(MW))|MW))-(OH*DiffError)))     linear;
    interpolate(((((rho*DiffHCO)*grad(HCO))+((((HCO*rho)*DiffHCO)*grad(MW))|MW))-(HCO*DiffError)))     linear;
    interpolate(((((rho*DiffHO2)*grad(HO2))+((((HO2*rho)*DiffHO2)*grad(MW))|MW))-(HO2*DiffError)))     linear;
    interpolate(((((rho*DiffH2O2)*grad(H2O2))+((((H2O2*rho)*DiffH2O2)*grad(MW))|MW))-(H2O2*DiffError)))     linear;
    interpolate(((((rho*DiffC2H3)*grad(C2H3))+((((C2H3*rho)*DiffC2H3)*grad(MW))|MW))-(C2H3*DiffError)))     linear;
    interpolate(((((rho*DiffC2H2)*grad(C2H2))+((((C2H2*rho)*DiffC2H2)*grad(MW))|MW))-(C2H2*DiffError)))     linear;
    interpolate(((((rho*DiffCH4)*grad(CH4))+((((CH4*rho)*DiffCH4)*grad(MW))|MW))-(CH4*DiffError)))     linear;
    interpolate(((((rho*DiffCH3)*grad(CH3))+((((CH3*rho)*DiffCH3)*grad(MW))|MW))-(CH3*DiffError)))     linear;
    interpolate(((((rho*DiffCH2)*grad(CH2))+((((CH2*rho)*DiffCH2)*grad(MW))|MW))-(CH2*DiffError)))     linear;
    interpolate(((((rho*DiffCH2O)*grad(CH2O))+((((CH2O*rho)*DiffCH2O)*grad(MW))|MW))-(CH2O*DiffError)))     linear;
    interpolate(((((rho*DiffCH2CHO)*grad(CH2CHO))+((((CH2CHO*rho)*DiffCH2CHO)*grad(MW))|MW))-(CH2CHO*DiffError)))     linear;
    interpolate((rho*(1|A(U))))   linear;
    dotInterpolate(Sf,(rho_0*U_0))    linear;
    flux((rho*HbyA))    linear;
    interpolate(rho)   linear;
    */
}

snGradSchemes
{
    //default         limited 1.0;
    default none;
    snGrad(p_rgh)       limited 1.0;
    snGrad(rho)         limited 1.0;
}

fluxRequired
{
    default         no;
    p;
    pd;
}

// ************************************************************************* //
