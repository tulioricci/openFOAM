/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application       reactingFoam;

startFrom         latestTime;
/*startFrom       startTime;*/

startTime         0;

stopAt            endTime;
/*stopAt          writeNow;*/

endTime           2.0;

deltaT            1e-7;

writeControl      adjustableRunTime;
writeInterval     0.1;

purgeWrite        0;

// For cfd coupled simulation, allow the flow to adjust to the solid temperature
delaySolid        5; // time in seconds

/*writeFormat     binary;*/
writeFormat       ascii;

writePrecision    15;

writeCompression  off;

timeFormat        fixed;

timePrecision     6;

runTimeModifiable true;

//LTS               1; // everything else down here wrt time is ignored
//adjustTimeStep    no;
LTS               0;
adjustTimeStep    yes;

adjustStartTime   0;

maxCo             1.0;

maxDeltaT       1e-6; // reduce it if the surface temperature starts oscillating

minDeltaT       1e-7;

minChemDeltaT   1e-7; // Minimum time step for species equation

REVlength       1e3;

dYtolMin        0.05; // Min variation of mass fractions in species equation
dYtolMax        0.1; // Max
Ythreshold      0.001; // Species below this mass fraction are ignored for the time step optimization
/* End adjustable time step */

functions
{
    probes_slug
    {
       // Type of functionObject
       type probes;

       // Where to load it from (if not already in solver)
       functionObjectLibs ("libsampling.so");
       writeControl   timeStep;
       writeInterval  25;

       region slug;

      // Fields to be probed. runTime modifiable!
       fields (Ta);

       // Locations to be probed. runTime modifiable!
       probeLocations
       (
       ( 0.0038076790509 0.11000 0.0)
       ( 0.0 0.11000 0.0)
       ( 0.0 0.12016 0.0)
       ); 
    }
    
    probes_holder
    {
       // Type of functionObject
       type probes;

       // Where to load it from (if not already in solver)
       functionObjectLibs ("libsampling.so");
       writeControl   timeStep;
       writeInterval  25;

       region holder;

      // Fields to be probed. runTime modifiable!
       fields (Ta);

       // Locations to be probed. runTime modifiable!
       probeLocations
       (
       ( 0.0038076790510 0.11000 0.0)
       ( 0.0158653293788 0.11000 0.0)
       ); 
    }
    
    wallHeatFlux1
    {
       type            wallHeatFlux;
       libs            ("libfieldFunctionObjects.so");

       // Optional entries (runtime modifiable)
       patches         ("flow_to_slug");
       qr              qr;

       // Optional (inherited) entries
       writePrecision  8;
       writeToFile     true;
       region          flow;
       log             false;
       executeControl  timeStep;
       executeInterval 25;
       //writeControl    timeStep;
       //writeInterval      25;
       writeControl    writeTime;
    }

   
    patchProbes
    {
       type                patchProbes;
       functionObjectLibs  ("libsampling.so");

       // Patches to sample (wildcards allowed)
       patchName           flow_to_slug;

       // Name of the directory for probe data
       //name               patchProbes;

       //writeControl         writeTime;
       writeControl       timeStep;
       writeInterval      25;

       region             flow;
       fields               (wallHeatFlux);

        // Locations to probe. These get snapped onto the nearest point
        // on the selected patches
       probeLocations (
           ( 0.0 0.11 0.0)
       );
    }

    fileUpdate1
    {
        type            timeActivatedFileUpdate;
        functionObjectLibs ("libutilityFunctionObjects.so");
        writeControl   timeStep;
        writeInterval  1;
        fileToUpdate    "$FOAM_CASE/system/controlDict";
        timeVsFile
        (
            (0.00000    "$FOAM_CASE/system/controlDict_1")
            (0.00020    "$FOAM_CASE/system/controlDict_2")
            (0.01000    "$FOAM_CASE/system/controlDict_3")
        );
    }

    fileUpdate2
    {
        type            timeActivatedFileUpdate;
        functionObjectLibs ("libutilityFunctionObjects.so");
        writeControl   timeStep;
        writeInterval  1;
        fileToUpdate    "$FOAM_CASE/system/flow/fvSchemes";
        timeVsFile
        (
            (0.00000    "$FOAM_CASE/system/flow/fvSchemes.0")
            (0.00020    "$FOAM_CASE/system/flow/fvSchemes.1")
        );
    }

}

// ************************************************************************* //
