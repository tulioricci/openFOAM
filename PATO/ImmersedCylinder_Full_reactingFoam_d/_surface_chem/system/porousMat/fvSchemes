/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile {
  version     2.0;
  format      ascii;
  class       dictionary;
  object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes {
  default           Euler; // backward;
}

gradSchemes {
  //default           cellMDLimited Gauss linear 0;
  default           none;
  grad(cellMotionU) cellMDLimited Gauss linear 0;
  grad(Ta)          cellMDLimited Gauss linear 0;
  grad(Tg)          cellMDLimited Gauss linear 0;
  grad(p)           cellMDLimited Gauss linear 0;
  grad(rho_s)       cellMDLimited Gauss linear 0;
  grad(rT)          cellMDLimited Gauss linear 0;
}

divSchemes {
  default           Gauss linear corrected;
  div(meshPhi,Xsii) Gauss limitedLinear 1;
  div(epsphi,Yi)    Gauss limitedLinear 1;
  div(epsphi,Zi)    Gauss limitedLinear 1;
}

laplacianSchemes {
  //default             Gauss linear corrected;
  default none;
  laplacian(k,Ta)     Gauss linear corrected;
  laplacian(Gamma,p)  Gauss linear corrected;
  laplacian(diffusivity,cellMotionU)  Gauss linear corrected;
  laplacian(GammaHg,p)       Gauss linear corrected;
}

interpolationSchemes {
  //default         linear;
  default none;
  interpolate((eps_g*rho_g))     linear;
  dotInterpolate(((S&interpolate(Gamma))-(((S&interpolate(Gamma))&(S|magSf))*(S|magSf))),grad(p))     linear;
  interpolate(Eta)     linear;
  interpolate(K)       linear;
  interpolate((rho_g|mu_g))  linear;
  dotInterpolate(((S&interpolate(GammaHg))-(((S&interpolate(GammaHg))&(S|magSf))*(S|magSf))),grad(p))   linear;
  dotInterpolate(((S&interpolate(k))-(((S&interpolate(k))&(S|magSf))*(S|magSf))),grad(Ta))  linear;
}

snGradSchemes {
  //default         corrected;
  default none;
  snGrad(p)        corrected;
}

fluxRequired { // used for the ALE correction
  default         none;
  Ta;
  T;
  p;
  Xsii;
  Yi;
  Zi;
  rT;
  eps_s;
}

// ************************************************************************* //
