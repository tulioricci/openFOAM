/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/fluid";
    object      CH4;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{  
    fuel
    {
        type            codedMixed;
        refValue        uniform 0.05; // Reference value for CH4
        refGradient     uniform 0;    // Gradient for zeroGradient behavior
        valueFraction   uniform 1;    // Starts with fixedValue behavior
        name            myInlet;
        redirectType    myCH4inlet;

        code
        #{
            // Reference value for CH4 at the boundary
            const scalar refVal = 0.05;

            const fvPatch& boundaryPatch = patch();        // Access the current boundary patch
            scalarField& refValueField = refValue();       // Access refValue (fixed value part)
            scalarField& refGradField = refGrad();         // Access refGradient (gradient part)
            scalarField& valueFracField = valueFraction(); // Control between Dirichlet (1.0) and Neumann (0.0)

            // TODO : get only the surface data somehow?
            const volVectorField& U = db().lookupObject<volVectorField>("U"); // TODO: check -- Velocity field
            const volScalarField& rho = db().lookupObject<volScalarField>("rho"); // TODO: check -- Density field
            const volScalarField& alpha = db().lookupObject<volScalarField>("thermo:alpha"); // TODO: check -- Thermal diffusivity field
            const volScalarField& Y_CH4 = db().lookupObject<volScalarField>("CH4"); // TODO: check -- CH4 mass fraction

            // Loop over the boundary faces and compute necessary values
            forAll(boundaryPatch, faceI)
            {
                // Access values at the boundary face
                const scalar rhoVal = rho.boundaryField()[boundaryPatch.index()][faceI];
                const vector UVal = U.boundaryField()[boundaryPatch.index()][faceI];
                const scalar YVal = Y_CH4.boundaryField()[boundaryPatch.index()][faceI];
                const scalar alphaVal = alpha.boundaryField()[boundaryPatch.index()][faceI];

                // Compute the reference gradient for CH4 based on velocity, species diffusivity, and concentration
                scalar refGradVal = 0.1 * (refVal - YVal) / alphaVal; // FIXME: get only normal component

                // Set the refValue and refGrad for the boundary patch
                refValueField[faceI] = refVal;
                refGradField[faceI] = refGradVal;

                // Set the valueFraction field to 0.0, which corresponds to Neumann
                valueFracField[faceI] = 0.0;
            }
        #};

/*
        code
        #{
            //#include "fvPatchFields.H"
            //#include "volFields.H"
            
            // Reference value for CH4 at the boundary
            const scalar refVal = 0.05;
            
            const fvPatch& boundaryPatch = patch();       // Access the current boundary patch
            scalarField& refValueField = refValue();      // Access refValue (fixed value part)
            scalarField& refGradField = refGrad();    // Access refGradient (gradient part)
            scalarField& valueFracField = valueFraction(); // Control between fixedValue (1) and zeroGradient (0)

            scalarField speciesDiff(boundaryPatch.size());
            
            const volScalarField& Y_CH4 = db().lookupObject<volScalarField>("CH4");


            // Get velocity field
            const volVectorField& U = db().lookupObject<volVectorField>("U");

            // Get density field
            const volScalarField& rho = db().lookupObject<volScalarField>("rho");

            // Compute thermal diffusivity alpha
            const volScalarField& alpha =
                db().lookupObject<volScalarField>("thermo:alpha");          

            // Assign fixed value and gradient behavior to each face
            forAll(boundaryPatch, faceI)
            {
                const scalar rhoVal = rho.boundaryField()[boundaryPatch.index()][faceI];
                const vector UVal = U.boundaryField()[boundaryPatch.index()][faceI];
                const vector YVal = Y_CH4.boundaryField()[boundaryPatch.index()][faceI];
                const scalar speciesDiff = alpha.boundaryField()[boundaryPatch.index()][faceI];
                
                this->refValue() = refVal;
                this->refGrad() = UVal/speciesDiff*(refVal - YVal);
                this->valueFraction() = 0.0;
            }
        #};
  */
  
        /*
        code
        #{
            const fvPatch& boundaryPatch = patch();       // Get the current patch
            scalarField& patchField = *this;             // Directly access the boundary field
            const scalar Yref = 0.05;

            // Access the species field (Y_CH4) from the database
            const volScalarField& Y_CH4 = db().lookupObject<volScalarField>("CH4");

            // Assign values to each face of the patch
            forAll(boundaryPatch, faceI)
            {
                // Extract the Y_CH4 value for the boundary face and modify as needed
                patchField[faceI] = Y_CH4.boundaryField()[boundaryPatch.index()][faceI] * 0.0 + 0.05;
            }

            // Update the coefficients for the patch field
            fixedValueFvPatchField::updateCoeffs();
        #};
        */

        /*
        code
        #{
            const fvPatch& boundaryPatch = patch();
            scalarField& patchField = *this;
            const volScalarField& Y_CH4 =               // Access the species field
                db().lookupObject<volScalarField>("Y_CH4");

            forAll(boundaryPatch, faceI)
            {
            patchField[faceI] = Y_CH4.boundaryField()[boundaryPatch.index()]*0.0 + 0.05;
            }
        #};
        */

        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        codeInclude
        #{
            #include "fvCFD.H"
            #include <cmath>
            #include <iostream>
        #};
    }  
  
    shield
    {
        type            fixedValue;
        value           uniform 0.0;
    }

    outlet
    {
        type            zeroGradient;
    }

    burner
    {
        type            zeroGradient;
    }

    f_front
    {
        type            wedge;
    }

    f_back
    {
        type            wedge;
    }

    wall
    {
        type            zeroGradient;
    }
}


// ************************************************************************* //
